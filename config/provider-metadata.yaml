name: vk-cs/vkcs
resources:
    vkcs_backup_plan:
        subCategory: Backup
        description: Manages a backup plan resource within VKCS.
        name: vkcs_backup_plan
        title: vkcs_backup_plan
        examples:
            - name: backup_plan
              manifest: |-
                {
                  "full_retention": {
                    "max_full_backup": 25
                  },
                  "incremental_backup": true,
                  "instance_ids": [
                    "${vkcs_compute_instance.basic.id}"
                  ],
                  "name": "backup-plan-tf-example",
                  "provider_name": "cloud_servers",
                  "schedule": {
                    "date": [
                      "Mo"
                    ],
                    "time": "04:00+03"
                  }
                }
            - name: backup_plan
              manifest: |-
                {
                  "gfs_retention": {
                    "gfs_monthly": 11,
                    "gfs_weekly": 4,
                    "gfs_yearly": 2
                  },
                  "incremental_backup": false,
                  "instance_ids": [
                    "${vkcs_compute_instance.basic.id}"
                  ],
                  "name": "backup-plan-tf-example",
                  "provider_name": "cloud_servers",
                  "schedule": {
                    "date": [
                      "Mo",
                      "We",
                      "Fr"
                    ],
                    "time": "23:00"
                  }
                }
            - name: backup_plan
              manifest: |-
                {
                  "full_retention": {
                    "max_full_backup": 25
                  },
                  "incremental_backup": false,
                  "instance_ids": [
                    "${vkcs_db_instance.mysql.id}"
                  ],
                  "name": "backup-plan-tf-example",
                  "provider_name": "dbaas",
                  "schedule": {
                    "every_hours": 12
                  }
                }
        argumentDocs:
            date: optional string →  List of days when to perform backups. If incremental_backups is enabled, only one day should be specified
            every_hours: 'optional number →  Hour interval of backups, must be one of: 3, 12, 24. This field is incompatible with date/time fields'
            full_retention: optional →  Parameters for full retention policy. Specifies number of full backups stored. Incremental backups (if enabled) are not counted as full. Incompatible with gfs_retention
            gfs_monthly: optional number →  Number of months to store backups
            gfs_retention: optional →  Parameters for gfs retention policy. Specifies number of full backups stored. Incremental backups (if enabled) are not counted as full. Incompatible with full_retention
            gfs_weekly: required number →  Number of weeks to store backups
            gfs_yearly: optional number →  Number of years to store backups
            id: string →  ID of the resource
            incremental_backup: 'required boolean →  Whether incremental backups strategy should be used. If enabled, the schedule.date field must specify one day, on which full backup will be created. On other days, incremental backups will be created. Note: This option may be enabled for only for ''cloud_servers'' provider.'
            instance_ids: required string →  List of ids of instances to make backup for
            max_full_backup: required number →  Maximum number of backups
            name: required string →  Name of the backup plan
            provider_id: optional string →  ID of backup provider
            provider_name: 'optional string →  Name of backup provider, must be one of: cloud_servers, dbaas'
            region: optional string →  The region to fetch availability zones from, defaults to the provider's region.
            schedule: required
            time: optional string →  Time of backup in format hh:mm (for UTC timezone) or hh:mm+tz (for other timezones, e.g. 10:00+03 for MSK, 10:00-04 for ET)
        importStatements:
            - terraform import vkcs_backup_plan.mybackupplan 5dfe75cb-a00f-4bc8-9551-bd38f64747e7
    vkcs_blockstorage_snapshot:
        subCategory: Disks (block storage)
        description: Manages a blockstorage snapshot.
        name: vkcs_blockstorage_snapshot
        title: vkcs_blockstorage_snapshot
        examples:
            - name: recent_snapshot
              manifest: |-
                {
                  "description": "test snapshot",
                  "metadata": {
                    "foo": "bar"
                  },
                  "name": "snapshot-tf-example",
                  "volume_id": "${vkcs_blockstorage_volume.data.id}"
                }
              references:
                volume_id: vkcs_blockstorage_volume.data.id
        argumentDocs:
            description: optional string →  The description of the volume.
            force: optional boolean →  Allows or disallows snapshot of a volume when the volume is attached to an instance.
            id: string →  ID of the resource.
            metadata: optional map of string →  Map of key-value metadata of the volume.
            name: optional string →  The name of the snapshot.
            region: optional string
            volume_id: required string →  ID of the volume to create snapshot for. Changing this creates a new snapshot.
        importStatements:
            - terraform import vkcs_blockstorage_snapshot.myvolumesnapshot 0b4f5a9b-554e-4e80-b553-82aba6502315
    vkcs_blockstorage_volume:
        subCategory: Disks (block storage)
        description: Manages a blockstorage volume.
        name: vkcs_blockstorage_volume
        title: vkcs_blockstorage_volume
        examples:
            - name: data
              manifest: |-
                {
                  "availability_zone": "GZ1",
                  "description": "test volume",
                  "metadata": {
                    "foo": "bar"
                  },
                  "name": "data-tf-example",
                  "size": 1,
                  "volume_type": "ceph-ssd"
                }
            - name: bootable
              manifest: |-
                {
                  "availability_zone": "GZ1",
                  "image_id": "${data.vkcs_images_image.debian.id}",
                  "name": "bootable-tf-example",
                  "size": 5,
                  "volume_type": "ceph-ssd"
                }
              references:
                image_id: data.vkcs_images_image.debian.id
        argumentDocs:
            availability_zone: required string →  The name of the availability zone of the volume.
            description: optional string →  The description of the volume.
            id: string →  ID of the resource.
            image_id: optional string →  ID of the image to create volume with. Changing this creates a new volume. Only one of snapshot_id, source_volume_id, image_id fields may be set.
            metadata: optional map of string →  Map of key-value metadata of the volume.
            name: optional string →  The name of the volume.
            region: optional string →  Region to create resource in.
            size: required number →  The size of the volume.
            snapshot_id: optional string →  ID of the snapshot of volume. Changing this creates a new volume. Only one of snapshot_id, source_volume_id, image_id fields may be set.
            source_vol_id: optional string →  ID of the source volume. Changing this creates a new volume. Only one of snapshot_id, source_volume_id, image_id fields may be set.
            volume_type: required string →  The type of the volume.
        importStatements:
            - terraform import vkcs_blockstorage_volume.myvolume 64f3cfc5-226e-4388-a9b8-365b1441b94f
    vkcs_compute_floatingip_associate:
        subCategory: Virtual Machines
        description: Associate a floating IP to an instance
        name: vkcs_compute_floatingip_associate
        title: vkcs_compute_floatingip_associate
        examples:
            - name: fip_basic
              manifest: |-
                {
                  "floating_ip": "${vkcs_networking_floatingip.fip_basic.address}",
                  "instance_id": "${vkcs_compute_instance.basic.id}"
                }
              references:
                floating_ip: vkcs_networking_floatingip.fip_basic.address
                instance_id: vkcs_compute_instance.basic.id
              dependencies:
                vkcs_networking_floatingip.fip_basic: |-
                    {
                      "pool": "ext-net"
                    }
            - name: fip_explicit
              manifest: |-
                {
                  "fixed_ip": "${vkcs_compute_instance.multiple_networks.network.1.fixed_ip_v4}",
                  "floating_ip": "${vkcs_networking_floatingip.fip_explicit.address}",
                  "instance_id": "${vkcs_compute_instance.multiple_networks.id}"
                }
              references:
                fixed_ip: vkcs_compute_instance.multiple_networks.network.1.fixed_ip_v4
                floating_ip: vkcs_networking_floatingip.fip_explicit.address
                instance_id: vkcs_compute_instance.multiple_networks.id
              dependencies:
                vkcs_networking_floatingip.fip_explicit: |-
                    {
                      "pool": "ext-net"
                    }
        argumentDocs:
            fixed_ip: optional string →  The specific IP address to direct traffic to.
            floating_ip: required string →  The floating IP to associate.
            id: string →  ID of the resource.
            instance_id: required string →  The instance to associate the floating IP with.
            region: optional string →  The region in which to obtain the V2 Compute client. Keypairs are associated with accounts, but a Compute client is needed to create one. If omitted, the region argument of the provider is used. Changing this creates a new floatingip_associate.
            wait_until_associated: optional boolean →  In cases where the VKCS environment does not automatically wait until the association has finished, set this option to have Terraform poll the instance until the floating IP has been associated. Defaults to false.
        importStatements:
            - terraform import vkcs_compute_floatingip_associate.fip_1 <floating_ip>/<instance_id>/<fixed_ip>
    vkcs_compute_instance:
        subCategory: Virtual Machines
        description: Manages a compute VM instance.
        name: vkcs_compute_instance
        title: vkcs_compute_instance
        examples:
            - name: basic
              manifest: |-
                {
                  "availability_zone": "GZ1",
                  "block_device": [
                    {
                      "delete_on_termination": true,
                      "destination_type": "volume",
                      "source_type": "image",
                      "uuid": "${data.vkcs_images_image.debian.id}",
                      "volume_size": 10,
                      "volume_type": "ceph-ssd"
                    }
                  ],
                  "depends_on": [
                    "${vkcs_networking_router_interface.app}"
                  ],
                  "flavor_name": "Basic-1-2-20",
                  "name": "basic-tf-example",
                  "network": [
                    {
                      "uuid": "${vkcs_networking_network.app.id}"
                    }
                  ],
                  "security_groups": [
                    "${vkcs_networking_secgroup.admin.name}"
                  ]
                }
              references:
                block_device.uuid: data.vkcs_images_image.debian.id
                network.uuid: vkcs_networking_network.app.id
            - name: volumes_tags_externalip
              manifest: |-
                {
                  "availability_zone": "GZ1",
                  "block_device": [
                    {
                      "boot_index": 0,
                      "destination_type": "volume",
                      "source_type": "volume",
                      "uuid": "${vkcs_blockstorage_volume.bootable.id}"
                    },
                    {
                      "delete_on_termination": true,
                      "destination_type": "volume",
                      "source_type": "blank",
                      "volume_size": 20
                    }
                  ],
                  "flavor_name": "Basic-1-2-20",
                  "name": "volumes-tags-externalip-tf-example",
                  "network": [
                    {
                      "name": "ext-net"
                    }
                  ],
                  "stop_before_destroy": true,
                  "tags": [
                    "tf-example"
                  ]
                }
              references:
                block_device.uuid: vkcs_blockstorage_volume.bootable.id
            - name: multiple_networks
              manifest: |-
                {
                  "availability_zone": "GZ1",
                  "block_device": [
                    {
                      "delete_on_termination": true,
                      "destination_type": "volume",
                      "source_type": "image",
                      "uuid": "${data.vkcs_images_image.debian.id}",
                      "volume_size": 10
                    }
                  ],
                  "depends_on": [
                    "${vkcs_networking_router_interface.app}",
                    "${vkcs_networking_router_interface.db}"
                  ],
                  "flavor_name": "Basic-1-2-20",
                  "name": "multiple-networks-tf-example",
                  "network": [
                    {
                      "uuid": "${vkcs_networking_network.app.id}"
                    },
                    {
                      "port": "${vkcs_networking_port.persistent_etcd.id}"
                    }
                  ],
                  "security_groups": [
                    "${vkcs_networking_secgroup.admin.name}"
                  ]
                }
              references:
                block_device.uuid: data.vkcs_images_image.debian.id
                network.port: vkcs_networking_port.persistent_etcd.id
                network.uuid: vkcs_networking_network.app.id
            - name: basic
              manifest: |-
                {
                  "availability_zone": "GZ1",
                  "block_device": [
                    {
                      "delete_on_termination": true,
                      "destination_type": "volume",
                      "source_type": "image",
                      "uuid": "${data.vkcs_images_image.debian.id}",
                      "volume_size": 10
                    }
                  ],
                  "config_drive": true,
                  "depends_on": [
                    "${vkcs_networking_router_interface.app}"
                  ],
                  "flavor_name": "Basic-1-2-20",
                  "name": "personality-tf-example",
                  "network": [
                    {
                      "uuid": "${vkcs_networking_network.app.id}"
                    }
                  ],
                  "personality": [
                    {
                      "content": "${jsonencode({ \"foo\" : \"bar\" })}",
                      "file": "/opt/app/config.json"
                    }
                  ]
                }
              references:
                block_device.uuid: data.vkcs_images_image.debian.id
                network.uuid: vkcs_networking_network.app.id
            - name: basic
              manifest: |-
                {
                  "availability_zone": "GZ1",
                  "block_device": [
                    {
                      "delete_on_termination": true,
                      "destination_type": "volume",
                      "source_type": "image",
                      "uuid": "${data.vkcs_images_image.debian.id}",
                      "volume_size": 10
                    }
                  ],
                  "depends_on": [
                    "${vkcs_networking_router_interface.app}"
                  ],
                  "flavor_name": "Basic-1-2-20",
                  "name": "basic-tf-example",
                  "network": [
                    {
                      "uuid": "${vkcs_networking_network.app.id}"
                    }
                  ],
                  "user_data": "    #cloud-config\n    package_upgrade: true\n    packages:\n      - nginx\n    runcmd:\n      - systemctl start nginx\n"
                }
              references:
                block_device.uuid: data.vkcs_images_image.debian.id
                network.uuid: vkcs_networking_network.app.id
            - name: foo
              manifest: |-
                {
                  "name": "terraform-test",
                  "security_groups": [
                    "${vkcs_networking_secgroup.sg_1.name}"
                  ]
                }
              dependencies:
                vkcs_networking_secgroup.sg_1: |-
                    {
                      "name": "sg_1"
                    }
            - name: instance_1
              manifest: |-
                {
                  "metadata": {
                    "key1": "value1",
                    "key2": "value2"
                  }
                }
            - name: instance_1
              manifest: |-
                {
                  "tags": [
                    "webserver",
                    "production"
                  ]
                }
        argumentDocs:
            access_ip_v4: optional string →  The first detected Fixed IPv4 address.
            access_network: optional boolean →  Specifies if this network should be used for provisioning access. Accepts true or false. Defaults to false.
            admin_pass: optional sensitive string →  The administrative password to assign to the server. Changing this changes the root password on the existing server.
            all_metadata: map of string →  Contains all instance metadata, even metadata not set by Terraform.
            all_tags: set of string →  The collection of tags assigned on the instance, which have been explicitly and implicitly added.
            availability_zone: optional string →  The availability zone in which to create the server. Conflicts with availability_zone_hints. Changing this creates a new server.
            block_device: optional →  Configuration of block devices. The block_device structure is documented below. Changing this creates a new server. You can specify multiple block devices which will create an instance with multiple disks. This configuration is very flexible, so please see the following reference for more information.
            block_device.boot_index: 'optional number →  The boot index of the volume. It defaults to 0 if only one block_device is specified, and to -1 if more than one is configured. Changing this creates a new server. Note: You must set the boot index to 0 for one of the block devices if more than one is defined.'
            block_device.delete_on_termination: optional boolean →  Delete the volume / block device upon termination of the instance. Defaults to false. Changing this creates a new server.  raw HTML omitted  It is important to enable delete_on_termination for volumes created with instance. If delete_on_termination is disabled for such volumes, then after instance deletion such volumes will stay orphaned and uncontrolled by terraform.  raw HTML omitted  It is important to disable delete_on_termination if volume is created as separate terraform resource and is attached to instance. Enabling delete_on_termination for such volumes will result in mismanagement between two terraform resources in case of instance deletion
            block_device.destination_type: optional string →  The type that gets created. Possible values are "volume" and "local". Changing this creates a new server.
            block_device.device_type: optional string →  The low-level device type that will be used. Most common thing is to leave this empty. Changing this creates a new server.
            block_device.disk_bus: optional string →  The low-level disk bus that will be used. Most common thing is to leave this empty. Changing this creates a new server.
            block_device.guest_format: 'optional string →  Specifies the guest server disk file system format, such as ext2, ext3, ext4, xfs or swap. Swap block device mappings have the following restrictions: source_type must be blank and destination_type must be local and only one swap disk per server and the size of the swap disk must be less than or equal to the swap size of the flavor. Changing this creates a new server.'
            block_device.source_type: required string →  The source type of the device. Must be one of "blank", "image", "volume", or "snapshot". Changing this creates a new server.
            block_device.uuid: optional string →  The UUID of the image, volume, or snapshot. Optional if source_type is set to "blank". Changing this creates a new server.
            block_device.volume_size: 'optional number →  The size of the volume to create (in gigabytes). Required in the following combinations: source=image and destination=volume, source=blank and destination=local, and source=blank and destination=volume. Changing this creates a new server.'
            block_device.volume_type: optional string →  The volume type that will be used. Changing this creates a new server.
            config_drive: optional boolean →  Whether to use the config_drive feature to configure the instance. Changing this creates a new server.
            content: required string →  The contents of the file. Limited to 255 bytes.
            detach_ports_before_destroy: optional boolean →  Whether to try to detach all attached ports to the vm before destroying it to make sure the port state is correct after the vm destruction. This is helpful when the port is not deleted.
            file: required string →  The absolute path of the destination file.
            fixed_ip_v4: optional string →  Specifies a fixed IPv4 address to be used on this network. Changing this creates a new server.
            flavor_id: optional string →  The flavor ID of the desired flavor for the server. Required if flavor_name is empty. Changing this resizes the existing server.
            flavor_name: optional string →  The name of the desired flavor for the server. Required if flavor_id is empty. Changing this resizes the existing server.
            force_delete: optional boolean →  Whether to force the compute instance to be forcefully deleted. This is useful for environments that have reclaim / soft deletion enabled.
            group: optional string →  A UUID of a Server Group. The instance will be placed into that group.
            id: string →  ID of the resource.
            ignore_resize_confirmation: optional boolean →  Boolean to control whether to ignore manual confirmation of the instance resizing.
            image_id: optional string →  The image ID of the desired image for the server. Required if image_name is empty and not booting from a volume. Do not specify if booting from a volume. Changing this creates a new server.
            image_name: optional string →  The name of the desired image for the server. Required if image_id is empty and not booting from a volume. Do not specify if booting from a volume. Changing this creates a new server.
            key_pair: optional string →  The name of a key pair to put on the server. The key pair must already be created and associated with the tenant's account. Changing this creates a new server.
            mac: string →  The MAC address of the NIC on that network.
            metadata: optional map of string →  Metadata key/value pairs to make available from within the instance. Changing this updates the existing server metadata.
            name: required string →  A unique name for the resource.
            network: optional →  An array of one or more networks to attach to the instance. The network object structure is documented below. Changing this creates a new server.
            network_mode: optional string →  Special string for network option to create the server. network_mode can be "auto" or "none". Please see the following reference for more information. Conflicts with network.
            personality: 'optional →  Customize the personality of an instance by defining one or more files and their contents. The personality structure is described below. Note: ''config_drive'' must be enabled.'
            port: 'optional string →  The port UUID of a network to attach to the server. Optional if uuid or name is provided. Changing this creates a new server. Note: If port is used, only its security groups will be applied instead of security_groups instance argument.'
            power_state: 'optional string →  Provide the VM state. Only ''active'' and ''shutoff'' are supported values. Note: If the initial power_state is the shutoff the VM will be stopped immediately after build and the provisioners like remote-exec or files are not supported.'
            region: optional string →  The region in which to create the server instance. If omitted, the region argument of the provider is used. Changing this creates a new server.
            scheduler_hints: optional →  Provide the Nova scheduler with hints on how the instance should be launched. The available hints are described below.
            security_groups: 'optional set of string →  An array of one or more security group names to associate with the server. Changing this results in adding/removing security groups from the existing server. Note: When attaching the instance to networks using Ports, place the security groups on the Port and not the instance. Note: Names should be used and not ids, as ids trigger unnecessary updates.'
            stop_before_destroy: optional boolean →  Whether to try stop instance gracefully before destroying it, thus giving chance for guest OS daemons to stop correctly. If instance doesn't stop within timeout, it will be destroyed anyway.
            tags: optional set of string →  A set of string tags for the instance. Changing this updates the existing instance tags.
            user_data: "optional string →  The user data to provide when launching the instance.\tChanging this creates a new server."
            uuid: optional string →  The network UUID to attach to the server. Optional if port or name is provided. Changing this creates a new server.
            vendor_options: optional →  Map of additional vendor-specific options. Supported options are described below.
            vkcs_compute_interface_attach: after the instance has been created. Please note that if the network block is not explicitly specified, it will be automatically created implicitly only if there is a single network configuration in the project. However, if there are multiple network configurations, the process will fail.
            vkcs_networking_router_interface: resource. This is crucial for the proper initialization of the instance in such scenarios.
        importStatements:
            - terraform import vkcs_compute_instance.basic_instance b61e8c9a-94ca-4852-9008-a95cdae6a2d9
    vkcs_compute_interface_attach:
        subCategory: Virtual Machines
        description: Attaches a Network Interface to an Instance.
        name: vkcs_compute_interface_attach
        title: vkcs_compute_interface_attach
        examples:
            - name: etcd
              manifest: |-
                {
                  "instance_id": "${vkcs_compute_instance.basic.id}",
                  "port_id": "${vkcs_networking_port.persistent_etcd.id}"
                }
              references:
                instance_id: vkcs_compute_instance.basic.id
                port_id: vkcs_networking_port.persistent_etcd.id
            - name: db
              manifest: |-
                {
                  "instance_id": "${vkcs_compute_instance.basic.id}",
                  "network_id": "${vkcs_networking_network.db.id}"
                }
              references:
                instance_id: vkcs_compute_instance.basic.id
                network_id: vkcs_networking_network.db.id
        argumentDocs: {}
        importStatements:
            - terraform import vkcs_compute_interface_attach.ai_1 89c60255-9bd6-460c-822a-e2b959ede9d2/45670584-225f-46c3-b33e-6707b589b666
    vkcs_compute_keypair:
        subCategory: Virtual Machines
        description: Manages a keypair resource within VKCS.
        name: vkcs_compute_keypair
        title: vkcs_compute_keypair
        examples:
            - name: existing-key
              manifest: |-
                {
                  "name": "existing-key-tf-example",
                  "public_key": "${file(\"${path.module}/public_key.key\")}"
                }
            - name: generated-key
              manifest: |-
                {
                  "name": "generated-key-tf-example"
                }
        argumentDocs:
            fingerprint: string →  The fingerprint of the public key.
            id: string →  ID of the resource.
            name: required string →  A unique name for the keypair. Changing this creates a new keypair.
            private_key: string →  The generated private key when no public key is specified.
            public_key: optional string →  A pregenerated OpenSSH-formatted public key. Changing this creates a new keypair. If a public key is not specified, then a public/private key pair will be automatically generated. If a pair is created, then destroying this resource means you will lose access to that keypair forever.
            region: optional string →  The region in which to obtain the Compute client. Keypairs are associated with accounts, but a Compute client is needed to create one. If omitted, the region argument of the provider is used. Changing this creates a new keypair.
            value_specs: optional map of string →  Map of additional options.
        importStatements:
            - terraform import vkcs_compute_keypair.my-keypair test-keypair
    vkcs_compute_servergroup:
        subCategory: Virtual Machines
        description: Manages a Server Group resource within VKCS.
        name: vkcs_compute_servergroup
        title: vkcs_compute_servergroup
        examples:
            - name: cusom_group
              manifest: |-
                {
                  "name": "custom-group-tf-example",
                  "policies": [
                    "anti-affinity"
                  ]
                }
        argumentDocs:
            affinity: '- All instances/servers launched in this group will be hosted on the same compute node.'
            anti-affinity: '- All instances/servers launched in this group will be hosted on different compute nodes.'
            id: string →  ID of the resource.
            members: string →  The instances that are part of this server group.
            name: required string →  A unique name for the server group. Changing this creates a new server group.
            policies: optional string →  The set of policies for the server group. All policies are mutually exclusive. See the Policies section for more information. Changing this creates a new server group.
            region: optional string →  The region in which to obtain the Compute client. If omitted, the region argument of the provider is used. Changing this creates a new server group.
            soft-affinity: '- All instances/servers launched in this group will be hosted on the same compute node if possible, but if not possible they still will be scheduled instead of failure.'
            soft-anti-affinity: '- All instances/servers launched in this group will be hosted on different compute nodes if possible, but if not possible they still will be scheduled instead of failure.'
            value_specs: optional map of string →  Map of additional options.
        importStatements:
            - terraform import vkcs_compute_servergroup.test-sg 1bc30ee9-9d5b-4c30-bdd5-7f1e663f5edf
    vkcs_compute_volume_attach:
        subCategory: Virtual Machines
        description: Attaches a Block Storage Volume to an Instance.
        name: vkcs_compute_volume_attach
        title: vkcs_compute_volume_attach
        examples:
            - name: data
              manifest: |-
                {
                  "instance_id": "${vkcs_compute_instance.basic.id}",
                  "volume_id": "${vkcs_blockstorage_volume.data.id}"
                }
              references:
                instance_id: vkcs_compute_instance.basic.id
                volume_id: vkcs_blockstorage_volume.data.id
            - name: attach_1
              manifest: |-
                {
                  "instance_id": "${vkcs_compute_instance.basic.id}",
                  "volume_id": "${vkcs_blockstorage_volume.volumes.0.id}"
                }
              references:
                instance_id: vkcs_compute_instance.basic.id
                volume_id: vkcs_blockstorage_volume.volumes.0.id
            - name: attach_2
              manifest: |-
                {
                  "depends_on": [
                    "${vkcs_compute_volume_attach.attach_1}"
                  ],
                  "instance_id": "${vkcs_compute_instance.basic.id}",
                  "volume_id": "${vkcs_blockstorage_volume.volumes.1.id}"
                }
              references:
                instance_id: vkcs_compute_instance.basic.id
                volume_id: vkcs_blockstorage_volume.volumes.1.id
        argumentDocs:
            id: string →  ID of the resource.
            instance_id: required string →  The ID of the Instance to attach the Volume to.
            region: optional string →  The region in which to obtain the Compute client. A Compute client is needed to create a volume attachment. If omitted, the region argument of the provider is used. Changing this creates a new volume attachment.
            volume_id: required string →  The ID of the Volume to attach to an Instance.
        importStatements:
            - terraform import vkcs_compute_volume_attach.va_1 89c60255-9bd6-460c-822a-e2b959ede9d2/45670584-225f-46c3-b33e-6707b589b666
    vkcs_db_backup:
        subCategory: Databases
        description: Manages a db backup.
        name: vkcs_db_backup
        title: vkcs_db_backup
        examples:
            - name: mysql-backup
              manifest: |-
                {
                  "dbms_id": "${vkcs_db_instance.mysql.id}",
                  "name": "mssql-backup"
                }
              references:
                dbms_id: vkcs_db_instance.mysql.id
        argumentDocs:
            container_prefix: 'optional string →  Prefix of S3 bucket ([prefix] - [project_id]) to store backup data. Default: databasebackups'
            created: string →  Backup creation timestamp
            datastore: list →  Object that represents datastore of backup
            dbms_id: required string →  ID of the instance or cluster, to create backup of.
            dbms_type: string →  Type of dbms for the backup, can be "instance" or "cluster".
            description: optional string →  The description of the backup
            id: string →  ID of the resource.
            location_ref: string →  Location of backup data on backup storage
            meta: string →  Metadata of the backup
            name: required string →  The name of the backup. Changing this creates a new backup
            region: optional string →  The region in which to obtain the service client. If omitted, the region argument of the provider is used.New since v0.4.0.
            size: number →  Backup's volume size
            type: string →  Version of the datastore. Changing this creates a new instance.
            updated: string →  Timestamp of backup's last update
            version: string →  Type of the datastore. Changing this creates a new instance.
            wal_size: number →  Backup's WAL volume size
        importStatements:
            - terraform import vkcs_db_backup.mybackup 67b86ce7-0924-48a6-8a18-683cfc6b4183
    vkcs_db_cluster:
        subCategory: Databases
        description: Manages a db cluster.
        name: vkcs_db_cluster
        title: vkcs_db_cluster
        examples:
            - name: pg-cluster
              manifest: |-
                {
                  "availability_zone": "GZ1",
                  "cloud_monitoring_enabled": true,
                  "cluster_size": 3,
                  "datastore": [
                    {
                      "type": "postgresql",
                      "version": "12"
                    }
                  ],
                  "depends_on": [
                    "${vkcs_networking_router_interface.db}"
                  ],
                  "flavor_id": "${data.vkcs_compute_flavor.basic.id}",
                  "name": "pg-cluster",
                  "network": [
                    {
                      "uuid": "${vkcs_networking_network.db.id}"
                    }
                  ],
                  "volume_size": 10,
                  "volume_type": "ceph-ssd"
                }
              references:
                flavor_id: data.vkcs_compute_flavor.basic.id
                network.uuid: vkcs_networking_network.db.id
            - name: mydb-cluster
              manifest: |-
                {
                  "cluster_size": 3,
                  "datastore": [
                    {
                      "type": "postgresql",
                      "version": "12"
                    }
                  ],
                  "flavor_id": "9e931469-1490-489e-88af-29a289681c53",
                  "name": "mydb-cluster",
                  "network": [
                    {
                      "uuid": "3ee9b184-3311-4d85-840b-7a9c48e7beac"
                    }
                  ],
                  "restore_point": [
                    {
                      "backup_id": "backup_id"
                    }
                  ],
                  "volume_size": 10,
                  "volume_type": "MS1"
                }
            - name: mydb-cluster
              manifest: |-
                {
                  "backup_schedule": [
                    {
                      "interval_hours": 3,
                      "keep_count": 3,
                      "name": "${three_hours_backup}",
                      "start_hours": 16,
                      "start_minutes": 20
                    }
                  ],
                  "cluster_size": 3,
                  "datastore": [
                    {
                      "type": "postgresql",
                      "version": "12"
                    }
                  ],
                  "flavor_id": "9e931469-1490-489e-88af-29a289681c53",
                  "name": "mydb-cluster",
                  "network": [
                    {
                      "uuid": "3ee9b184-3311-4d85-840b-7a9c48e7beac"
                    }
                  ],
                  "volume_size": 10,
                  "volume_type": "MS1"
                }
              references:
                backup_schedule.name: three_hours_backup
        argumentDocs:
            autoexpand: optional boolean →  Indicates whether autoresize is enabled.
            availability_zone: optional string →  The name of the availability zone of the cluster. Changing this creates a new cluster.
            backup_id: required string →  ID of the backup.
            backup_schedule: optional →  Object that represents configuration of PITR backup. This functionality is available only for postgres datastore.New since v0.1.4.
            capabilities: optional →  Object that represents capability applied to cluster. There can be several instances of this object.
            cloud_monitoring_enabled: optional boolean →  Enable cloud monitoring for the cluster. Changing this for Redis or MongoDB creates a new instance.New since v0.2.0.
            cluster_size: required number →  The number of instances in the cluster.
            configuration_id: optional string →  The id of the configuration attached to cluster.
            datastore: required →  Object that represents datastore of the cluster. Changing this creates a new cluster.
            disk_autoexpand: optional →  Object that represents autoresize properties of the cluster.
            flavor_id: required string →  The ID of flavor for the cluster.
            floating_ip_enabled: optional boolean →  Indicates whether floating ip is created for cluster. Changing this creates a new cluster.
            id: string →  ID of the resource.
            instances: object →  Cluster instances info.
            interval_hours: 'required number →  Time interval between backups, specified in hours. Available values: 3, 6, 8, 12, 24.'
            keep_count: required number →  Number of backups to be stored.
            keypair: optional string →  Name of the keypair to be attached to cluster. Changing this creates a new cluster.
            loadbalancer_id: string →  The id of the loadbalancer attached to the cluster.New since v0.1.15.
            max_disk_size: optional number →  Maximum disk size for autoresize.
            name: required string →  The name of the cluster. Changing this creates a new cluster.
            network: optional →  Object that represents network of the cluster. Changing this creates a new cluster.
            port: optional deprecated string →  The port id of the network. Changing this creates a new cluster. Deprecated This argument is deprecated, please do not use it.
            region: optional string →  Region to create resource in.
            restart_confirmed: optional boolean →  Boolean to confirm autorestart of the cluster's instances if it is required to apply configuration group changes.
            restore_point: optional →  Object that represents backup to restore cluster from.New since v0.1.4.
            root_enabled: optional boolean →  Indicates whether root user is enabled for the cluster.
            root_password: optional sensitive string →  Password for the root user of the cluster. When enabling root, password is autogenerated, use this field to obtain it.
            security_groups: optional set of string →  An array of one or more security group IDs to associate with the cluster instances. Changing this creates a new cluster.New since v0.2.0.
            settings: optional map of string →  Map of key-value settings of the capability.
            shrink_options: optional string →  Used only for shrinking cluster. List of IDs of instances that should remain after shrink. If no options are supplied, shrink operation will choose first non-leader instance to delete.
            size: required number →  Size of the instance wal volume.
            start_hours: required number →  Hours part of timestamp of initial backup.
            start_minutes: required number →  Minutes part of timestamp of initial backup.
            subnet_id: optional string →  The id of the subnet. Changing this creates a new cluster.New since v0.1.15.
            target: optional string →  Used only for restoring from PITR backups. Timestamp of needed backup in format "2021-10-06 01:02:00". You can specify "latest" to use most recent backup.
            type: 'required string →  Type of the datastore. Changing this creates a new cluster. Must be one of: galera_mysql, postgresql, tarantool, postgrespro_enterprise, postgrespro_enterprise_1c'
            uuid: 'optional string →  The id of the network. Changing this creates a new cluster. Note: Although this argument is marked as optional, it is actually required at the moment. Not setting a value for it may cause an error.'
            vendor_options: optional →  Map of additional vendor-specific options. Supported options are described below.New since v0.4.0.
            version: required string →  Version of the datastore. Changing this creates a new cluster.
            volume_size: required number →  Size of the cluster instance volume.
            volume_type: required string →  The type of the cluster instance volume. Changing this creates a new cluster.
            wal_disk_autoexpand: optional →  Object that represents autoresize properties of wal volume of the cluster.
            wal_volume: optional →  Object that represents wal volume of the cluster. Changing this creates a new cluster.
        importStatements:
            - terraform import vkcs_db_cluster.mycluster 708a74a1-6b00-4a96-938c-28a8a6d98590
    vkcs_db_cluster_with_shards:
        subCategory: Databases
        description: Manages a db cluster with shards.
        name: vkcs_db_cluster_with_shards
        title: vkcs_db_cluster_with_shards
        examples:
            - name: clickhouse-cluster
              manifest: |-
                {
                  "cloud_monitoring_enabled": true,
                  "datastore": [
                    {
                      "type": "clickhouse",
                      "version": "20.8"
                    }
                  ],
                  "depends_on": [
                    "${vkcs_networking_router_interface.db}",
                    "${vkcs_networking_secgroup.admin}"
                  ],
                  "name": "clickhouse-cluster-with-shards",
                  "shard": [
                    {
                      "availability_zone": "GZ1",
                      "flavor_id": "${data.vkcs_compute_flavor.basic.id}",
                      "network": [
                        {
                          "security_groups": [
                            "${vkcs_networking_secgroup.admin.id}"
                          ],
                          "uuid": "${vkcs_networking_network.db.id}"
                        }
                      ],
                      "shard_id": "shard0",
                      "size": 1,
                      "volume_size": 8,
                      "volume_type": "ceph-ssd"
                    },
                    {
                      "availability_zone": "GZ1",
                      "flavor_id": "${data.vkcs_compute_flavor.basic.id}",
                      "network": [
                        {
                          "security_groups": [
                            "${vkcs_networking_secgroup.admin.id}"
                          ],
                          "uuid": "${vkcs_networking_network.db.id}"
                        }
                      ],
                      "shard_id": "shard1",
                      "size": 1,
                      "volume_size": 8,
                      "volume_type": "ceph-ssd"
                    }
                  ]
                }
              references:
                shard.flavor_id: data.vkcs_compute_flavor.basic.id
                shard.network.uuid: vkcs_networking_network.db.id
            - name: db-cluster-with-shards
              manifest: |-
                {
                  "datastore": [
                    {
                      "type": "clickhouse",
                      "version": "20.8"
                    }
                  ],
                  "name": "db-cluster-with-shards",
                  "shard": [
                    {
                      "flavor_id": "9e931469-1490-489e-88af-29a289681c53",
                      "network": [
                        {
                          "uuid": "3ee9b184-3311-4d85-840b-7a9c48e7beac"
                        }
                      ],
                      "shard_id": "shard0",
                      "size": 2,
                      "volume_size": 10,
                      "volume_type": "ceph-ssd"
                    },
                    {
                      "flavor_id": "9e931469-1490-489e-88af-29a289681c53",
                      "network": [
                        {
                          "uuid": "3ee9b184-3311-4d85-840b-7a9c48e7beac"
                        }
                      ],
                      "restore_point": [
                        {
                          "backup_id": "7c8110f3-6f7f-4dc3-85c2-16feef9ddc2b"
                        }
                      ],
                      "shard_id": "shard1",
                      "size": 2,
                      "volume_size": 10,
                      "volume_type": "ceph-ssd"
                    }
                  ]
                }
        argumentDocs:
            autoexpand: optional boolean →  Indicates whether autoresize is enabled.
            availability_zone: optional string →  The name of the availability zone of the cluster shard. Changing this creates a new cluster.
            backup_id: required string →  ID of the backup.
            capabilities: optional →  Object that represents capability applied to cluster. There can be several instances of this object.
            cloud_monitoring_enabled: optional boolean →  Enable cloud monitoring for the cluster. Changing this for Redis or MongoDB creates a new instance.New since v0.2.0.
            configuration_id: optional string →  The id of the configuration attached to cluster.
            datastore: required →  Object that represents datastore of the cluster. Changing this creates a new cluster.
            disk_autoexpand: optional →  Object that represents autoresize properties of the cluster.
            flavor_id: required string →  The ID of flavor for the cluster shard.
            floating_ip_enabled: optional boolean →  Boolean field that indicates whether floating ip is created for cluster. Changing this creates a new cluster.
            id: string →  ID of the resource.
            instances: object →  Shard instances info.New since v0.1.15.
            keypair: optional string →  Name of the keypair to be attached to cluster. Changing this creates a new cluster.
            max_disk_size: optional number →  Maximum disk size for autoresize.
            name: required string →  The name of the cluster. Changing this creates a new cluster.
            network: optional
            port: optional deprecated string →  The port id of the network. Changing this creates a new cluster. Deprecated This argument is deprecated, please do not use it.
            region: optional string →  Region to create resource in.
            restart_confirmed: optional boolean →  Boolean to confirm autorestart of the cluster's instances if it is required to apply configuration group changes.
            restore_point: optional →  Object that represents backup to restore instance from.New since v0.1.4.
            root_enabled: optional boolean →  Indicates whether root user is enabled for the cluster.
            root_password: optional sensitive string →  Password for the root user of the cluster. When enabling root, password is autogenerated, use this field to obtain it.
            security_groups: optional set of string →  An array of one or more security group IDs to associate with the shard instances. Changing this creates a new cluster.New since v0.2.0.
            settings: optional map of string →  Map of key-value settings of the capability.
            shard: required →  Object that represents cluster shard. There can be several instances of this object.
            shard_id: required string →  The ID of the shard. Changing this creates a new cluster.
            shrink_options: optional string →  Used only for shrinking cluster. List of IDs of instances that should remain after shrink. If no options are supplied, shrink operation will choose first non-leader instance to delete.
            size: required number →  The number of instances in the cluster shard.
            subnet_id: optional string →  The id of the subnet. Changing this creates a new cluster.New since v0.1.15.
            type: 'required string →  Type of the datastore. Changing this creates a new cluster. Must be one of: clickhouse'
            uuid: 'optional string →  The id of the network. Changing this creates a new cluster. Note: Although this argument is marked as optional, it is actually required at the moment. Not setting a value for it may cause an error.'
            vendor_options: optional →  Map of additional vendor-specific options. Supported options are described below.New since v0.4.0.
            version: required string →  Version of the datastore. Changing this creates a new cluster.
            volume_size: required number →  Size of the cluster shard instance volume.
            volume_type: required string →  The type of the cluster shard instance volume.
            wal_disk_autoexpand: optional →  Object that represents autoresize properties of wal volume of the cluster.
            wal_volume: optional →  Object that represents wal volume of the cluster.
        importStatements:
            - terraform import vkcs_db_cluster_with_shards.mycluster 708a74a1-6b00-4a96-938c-28a8a6d98590
    vkcs_db_config_group:
        subCategory: Databases
        description: Manages a db config group.
        name: vkcs_db_config_group
        title: vkcs_db_config_group
        examples:
            - name: mysql-80
              manifest: |-
                {
                  "datastore": [
                    {
                      "type": "mysql",
                      "version": "8.0"
                    }
                  ],
                  "description": "db-config-group-description",
                  "name": "db-config-group",
                  "values": {
                    "activate_all_roles_on_login": "true",
                    "autocommit": "1",
                    "block_encryption_mode": "test",
                    "innodb_segment_reserve_factor": "0.53"
                  }
                }
        argumentDocs:
            created: string →  Timestamp of config group's creation
            datastore: required →  Object that represents datastore of the config group. Changing this creates a new config group.
            description: optional string →  The description of the config group.
            id: string →  ID of the resource.
            name: required string →  The name of the config group.
            type: required string →  Type of the datastore.
            updated: string →  Timestamp of config group's last update
            values: 'required map of string →  Map of configuration parameters in format "key": "value".'
            version: required string →  Version of the datastore.
        importStatements:
            - terraform import vkcs_db_config_group.myconfiggroup d3d6f037-84f6-44f7-a9f4-ac4b40d67859
    vkcs_db_database:
        subCategory: Databases
        description: Manages a db database.
        name: vkcs_db_database
        title: vkcs_db_database
        examples:
            - name: mysql-db
              manifest: |-
                {
                  "charset": "utf8",
                  "collate": "utf8_general_ci",
                  "dbms_id": "${vkcs_db_instance.mysql.id}",
                  "name": "testdb"
                }
              references:
                dbms_id: vkcs_db_instance.mysql.id
        argumentDocs:
            charset: optional string →  Type of charset used for the database. Changing this creates a new database.
            collate: optional string →  Collate option of the database.  Changing this creates a new database.
            dbms_id: required string →  ID of the instance or cluster that database is created for.
            dbms_type: string →  Type of dbms for the database, can be "instance" or "cluster".
            force_deletion: optional boolean →  Whether to try to force delete the database. Some datastores restricts regular database deletion in some circumstances but provides force deletion for that cases.
            id: string →  ID of the resource.
            name: required string →  The name of the database. Changing this creates a new database.
            vendor_options: optional →  New since v0.5.5.
        importStatements:
            - terraform import vkcs_db_database.mydb 67691f3e-a4d1-443e-b1e9-717f505cc458/mydbname
    vkcs_db_instance:
        subCategory: Databases
        description: Manages a db instance.
        name: vkcs_db_instance
        title: vkcs_db_instance
        examples:
            - name: mysql
              manifest: |-
                {
                  "availability_zone": "GZ1",
                  "capabilities": [
                    {
                      "name": "node_exporter",
                      "settings": {
                        "listen_port": "9100"
                      }
                    }
                  ],
                  "cloud_monitoring_enabled": true,
                  "configuration_id": "${vkcs_db_config_group.mysql-80.id}",
                  "datastore": [
                    {
                      "type": "mysql",
                      "version": "8.0"
                    }
                  ],
                  "depends_on": [
                    "${vkcs_networking_router_interface.db}"
                  ],
                  "disk_autoexpand": [
                    {
                      "autoexpand": true,
                      "max_disk_size": 1000
                    }
                  ],
                  "flavor_id": "${data.vkcs_compute_flavor.basic.id}",
                  "name": "basic-tf-example",
                  "network": [
                    {
                      "security_groups": [
                        "${vkcs_networking_secgroup.admin.id}"
                      ],
                      "uuid": "${vkcs_networking_network.db.id}"
                    }
                  ],
                  "size": 8,
                  "volume_type": "ceph-ssd"
                }
              references:
                configuration_id: vkcs_db_config_group.mysql-80.id
                flavor_id: data.vkcs_compute_flavor.basic.id
                network.uuid: vkcs_networking_network.db.id
            - name: db-instance
              manifest: |-
                {
                  "availability_zone": "MS1",
                  "capabilities": [
                    {
                      "name": "node_exporter"
                    },
                    {
                      "name": "postgres_extensions"
                    }
                  ],
                  "datastore": [
                    {
                      "type": "postgresql",
                      "version": "13"
                    }
                  ],
                  "disk_autoexpand": [
                    {
                      "autoexpand": true,
                      "max_disk_size": 1000
                    }
                  ],
                  "flavor_id": "9e931469-1490-489e-88af-29a289681c53",
                  "floating_ip_enabled": true,
                  "name": "db-instance",
                  "network": [
                    {
                      "uuid": "3ee9b184-3311-4d85-840b-7a9c48e7beac"
                    }
                  ],
                  "restore_point": [
                    {
                      "backup_id": "backup_id"
                    }
                  ],
                  "size": 8,
                  "volume_type": "MS1"
                }
            - name: db-instance
              manifest: |-
                {
                  "availability_zone": "MS1",
                  "backup_schedule": [
                    {
                      "interval_hours": 3,
                      "keep_count": 3,
                      "name": "${three_hours_backup}",
                      "start_hours": 16,
                      "start_minutes": 20
                    }
                  ],
                  "capabilities": [
                    {
                      "name": "node_exporter"
                    },
                    {
                      "name": "postgres_extensions"
                    }
                  ],
                  "datastore": [
                    {
                      "type": "postgresql",
                      "version": "13"
                    }
                  ],
                  "disk_autoexpand": [
                    {
                      "autoexpand": true,
                      "max_disk_size": 1000
                    }
                  ],
                  "flavor_id": "9e931469-1490-489e-88af-29a289681c53",
                  "floating_ip_enabled": true,
                  "name": "db-instance",
                  "network": [
                    {
                      "uuid": "3ee9b184-3311-4d85-840b-7a9c48e7beac"
                    }
                  ],
                  "size": 8,
                  "volume_type": "MS1"
                }
              references:
                backup_schedule.name: three_hours_backup
        argumentDocs:
            autoexpand: optional boolean →  Indicates whether autoresize is enabled.
            availability_zone: optional string →  The name of the availability zone of the instance. Changing this creates a new instance.
            backup_id: required string →  ID of the backup.
            backup_schedule: optional →  Object that represents configuration of PITR backup. This functionality is available only for postgres datastore.New since v0.1.4.
            capabilities: optional →  Object that represents capability applied to instance. There can be several instances of this object (see example).
            cloud_monitoring_enabled: optional boolean →  Enable cloud monitoring for the instance. Changing this for Redis or MongoDB creates a new instance.New since v0.2.0.
            configuration_id: optional string →  The id of the configuration attached to instance.
            datastore: required →  Object that represents datastore of the instance. Changing this creates a new instance.
            disk_autoexpand: optional →  Object that represents autoresize properties of the instance.
            fixed_ip_v4: 'optional string →  The IPv4 address. Changing this creates a new instance. Note: This argument conflicts with "replica_of". Setting both at the same time causes "fixed_ip_v4" to be ignored.'
            flavor_id: required string →  The ID of flavor for the instance.
            floating_ip_enabled: optional boolean →  Indicates whether floating ip is created for instance. Changing this creates a new instance.
            id: string →  ID of the resource.
            interval_hours: 'required number →  Time interval between backups, specified in hours. Available values: 3, 6, 8, 12, 24.'
            ip: string →  IP address of the instance.
            keep_count: required number →  Number of backups to be stored.
            keypair: optional string →  Name of the keypair to be attached to instance. Changing this creates a new instance.
            max_disk_size: optional number →  Maximum disk size for autoresize.
            name: required string →  The name of the instance. Changing this creates a new instance
            network: optional →  Object that represents network of the instance. Changing this creates a new instance.
            port: optional deprecated string →  The port id of the network. Changing this creates a new instance. Deprecated This argument is deprecated, please do not use it.
            region: optional string →  Region to create resource in.
            replica_of: 'optional string →  ID of the instance, that current instance is replica of. Instance''s datastore must be one of: postgrespro_enterprise, mysql, postgresql, postgrespro_enterprise_1c'
            restart_confirmed: optional boolean →  Boolean to confirm autorestart of the instance if it is required to apply configuration group changes.
            restore_point: optional →  Object that represents backup to restore instance from.New since v0.1.4.
            root_enabled: optional boolean →  Indicates whether root user is enabled for the instance.
            root_password: optional sensitive string →  Password for the root user of the instance. If this field is empty and root user is enabled, then after creation of the instance this field will contain auto-generated root user password.
            security_groups: optional set of string →  An array of one or more security group IDs to associate with the instance. Changing this creates a new instance.New since v0.2.0.
            settings: optional map of string →  Map of key-value settings of the capability.
            size: required number →  Size of the instance volume.
            start_hours: required number →  Hours part of timestamp of initial backup.
            start_minutes: required number →  Minutes part of timestamp of initial backup.
            subnet_id: optional string →  The id of the subnet. Changing this creates a new instance.New since v0.1.15.
            target: optional string →  Used only for restoring from postgresql PITR backups. Timestamp of needed backup in format "2021-10-06 01:02:00". You can specify "latest" to use most recent backup.
            type: required string →  Type of the datastore. Changing this creates a new instance.
            uuid: 'optional string →  The id of the network. Changing this creates a new instance. Note: Although this argument is marked as optional, it is actually required at the moment. Not setting a value for it may cause an error.'
            vendor_options: optional →  Map of additional vendor-specific options. Supported options are described below.New since v0.4.0.
            version: required string →  Version of the datastore. Changing this creates a new instance.
            volume_type: required string →  The type of the instance volume. Changing this creates a new instance.
            wal_disk_autoexpand: optional →  Object that represents autoresize properties of the instance wal volume.
            wal_volume: optional →  Object that represents wal volume of the instance. Changing this creates a new instance.
        importStatements:
            - terraform import vkcs_db_instance.myinstance 708a74a1-6b00-4a96-938c-28a8a6d98590
    vkcs_db_user:
        subCategory: Databases
        description: Manages a db user.
        name: vkcs_db_user
        title: vkcs_db_user
        examples:
            - name: mysql-user
              manifest: |-
                {
                  "databases": [
                    "${vkcs_db_database.mysql-db.name}"
                  ],
                  "dbms_id": "${vkcs_db_instance.mysql.id}",
                  "name": "testuser",
                  "password": "Test_p@ssword-12-3"
                }
              references:
                dbms_id: vkcs_db_instance.mysql.id
        argumentDocs:
            databases: optional string →  List of names of the databases, that user is created for.
            dbms_id: required string →  ID of the instance or cluster that user is created for.
            dbms_type: string →  Type of dbms for the user, can be "instance" or "cluster".
            host: optional string →  IP address of the host that user will be accessible from.
            id: string →  ID of the resource.
            name: required string →  The name of the user. Changing this creates a new user.
            password: required sensitive string →  The password of the user.
            skip_deletion: optional boolean →  Boolean to control whether to user deletion should be skipped. If set to true, the resource will be removed from the state, but the remote object will not be deleted. This is useful for PostgreSQL, where users cannot be deleted from the API if they own database objects.
            vendor_options: optional →  New since v0.5.3.
        importStatements:
            - terraform import vkcs_db_user.myuser b29f9249-b0e0-43f2-9278-34ed8284a4dc/myusername
    vkcs_dc_bgp_instance:
        subCategory: Direct Connect
        description: Manages a direct connect BGP instance resource within VKCS.
        name: vkcs_dc_bgp_instance
        title: vkcs_dc_bgp_instance
        examples:
            - name: dc_bgp_instance
              manifest: |-
                {
                  "asn": 12345,
                  "bgp_router_id": "192.168.1.2",
                  "dc_router_id": "${vkcs_dc_router.dc_router.id}",
                  "description": "tf-example-description",
                  "ecmp_enabled": true,
                  "graceful_restart": true,
                  "name": "tf-example"
                }
              references:
                dc_router_id: vkcs_dc_router.dc_router.id
        argumentDocs:
            asn: required number →  BGP Autonomous System Number (integer representation supports only). Changing this creates a new resource
            bgp_router_id: required string →  BGP Router ID (IP address that represent BGP router in BGP network). Changing this creates a new resource
            created_at: string →  Creation timestamp
            dc_router_id: required string →  Direct Connect Router ID to attach. Changing this creates a new resource
            description: optional string →  Description of the router
            ecmp_enabled: optional boolean →  Enable BGP ECMP behaviour on router. Default is false
            enabled: optional boolean →  Enable or disable item. Default is true
            graceful_restart: optional boolean →  Enable BGP Graceful Restart feature. Default is false
            id: string →  ID of the resource
            long_lived_graceful_restart: optional boolean →  Enable BGP Long Lived Graceful Restart feature. Default is false
            name: optional string →  Name of the router
            region: optional string →  The region to fetch availability zones from, defaults to the provider's region.
            updated_at: string →  Update timestamp
        importStatements:
            - terraform import vkcs_dc_bgp_instance.mydcbgpinstance e73496b2-e476-4536-9167-af24d18e1486
    vkcs_dc_bgp_neighbor:
        subCategory: Direct Connect
        description: Manages a direct connect BGP neighbor resource within VKCS.
        name: vkcs_dc_bgp_neighbor
        title: vkcs_dc_bgp_neighbor
        examples:
            - name: dc_bgp_neighbor
              manifest: |-
                {
                  "add_paths": "on",
                  "dc_bgp_id": "${vkcs_dc_bgp_instance.dc_bgp_instance.id}",
                  "description": "tf-example-description",
                  "name": "tf-example",
                  "remote_asn": 1,
                  "remote_ip": "192.168.1.3"
                }
              references:
                dc_bgp_id: vkcs_dc_bgp_instance.dc_bgp_instance.id
        argumentDocs:
            add_paths: optional string →  Activate BGP Add-Paths feature on peer. Default is off
            bfd_enabled: optional boolean →  Control BGP session activity with BFD protocol. Default is false
            created_at: string →  Creation timestamp
            dc_bgp_id: required string →  Direct Connect BGP ID to attach. Changing this creates a new resource
            description: optional string →  Description of the BGP neighbor
            enabled: optional boolean →  Enable or disable item. Default is true
            filter_in: optional string →  Input filter that pass incoming BGP prefixes (allow any)
            filter_out: optional string →  Output filter that pass incoming BGP prefixes (allow any)
            force_ibgp_next_hop_self: optional boolean →  Force set IP address of next-hop on BGP prefix to self even in iBGP. Default is false
            id: string →  ID of the resource
            name: optional string →  Name of the BGP neighbor
            region: optional string →  The region to fetch availability zones from, defaults to the provider's region.
            remote_asn: required number →  BGP Neighbor ASN. Changing this creates a new resource
            remote_ip: required string →  BGP Neighbor IP address. Changing this creates a new resource
            updated_at: string →  Update timestamp
        importStatements:
            - terraform import vkcs_dc_bgp_neighbor.mydcbgpneighbor 73096185-f200-4790-8095-962617b755f8
    vkcs_dc_bgp_static_announce:
        subCategory: Direct Connect
        description: Manages a direct connect BGP static announce resource within VKCS.
        name: vkcs_dc_bgp_static_announce
        title: vkcs_dc_bgp_static_announce
        examples:
            - name: dc_bgp_static_announce
              manifest: |-
                {
                  "dc_bgp_id": "${vkcs_dc_bgp_instance.dc_bgp_instance.id}",
                  "description": "tf-example-description",
                  "gateway": "192.168.1.3",
                  "name": "tf-example",
                  "network": "192.168.1.0/24"
                }
              references:
                dc_bgp_id: vkcs_dc_bgp_instance.dc_bgp_instance.id
        argumentDocs:
            created_at: string →  Creation timestamp
            dc_bgp_id: required string →  Direct Connect BGP ID to attach. Changing this creates a new resource
            description: optional string →  Description of the BGP neighbor
            enabled: optional boolean →  Enable or disable item. Default is true
            gateway: required string →  IP address of gateway. Changing this creates a new resource
            id: string →  ID of the resource
            name: optional string →  Name of the BGP neighbor
            network: required string →  Subnet in CIDR notation. Changing this creates a new resource
            region: optional string →  The region to fetch availability zones from, defaults to the provider's region.
            updated_at: string →  Update timestamp
        importStatements:
            - terraform import vkcs_dc_bgp_static_announce.mydcbgpstaticannounce 8a1d9812-305b-468f-8ae5-833e181b01a8
    vkcs_dc_interface:
        subCategory: Direct Connect
        description: Manages a direct connect interface resource within VKCS.
        name: vkcs_dc_interface
        title: vkcs_dc_interface
        examples:
            - name: dc_interface
              manifest: |-
                {
                  "dc_router_id": "${vkcs_dc_router.dc_router.id}",
                  "description": "tf-example-description",
                  "name": "tf-example",
                  "network_id": "${vkcs_networking_network.app.id}",
                  "subnet_id": "${vkcs_networking_subnet.app.id}"
                }
              references:
                dc_router_id: vkcs_dc_router.dc_router.id
                network_id: vkcs_networking_network.app.id
                subnet_id: vkcs_networking_subnet.app.id
        argumentDocs:
            bgp_announce_enabled: optional boolean →  Enable BGP announce of subnet attached to interface. Default is true
            created_at: string →  Creation timestamp
            dc_router_id: required string →  Direct Connect Router ID to attach. Changing this creates a new resource
            description: optional string →  Description of the interface
            id: string →  ID of the resource
            ip_address: optional string →  IP Address of the interface. Changing this creates a new resource
            ip_netmask: number →  IP Netmask
            mac_address: string →  MAC Address of created interface
            mtu: number →  MTU
            name: optional string →  Name of the interface
            network_id: required string →  Network ID to attach. Changing this creates a new resource
            port_id: string →  Port ID
            region: optional string →  The region to fetch availability zones from, defaults to the provider's region.
            sdn: string →  SDN where interface was created
            subnet_id: optional string →  Subnet ID to attach. Changing this creates a new resource
            updated_at: string →  Update timestamp
        importStatements:
            - terraform import vkcs_dc_interface.mydcinterface 438d7479-d95f-4afc-b85e-eb8cd130a99f
    vkcs_dc_router:
        subCategory: Direct Connect
        description: Manages a direct connect router resource within VKCS.
        name: vkcs_dc_router
        title: vkcs_dc_router
        examples:
            - name: dc_router
              manifest: |-
                {
                  "availability_zone": "GZ1",
                  "description": "tf-example-description",
                  "flavor": "standard",
                  "name": "tf-example"
                }
        argumentDocs:
            availability_zone: optional string →  The availability zone in which to create the router. Changing this creates a new router
            created_at: string →  Creation timestamp
            description: optional string →  Description of the router
            flavor: 'optional string →  Flavor of the router. Possible values can be obtained with vkcs_dc_api_options data source. Changing this creates a new router. Note: Not to be confused with compute service flavors.'
            id: string →  ID of the resource
            name: optional string →  Name of the router
            region: optional string →  The region to fetch availability zones from, defaults to the provider's region.
            updated_at: string →  Update timestamp
        importStatements:
            - terraform import vkcs_dc_router.mydcrouter b50b32fc-16e2-4cb0-acdb-638c865c4242
    vkcs_dc_static_route:
        subCategory: Direct Connect
        description: Manages a direct connect static route resource within VKCS.
        name: vkcs_dc_static_route
        title: vkcs_dc_static_route
        examples:
            - name: dc_static_route
              manifest: |-
                {
                  "dc_router_id": "${vkcs_dc_router.dc_router.id}",
                  "description": "tf-example-description",
                  "gateway": "192.168.1.3",
                  "metric": 1,
                  "name": "tf-example",
                  "network": "192.168.1.0/24"
                }
              references:
                dc_router_id: vkcs_dc_router.dc_router.id
        argumentDocs:
            created_at: string →  Creation timestamp
            dc_router_id: required string →  Direct Connect Router ID to attach. Changing this creates a new resource
            description: optional string →  Description of the static route
            gateway: required string →  IP address of gateway. Changing this creates a new resource
            id: string →  ID of the resource
            metric: optional number →  Metric to use for route. Default is 1
            name: optional string →  Name of the static route
            network: required string →  Subnet in CIDR notation. Changing this creates a new resource
            region: optional string →  The region to fetch availability zones from, defaults to the provider's region.
            updated_at: string →  Update timestamp
        importStatements:
            - terraform import vkcs_dc_static_route.mydcstaticroute 2ee73dd1-d52a-4c3f-9041-c60900c154a4
    vkcs_dc_vrrp:
        subCategory: Direct Connect
        description: Manages a direct connect VRRP resource within VKCS.
        name: vkcs_dc_vrrp
        title: vkcs_dc_vrrp
        examples:
            - name: dc_vrrp
              manifest: |-
                {
                  "advert_interval": 1,
                  "description": "tf-example-description",
                  "group_id": 100,
                  "name": "tf-example",
                  "network_id": "${vkcs_networking_network.app.id}",
                  "subnet_id": "${vkcs_networking_subnet.app.id}"
                }
              references:
                network_id: vkcs_networking_network.app.id
                subnet_id: vkcs_networking_subnet.app.id
        argumentDocs:
            advert_interval: optional number →  VRRP Advertise interval. Default is 1
            created_at: string →  Creation timestamp
            description: optional string →  Description of the VRRP
            enabled: optional boolean →  Enable or disable item. Default is true
            group_id: required number →  VRRP Group ID
            id: string →  ID of the resource
            name: optional string →  Name of the VRRP
            network_id: required string →  Network ID to attach. Changing this creates a new resource
            region: optional string →  The region to fetch availability zones from, defaults to the provider's region.
            sdn: string →  SDN of created VRRP
            subnet_id: optional string →  Subnet ID to attach. Changing this creates a new resource
            updated_at: string →  Update timestamp
        importStatements:
            - terraform import vkcs_dc_vrrp.mydcvrrp f6149e79-b441-4327-90fc-7653acbc204c
    vkcs_dc_vrrp_address:
        subCategory: Direct Connect
        description: Manages a direct connect VRRP address resource within VKCS.
        name: vkcs_dc_vrrp_address
        title: vkcs_dc_vrrp_address
        examples:
            - name: dc_vrrp_address
              manifest: |-
                {
                  "dc_vrrp_id": "${vkcs_dc_vrrp.dc_vrrp.id}",
                  "description": "tf-example-description",
                  "ip_address": "192.168.199.42",
                  "name": "tf-example"
                }
              references:
                dc_vrrp_id: vkcs_dc_vrrp.dc_vrrp.id
        argumentDocs:
            created_at: string →  Creation timestamp
            dc_vrrp_id: required string →  VRRP ID to attach. Changing this creates a new resource
            description: optional string →  Description of the VRRP
            id: string →  ID of the resource
            ip_address: optional string →  IP address to assign. Changing this creates a new resource
            name: optional string →  Name of the VRRP
            port_id: string →  Port ID used to assign IP address
            region: optional string →  The region to fetch availability zones from, defaults to the provider's region.
            updated_at: string →  Update timestamp
        importStatements:
            - terraform import vkcs_dc_vrrp_address.mydcvrrpaddress aa00d2a9-db9c-4976-898b-fcabb9f49505
    vkcs_dc_vrrp_interface:
        subCategory: Direct Connect
        description: Manages a direct connect VRRP interface resource within VKCS.
        name: vkcs_dc_vrrp_interface
        title: vkcs_dc_vrrp_interface
        examples:
            - name: dc_vrrp_interface
              manifest: |-
                {
                  "dc_interface_id": "${vkcs_dc_interface.dc_interface.id}",
                  "dc_vrrp_id": "${vkcs_dc_vrrp.dc_vrrp.id}",
                  "description": "tf-example-description",
                  "master": true,
                  "name": "tf-example",
                  "preempt": true,
                  "priority": 100
                }
              references:
                dc_interface_id: vkcs_dc_interface.dc_interface.id
                dc_vrrp_id: vkcs_dc_vrrp.dc_vrrp.id
        argumentDocs:
            created_at: string →  Creation timestamp
            dc_interface_id: required string →  DC Interface ID to attach. Changing this creates a new resource
            dc_vrrp_id: required string →  VRRP ID to attach. Changing this creates a new resource
            description: optional string →  Description of the VRRP
            id: string →  ID of the resource
            master: optional boolean →  Start VRRP instance on interface as VRRP Master. Default is false
            name: optional string →  Name of the VRRP
            preempt: optional boolean →  VRRP interface preempt behavior. Default is true
            priority: optional number →  VRRP interface priority. Default is 100
            region: optional string →  The region to fetch availability zones from, defaults to the provider's region.
            updated_at: string →  Update timestamp
        importStatements:
            - terraform import vkcs_dc_vrrp_interface.mydcvrrpinterface 3f071a6d-3d21-435c-83f7-11b276f318f0
    vkcs_images_image:
        subCategory: Images
        description: Manages an Image resource within VKCS.
        name: vkcs_images_image
        title: vkcs_images_image
        examples:
            - name: eurolinux9
              manifest: |-
                {
                  "compression_format": "xz",
                  "container_format": "bare",
                  "disk_format": "raw",
                  "image_source_url": "https://fbi.cdn.euro-linux.com/images/EL-9-cloudgeneric-2023-03-19.raw.xz",
                  "min_disk_gb": 10,
                  "min_ram_mb": 1536,
                  "name": "eurolinux9-tf-example",
                  "properties": {
                    "hw_qemu_guest_agent": "yes",
                    "mcs_name": "EuroLinux 9",
                    "mcs_os_distro": "eurolinux",
                    "mcs_os_version": "9",
                    "os_admin_user": "root",
                    "os_require_quiesce": "yes",
                    "os_type": "linux"
                  },
                  "tags": [
                    "tf-example"
                  ]
                }
        argumentDocs:
            archiving_format: optional string →  The format of archived image file. Use this to unzip image file when downloading an archive. Currently only "tar" format is supported.New since v0.4.2.
            checksum: string →  The checksum of the data associated with the image.
            compression_format: optional string →  The format of compressed image. Use this attribute to decompress image when downloading it from source. Must be one of "auto", "bzip2", "gzip", "xz". If set to "auto", response Content-Type header will be used to detect compression format.New since v0.4.2.
            container_format: required string →  The container format. Must be one of "bare".
            created_at: string →  The date the image was created.
            disk_format: required string →  The disk format. Must be one of "raw", "iso".
            file: string →  The trailing path after the image endpoint that represent the location of the image or the path to retrieve it.
            id: string →  ID of the resource.
            image_cache_path: optional string →  This is the directory where the images will be downloaded. Images will be stored with a filename corresponding to the url's md5 hash. Defaults to "$HOME/.terraform/image_cache"
            image_source_password: optional sensitive string →  The password of basic auth to download image_source_url.
            image_source_url: optional string →  This is the url of the raw image. The image will be downloaded in the image_cache_path before being uploaded to VKCS. Conflicts with local_file_path.
            image_source_username: optional string →  The username of basic auth to download image_source_url.
            local_file_path: optional string →  This is the filepath of the raw image file that will be uploaded to VKCS. Conflicts with image_source_url
            metadata: map of string →  The metadata associated with the image. Image metadata allow for meaningfully define the image properties and tags. See https://docs.openstack.org/glance/latest/user/metadefs-concepts.html.
            min_disk_gb: optional number →  Amount of disk space (in GB) required to boot VM. Defaults to 0.
            min_ram_mb: optional number →  Amount of ram (in MB) required to boot VM. Defauts to 0.
            name: required string →  The name of the image.
            owner: string →  The id of the vkcs user who owns the image.
            properties: optional map of string →  A map of key/value pairs to set freeform information about an image. See the "Notes" section for further information about properties.
            protected: optional boolean →  If true, image will not be deletable. Defaults to false.
            region: optional string →  The region in which to obtain the Image client. An Image client is needed to create an Image that can be used with a compute instance. If omitted, the region argument of the provider is used. Changing this creates a new Image.
            schema: string →  The path to the JSON-schema that represent the image or image
            size_bytes: number →  The size in bytes of the data associated with the image.
            status: string →  The status of the image. It can be "queued", "active" or "saving".
            tags: optional set of string →  The tags of the image. It must be a list of strings. At this time, it is not possible to delete all tags of an image.
            updated_at: string →  The date the image was last updated.
            verify_checksum: optional boolean →  If false, the checksum will not be verified once the image is finished uploading.
            visibility: optional string →  The visibility of the image. Must be one of "private", "community", or "shared". The ability to set the visibility depends upon the configuration of the VKCS cloud.
        importStatements:
            - terraform import vkcs_images_image.rancheros 89c60255-9bd6-460c-822a-e2b959ede9d2
    vkcs_keymanager_container:
        subCategory: Key Manager
        description: Manages a key container resource within VKCS.
        name: vkcs_keymanager_container
        title: vkcs_keymanager_container
        examples:
            - name: lb_cert
              manifest: |-
                {
                  "name": "container-tf-example",
                  "secret_refs": [
                    {
                      "name": "certificate",
                      "secret_ref": "${vkcs_keymanager_secret.certificate.secret_ref}"
                    },
                    {
                      "name": "private_key",
                      "secret_ref": "${vkcs_keymanager_secret.priv_key.secret_ref}"
                    }
                  ],
                  "type": "certificate"
                }
              references:
                secret_refs.secret_ref: vkcs_keymanager_secret.priv_key.secret_ref
        argumentDocs:
            acl: optional →  Allows to control an access to a container. Currently only the read operation is supported. If not specified, the container is accessible project wide. The read structure is described below.
            consumers: object →  The list of the container consumers. The structure is described below.
            container_ref: string →  The container reference / where to find the container.
            created_at: string →  The date the container ACL was created.
            creator_id: string →  The creator of the container.
            id: string →  ID of the resource.
            name: optional string →  Human-readable name for the Container. Does not have to be unique.
            project_access: optional boolean →  Whether the container is accessible project wide. Defaults to true.
            read: optional →  Block that describes read operation.
            region: optional string →  The region in which to obtain the KeyManager client. A KeyManager client is needed to create a container. If omitted, the region argument of the provider is used. Changing this creates a new container.
            secret_ref: required string →  The secret reference / where to find the secret, URL.
            secret_refs: optional →  A set of dictionaries containing references to secrets. The structure is described below.
            status: string →  The status of the container.
            type: required string →  Used to indicate the type of container. Must be one of generic, rsa or certificate.
            updated_at: string →  The date the container ACL was last updated.
            users: optional set of string →  The list of user IDs, which are allowed to access the container, when project_access is set to false.
        importStatements:
            - terraform import vkcs_keymanager_container.container_1 0c6cd26a-c012-4d7b-8034-057c0f1c2953
    vkcs_keymanager_secret:
        subCategory: Key Manager
        description: Manages a key secret resource within VKCS.
        name: vkcs_keymanager_secret
        title: vkcs_keymanager_secret
        examples:
            - name: priv_key
              manifest: |-
                {
                  "name": "priv-key-tf-example",
                  "payload": "${file(\"${path.module}/private-key.key\")}",
                  "payload_content_type": "text/plain",
                  "secret_type": "private"
                }
            - name: certificate
              manifest: |-
                {
                  "name": "certificate-tf-example",
                  "payload": "${file(\"${path.module}/certificate.pem\")}",
                  "payload_content_type": "text/plain",
                  "secret_type": "certificate"
                }
        argumentDocs:
            acl: optional →  Allows to control an access to a secret. Currently only the read operation is supported. If not specified, the secret is accessible project wide.
            algorithm: optional string →  Metadata provided by a user or system for informational purposes.
            all_metadata: map of string →  The map of metadata, assigned on the secret, which has been explicitly and implicitly added.
            bit_length: optional number →  Metadata provided by a user or system for informational purposes.
            content_types: map of string →  The map of the content types, assigned on the secret.
            created_at: string →  The date the container ACL was created.
            creator_id: string →  The creator of the secret.
            expiration: optional string →  The expiration time of the secret in the RFC3339 timestamp format (e.g. 2019-03-09T12:58:49Z). If omitted, a secret will never expire. Changing this creates a new secret.
            id: string →  ID of the resource.
            metadata: optional map of string →  Additional Metadata for the secret.
            mode: optional string →  Metadata provided by a user or system for informational purposes.
            name: optional string →  Human-readable name for the Secret. Does not have to be unique.
            payload: optional sensitive string →  The secret's data to be stored. payload_content_type must also be supplied if payload is included.
            payload_content_encoding: optional string →  (required if payload is encoded) The encoding used for the payload to be able to include it in the JSON request. Must be either base64 or binary.
            payload_content_type: optional string →  (required if payload is included) The media type for the content of the payload. Must be one of text/plain, text/plain;charset=utf-8, text/plain; charset=utf-8, application/octet-stream, application/pkcs8.
            project_access: optional boolean →  Whether the container is accessible project wide. Defaults to true.
            read: optional →  Block that describes read operation.
            region: optional string →  The region in which to obtain the KeyManager client. A KeyManager client is needed to create a secret. If omitted, the region argument of the provider is used. Changing this creates a new V1 secret.
            secret_ref: string →  The secret reference / where to find the secret.
            secret_type: optional string →  Used to indicate the type of secret being stored. For more information see Secret types.
            status: string →  The status of the secret.
            updated_at: string →  The date the container ACL was last updated.
            users: optional set of string →  The list of user IDs, which are allowed to access the container, when project_access is set to false.
        importStatements:
            - terraform import vkcs_keymanager_secret.secret_1 8a7a79c2-cf17-4e65-b2ae-ddc8bfcf6c74
    vkcs_kubernetes_addon:
        subCategory: Kubernetes
        description: Manages kubernetes cluster addons.
        name: vkcs_kubernetes_addon
        title: vkcs_kubernetes_addon
        examples:
            - name: kube-prometheus-stack
              manifest: |-
                {
                  "addon_id": "${data.vkcs_kubernetes_addon.kube-prometheus-stack.id}",
                  "cluster_id": "${vkcs_kubernetes_cluster.k8s-cluster.id}",
                  "configuration_values": "${data.vkcs_kubernetes_addon.kube-prometheus-stack.configuration_values}",
                  "depends_on": [
                    "${vkcs_kubernetes_node_group.default_ng}"
                  ],
                  "namespace": "monitoring"
                }
              references:
                addon_id: data.vkcs_kubernetes_addon.kube-prometheus-stack.id
                cluster_id: vkcs_kubernetes_cluster.k8s-cluster.id
                configuration_values: data.vkcs_kubernetes_addon.kube-prometheus-stack.configuration_values
        argumentDocs:
            addon_id: required string →  The id of the addon. Changing this creates a new addon.
            cluster_id: required string →  The ID of the kubernetes cluster. Changing this creates a new addon.
            configuration_values: optional string →  Configuration code for the addon. Changing this creates a new addon.
            id: string →  ID of the resource
            name: optional string →  The name of the application. Changing this creates a new addon.
            namespace: required string →  The namespace name where the addon will be installed.
            region: optional string →  The region in which to obtain the Container Infra Addons client. If omitted, the region argument of the provider is used. Changing this creates a new addon.
        importStatements:
            - terraform import vkcs_kubernetes_addon.addon 141a1f77-0e89-4b63-8d75-1b4ae496f862/a94c8ae2-0cac-4795-9253-d23ce2a70f86
    vkcs_kubernetes_cluster:
        subCategory: Kubernetes
        description: Manages a kubernetes cluster.
        name: vkcs_kubernetes_cluster
        title: vkcs_kubernetes_cluster
        examples:
            - name: k8s-cluster
              manifest: |-
                {
                  "availability_zone": "MS1",
                  "cluster_template_id": "${data.vkcs_kubernetes_clustertemplate.k8s_24.id}",
                  "depends_on": [
                    "${vkcs_networking_router_interface.app}"
                  ],
                  "floating_ip_enabled": true,
                  "labels": {
                    "clean_volumes": "true",
                    "cloud_monitoring": "true",
                    "cluster_node_volume_type": "ceph-ssd",
                    "kube_log_level": "2",
                    "master_volume_size": "100"
                  },
                  "master_count": 1,
                  "master_flavor": "${data.vkcs_compute_flavor.basic.id}",
                  "name": "k8s-cluster",
                  "network_id": "${vkcs_networking_network.app.id}",
                  "subnet_id": "${vkcs_networking_subnet.app.id}",
                  "sync_security_policy": true
                }
              references:
                cluster_template_id: data.vkcs_kubernetes_clustertemplate.k8s_24.id
                master_flavor: data.vkcs_compute_flavor.basic.id
                network_id: vkcs_networking_network.app.id
                subnet_id: vkcs_networking_subnet.app.id
        argumentDocs:
            all_labels: map of string →  The read-only map of all cluster labels.New since v0.5.1.
            api_address: string →  COE API address.
            api_lb_fip: optional string →  API LoadBalancer fip. IP address field.
            api_lb_vip: optional string →  API LoadBalancer vip. IP address field.
            availability_zone: required string →  Availability zone of the cluster.
            calico_ipv4pool: 'to set subnet where pods will be created. Default 10.100.0.0/16. Note: Updating this value while the cluster is running is dangerous because it can lead to loss of connectivity of the cluster nodes.'
            clean_volumes: 'to remove pvc volumes when deleting a cluster. Default False. Note: Changes to this value will be applied immediately.'
            cloud_monitoring: to enable cloud monitoring feature. Default False.
            cluster_node_volume_type: to set master vm volume type. Default ceph-hdd.
            cluster_template_id: required string →  The UUID of the Kubernetes cluster template. It can be obtained using the cluster_template data source.
            created_at: string →  The time at which cluster was created.
            dns_domain: optional string →  Custom DNS cluster domain. Changing this creates a new cluster.
            etcd_volume_size: to set etcd volume size in GB. Default 10.
            floating_ip_enabled: required boolean →  Floating ip is enabled.
            id: string →  ID of the resource.
            ingress_floating_ip: optional string →  Floating IP created for ingress service.
            insecure_registries: optional string →  Addresses of registries from which you can download images without checking certificates. Changing this creates a new cluster.
            keypair: optional string →  The name of the Compute service SSH keypair. Changing this creates a new cluster.
            kube_log_level: to set log level for kubelet in range 0 to 8. Default 0.
            labels: 'optional map of string →  The list of optional key value pairs representing additional properties of the cluster. Note: Updating this attribute will not immediately apply the changes; these options will be used when recreating or deleting cluster nodes, for example, during an upgrade operation.'
            loadbalancer_subnet_id: optional string →  The UUID of the load balancer's subnet. Changing this creates new cluster.
            master_addresses: string →  IP addresses of the master node of the cluster.
            master_count: optional number →  The number of master nodes for the cluster. Changing this creates a new cluster.
            master_flavor: optional string →  The UUID of a flavor for the master nodes. If master_flavor is not present, value from cluster_template will be used.
            master_volume_size: to set master vm volume size in GB. Default 50.
            name: required string →  The name of the cluster. Changing this creates a new cluster. Should match the pattern ^[a-zA-Z][a-zA-Z0-9_.-]*$.
            network_id: required string →  UUID of the cluster's network.
            pods_network_cidr: optional string →  Network cidr of k8s virtual network
            project_id: string →  The project of the cluster.
            region: optional string →  Region to use for the cluster. Default is a region configured for provider.
            registry_auth_password: optional string →  Docker registry access password.
            stack_id: string →  UUID of the Orchestration service stack.
            status: optional string →  Current state of a cluster. Changing this to RUNNING or SHUTOFF will turn cluster on/off.
            subnet_id: required string →  UUID of the cluster's subnet.
            sync_security_policy: optional boolean →  Enables syncing of security policies of cluster. Default value is false.New since v0.7.0.
            updated_at: string →  The time at which cluster was created.
            user_id: string →  The user of the cluster.
        importStatements:
            - terraform import vkcs_kubernetes_cluster.mycluster ce0f9463-dd25-474b-9fe8-94de63e5e42b
    vkcs_kubernetes_node_group:
        subCategory: Kubernetes
        description: Manages clusters node group.
        name: vkcs_kubernetes_node_group
        title: vkcs_kubernetes_node_group
        examples:
            - name: default_ng
              manifest: |-
                {
                  "cluster_id": "${vkcs_kubernetes_cluster.k8s-cluster.id}",
                  "labels": [
                    {
                      "key": "env",
                      "value": "test"
                    },
                    {
                      "key": "disktype",
                      "value": "ssd"
                    }
                  ],
                  "max_nodes": 5,
                  "min_nodes": 1,
                  "name": "default",
                  "node_count": 1,
                  "taints": [
                    {
                      "effect": "PreferNoSchedule",
                      "key": "taintkey1",
                      "value": "taintvalue1"
                    },
                    {
                      "effect": "PreferNoSchedule",
                      "key": "taintkey2",
                      "value": "taintvalue2"
                    }
                  ]
                }
              references:
                cluster_id: vkcs_kubernetes_cluster.k8s-cluster.id
        argumentDocs:
            autoscaling_enabled: optional boolean →  Determines whether the autoscaling is enabled.
            availability_zones: |-
                optional string →  The list of availability zones of the node group. Zones MS1 and  GZ1 are available. By default, node group is being created at cluster's zone.
                Important: Receiving default AZ add it manually to your main.tf config to sync it with state to avoid node groups force recreation in the future.
            cluster_id: required string →  The UUID of the existing cluster.
            created_at: string →  The time at which node group was created.
            effect: required string
            flavor_id: 'optional string →  The flavor UUID of this node group. Note: Starting with v0.5.1, changing this attribute does not force the resource to be recreated, which requires an in-place update and may not be provided in custom deployments. In this case, contact support for clarification.'
            id: string →  ID of the resource.
            key: required string
            labels: optional →  The list of objects representing representing additional properties of the node group. Each object should have attribute "key". Object may also have optional attribute "value".
            max_node_unavailable: optional number →  The maximum number of nodes that can fail during an upgrade. The default value is 25 percent.
            max_nodes: optional number →  The maximum allowed nodes for this node group.
            min_nodes: optional number →  The minimum allowed nodes for this node group. Default to 0 if not set.
            name: required string →  The name of node group to create. Changing this will force to create a new node group.
            node_count: required number →  The node count for this node group. Should be greater than 0. If autoscaling_enabled parameter is set, this attribute will be ignored during update.
            state: string →  Determines current state of node group (RUNNING, SHUTOFF, ERROR).
            taints: 'optional →  The list of objects representing node group taints. Each object should have following attributes: key, value, effect.'
            updated_at: string →  The time at which node group was created.
            uuid: string →  The UUID of the cluster's node group.
            value: optional string
            volume_size: optional number →  The size in GB for volume to load nodes from. Changing this will force to create a new node group.
            volume_type: optional string →  The volume type to load nodes from. Changing this will force to create a new node group.
        importStatements:
            - terraform import vkcs_kubernetes_node_group.ng aa14de9c-c5f5-4cc0-869c-ce655419df76
    vkcs_kubernetes_security_policy:
        subCategory: Kubernetes
        description: Manages a kubernetes cluster security policy.
        name: vkcs_kubernetes_security_policy
        title: vkcs_kubernetes_security_policy
        examples:
            - name: replicalimits
              manifest: |-
                {
                  "cluster_id": "${vkcs_kubernetes_cluster.k8s-cluster.id}",
                  "enabled": true,
                  "namespace": "*",
                  "policy_settings": "${jsonencode(local.policy_settings)}",
                  "security_policy_template_id": "${data.vkcs_kubernetes_security_policy_template.replicalimits.id}"
                }
              references:
                cluster_id: vkcs_kubernetes_cluster.k8s-cluster.id
                security_policy_template_id: data.vkcs_kubernetes_security_policy_template.replicalimits.id
        argumentDocs:
            cluster_id: required string →  The ID of the kubernetes cluster. Changing this creates a new security policy.
            created_at: string →  Creation timestamp
            enabled: optional boolean →  Controls whether the security policy is enabled. Default is true.
            id: string →  ID of the resource
            namespace: required string →  Namespace to apply security policy to.
            policy_settings: required string →  Policy settings.
            region: optional string →  The region in which to obtain the Container Infra client. If omitted, the region argument of the provider is used. Changing this creates a new security policy.
            security_policy_template_id: required string →  The ID of the security policy template. Changing this creates a new security policy.
            updated_at: string →  Update timestamp.
        importStatements:
            - terraform import vkcs_kubernetes_security_policy.sp 723bfe25-5b2b-4410-aba0-1c0ef6d1c8b0
    vkcs_lb_l7policy:
        subCategory: Load Balancers
        description: Manages a L7 Policy resource within VKCS.
        name: vkcs_lb_l7policy
        title: vkcs_lb_l7policy
        examples:
            - name: app_redirect
              manifest: |-
                {
                  "action": "REDIRECT_TO_POOL",
                  "description": "Policy for tf lb testing",
                  "listener_id": "${vkcs_lb_listener.app_http.id}",
                  "name": "http-tf-example",
                  "position": 1,
                  "redirect_pool_id": "${vkcs_lb_pool.http.id}"
                }
              references:
                listener_id: vkcs_lb_listener.app_http.id
                redirect_pool_id: vkcs_lb_pool.http.id
        argumentDocs:
            action: required string →  The L7 Policy action - can either be REDIRECT_TO_POOL, REDIRECT_TO_URL or REJECT.
            admin_state_up: optional boolean →  The administrative state of the L7 Policy. A valid value is true (UP) or false (DOWN).
            description: optional string →  Human-readable description for the L7 Policy.
            id: string →  ID of the resource.
            listener_id: required string →  The Listener on which the L7 Policy will be associated with. Changing this creates a new L7 Policy.
            name: optional string →  Human-readable name for the L7 Policy. Does not have to be unique.
            position: optional number →  The position of this policy on the listener. Positions start at 1.
            redirect_pool_id: optional string →  Requests matching this policy will be redirected to the pool with this ID. Only valid if action is REDIRECT_TO_POOL.
            redirect_url: optional string →  Requests matching this policy will be redirected to this URL. Only valid if action is REDIRECT_TO_URL.
            region: optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new L7 Policy.
        importStatements:
            - terraform import vkcs_lb_l7policy.l7policy_1 8a7a79c2-cf17-4e65-b2ae-ddc8bfcf6c74
    vkcs_lb_l7rule:
        subCategory: Load Balancers
        description: Manages a L7 rule resource within VKCS.
        name: vkcs_lb_l7rule
        title: vkcs_lb_l7rule
        examples:
            - name: app_api_redirect
              manifest: |-
                {
                  "compare_type": "EQUAL_TO",
                  "l7policy_id": "${vkcs_lb_l7policy.app_redirect.id}",
                  "type": "PATH",
                  "value": "/api"
                }
              references:
                l7policy_id: vkcs_lb_l7policy.app_redirect.id
        argumentDocs:
            admin_state_up: optional boolean →  The administrative state of the L7 Rule. A valid value is true (UP) or false (DOWN).
            compare_type: required string →  The comparison type for the L7 rule - can either be CONTAINS, STARTS_WITH, ENDS_WITH, EQUAL_TO or REGEX
            id: string →  ID of the resource.
            invert: optional boolean →  When true the logic of the rule is inverted. For example, with invert true, equal to would become not equal to. Default is false.
            key: optional string →  The key to use for the comparison. For example, the name of the cookie to evaluate. Valid when type is set to COOKIE or HEADER.
            l7policy_id: required string →  The ID of the L7 Policy to query. Changing this creates a new L7 Rule.
            listener_id: string →  The ID of the Listener owning this resource.
            region: optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new L7 Rule.
            type: required string →  The L7 Rule type - can either be COOKIE, FILE_TYPE, HEADER, HOST_NAME or PATH.
            value: required string →  The value to use for the comparison. For example, the file type to compare.
        importStatements:
            - terraform import vkcs_lb_l7rule.l7rule_1 e0bd694a-abbe-450e-b329-0931fd1cc5eb/4086b0c9-b18c-4d1c-b6b8-4c56c3ad2a9e
    vkcs_lb_listener:
        subCategory: Load Balancers
        description: Manages a listener resource within VKCS.
        name: vkcs_lb_listener
        title: vkcs_lb_listener
        examples:
            - name: app_http
              manifest: |-
                {
                  "description": "Listener for resources/datasources testing",
                  "loadbalancer_id": "${vkcs_lb_loadbalancer.app.id}",
                  "name": "app-http-tf-example",
                  "protocol": "HTTP",
                  "protocol_port": 8080
                }
              references:
                loadbalancer_id: vkcs_lb_loadbalancer.app.id
            - name: app_terminated_https
              manifest: |-
                {
                  "default_tls_container_ref": "${vkcs_keymanager_container.lb_cert.container_ref}",
                  "description": "Listener for resources/datasources testing",
                  "loadbalancer_id": "${vkcs_lb_loadbalancer.app.id}",
                  "name": "app-https-tf-example",
                  "protocol": "TERMINATED_HTTPS",
                  "protocol_port": 8443
                }
              references:
                default_tls_container_ref: vkcs_keymanager_container.lb_cert.container_ref
                loadbalancer_id: vkcs_lb_loadbalancer.app.id
        argumentDocs:
            admin_state_up: optional boolean →  The administrative state of the Listener. A valid value is true (UP) or false (DOWN).
            allowed_cidrs: optional string →  A list of CIDR blocks that are permitted to connect to this listener, denying all other source addresses. If not present, defaults to allow all.
            connection_limit: optional number →  The maximum number of connections allowed for the Listener.
            default_pool_id: optional string →  The ID of the default pool with which the Listener is associated.
            default_tls_container_ref: optional string →  A reference to a Keymanager Secrets container which stores TLS information. This is required if the protocol is TERMINATED_HTTPS.
            description: optional string →  Human-readable description for the Listener.
            id: string →  ID of the resource.
            insert_headers: optional map of string →  The list of key value pairs representing headers to insert into the request before it is sent to the backend members. Changing this updates the headers of the existing listener.
            loadbalancer_id: required string →  The load balancer on which to provision this Listener. Changing this creates a new Listener.
            name: optional string →  Human-readable name for the Listener. Does not have to be unique.
            protocol: required string →  The protocol - can either be TCP, HTTP, HTTPS, TERMINATED_HTTPS, UDP. Changing this creates a new Listener.
            protocol_port: required number →  The port on which to listen for client traffic. Changing this creates a new Listener.
            region: optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new Listener.
            sni_container_refs: optional string →  A list of references to Keymanager Secrets containers which store SNI information.
            timeout_client_data: optional number →  The client inactivity timeout in milliseconds.
            timeout_member_connect: optional number →  The member connection timeout in milliseconds.
            timeout_member_data: optional number →  The member inactivity timeout in milliseconds.
            timeout_tcp_inspect: optional number →  The time in milliseconds, to wait for additional TCP packets for content inspection.
        importStatements:
            - terraform import vkcs_lb_listener.listener_1 b67ce64e-8b26-405d-afeb-4a078901f15a
    vkcs_lb_loadbalancer:
        subCategory: Load Balancers
        description: Manages a loadbalancer resource within VKCS.
        name: vkcs_lb_loadbalancer
        title: vkcs_lb_loadbalancer
        examples:
            - name: app
              manifest: |-
                {
                  "description": "Loadbalancer for resources/datasources testing",
                  "name": "app-tf-example",
                  "tags": [
                    "app-front-tf-example"
                  ],
                  "vip_subnet_id": "${vkcs_networking_subnet.app.id}"
                }
              references:
                vip_subnet_id: vkcs_networking_subnet.app.id
        argumentDocs:
            admin_state_up: optional boolean →  The administrative state of the Loadbalancer. A valid value is true (UP) or false (DOWN).
            availability_zone: optional string →  The availability zone of the Loadbalancer. Changing this creates a new loadbalancer.
            description: optional string →  Human-readable description for the Loadbalancer.
            id: string →  ID of the resource.
            name: optional string →  Human-readable name for the Loadbalancer. Does not have to be unique.
            region: optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new LB loadbalancer.
            security_group_ids: optional deprecated set of string →  A list of security group IDs to apply to the loadbalancer. The security groups must be specified by ID and not name (as opposed to how they are configured with the Compute Instance). Deprecated This argument is deprecated, please do not use it.
            tags: optional set of string →  A list of simple strings assigned to the loadbalancer.
            vip_address: optional string →  The ip address of the load balancer. Changing this creates a new loadbalancer.
            vip_network_id: optional string →  The network on which to allocate the Loadbalancer's address. A tenant can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are shared).  Changing this creates a new loadbalancer.
            vip_port_id: optional string →  The port UUID that the loadbalancer will use. Changing this creates a new loadbalancer.
            vip_subnet_id: optional string →  The subnet on which to allocate the Loadbalancer's address. A tenant can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are shared).  Changing this creates a new loadbalancer.
        importStatements:
            - terraform import vkcs_lb_loadbalancer.loadbalancer_1 19bcfdc7-c521-4a7e-9459-6750bd16df76
    vkcs_lb_member:
        subCategory: Load Balancers
        description: Manages a member resource within VKCS.
        name: vkcs_lb_member
        title: vkcs_lb_member
        examples:
            - name: front_http
              manifest: |-
                {
                  "address": "192.168.199.110",
                  "pool_id": "${vkcs_lb_pool.http.id}",
                  "protocol_port": 8080
                }
              references:
                pool_id: vkcs_lb_pool.http.id
        argumentDocs:
            address: required string →  The IP address of the member to receive traffic from the load balancer. Changing this creates a new member.
            admin_state_up: optional boolean →  The administrative state of the member. A valid value is true (UP) or false (DOWN). Defaults to true.
            id: string →  ID of the resource.
            name: optional string →  Human-readable name for the member.
            pool_id: required string →  The id of the pool that this member will be assigned to. Changing this creates a new member.
            protocol_port: required number →  The port on which to listen for client traffic. Changing this creates a new member.
            region: optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new member.
            subnet_id: optional string →  The subnet in which to access the member. Changing this creates a new member.
            weight: optional number →  A positive integer value that indicates the relative portion of traffic that this member should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a member with a weight of 2. Defaults to 1.
        importStatements:
            - terraform import vkcs_lb_member.member_1 c22974d2-4c95-4bcb-9819-0afc5ed303d5/9563b79c-8460-47da-8a95-2711b746510f
    vkcs_lb_members:
        subCategory: Load Balancers
        description: Manages a members resource within VKCS.
        name: vkcs_lb_members
        title: vkcs_lb_members
        examples:
            - name: front_workers
              manifest: |-
                {
                  "dynamic": {
                    "member": [
                      {
                        "content": [
                          {
                            "address": "${member.value.access_ip_v4}",
                            "protocol_port": 8080
                          }
                        ],
                        "for_each": "${vkcs_compute_instance.front_worker}"
                      }
                    ]
                  },
                  "pool_id": "${vkcs_lb_pool.http.id}"
                }
              references:
                dynamic.content.address: member.value.access_ip_v4
                dynamic.for_each: vkcs_compute_instance.front_worker
                pool_id: vkcs_lb_pool.http.id
        argumentDocs:
            address: required string →  The IP address of the members to receive traffic from the load balancer.
            admin_state_up: optional boolean →  The administrative state of the member. A valid value is true (UP) or false (DOWN). Defaults to true.
            backup: optional boolean →  A bool that indicates whether the member is backup.
            id: string →  ID of the resource.
            member: optional →  A set of dictionaries containing member parameters. The structure is described below.
            name: optional string →  Human-readable name for the member.
            pool_id: required string →  The id of the pool that members will be assigned to. Changing this creates a new members resource.
            protocol_port: required number →  The port on which to listen for client traffic.
            region: optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new members resource.
            subnet_id: optional string →  The subnet in which to access the member.
            weight: optional number →  A positive integer value that indicates the relative portion of traffic that this members should receive from the pool. For example, a member with a weight of 10 receives five times as much traffic as a member with a weight of 2. Defaults to 1.
        importStatements:
            - terraform import vkcs_lb_members.members_1 c22974d2-4c95-4bcb-9819-0afc5ed303d5
    vkcs_lb_monitor:
        subCategory: Load Balancers
        description: Manages a monitor resource within VKCS.
        name: vkcs_lb_monitor
        title: vkcs_lb_monitor
        examples:
            - name: worker_ping_life_checker
              manifest: |-
                {
                  "delay": 20,
                  "max_retries": 5,
                  "name": "worker-ping-life-checker-tf-example",
                  "pool_id": "${vkcs_lb_pool.http.id}",
                  "timeout": 10,
                  "type": "PING"
                }
              references:
                pool_id: vkcs_lb_pool.http.id
        argumentDocs:
            admin_state_up: optional boolean →  The administrative state of the monitor. A valid value is true (UP) or false (DOWN).
            delay: required number →  The time, in seconds, between sending probes to members.
            expected_codes: optional string →  Required for HTTP(S) types. Expected HTTP codes for a passing HTTP(S) monitor. You can either specify a single status like "200", or a range like "200-202".
            http_method: optional string →  Required for HTTP(S) types. The HTTP method used for requests by the monitor. If this attribute is not specified, it defaults to "GET".
            id: string →  ID of the resource.
            max_retries: required number →  Number of permissible ping failures before changing the member's status to INACTIVE. Must be a number between 1 and 10.
            max_retries_down: optional number →  Number of permissible ping failures befor changing the member's status to ERROR. Must be a number between 1 and 10. Changing this updates the max_retries_down of the existing monitor.
            name: optional string →  The Name of the Monitor.
            pool_id: required string →  The id of the pool that this monitor will be assigned to.
            region: optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new monitor.
            timeout: required number →  Maximum number of seconds for a monitor to wait for a ping reply before it times out. The value must be less than the delay value.
            type: required string →  The type of probe, which is PING, TCP, HTTP, HTTPS, TLS-HELLO or UDP-CONNECT, that is sent by the load balancer to verify the member state. Changing this creates a new monitor.
            url_path: optional string →  Required for HTTP(S) types. URI path that will be accessed if monitor type is HTTP or HTTPS.
        importStatements:
            - terraform import vkcs_lb_monitor.monitor_1 47c26fc3-2403-427a-8c79-1589bd0533c2
    vkcs_lb_pool:
        subCategory: Load Balancers
        description: Manages a pool resource within VKCS.
        name: vkcs_lb_pool
        title: vkcs_lb_pool
        examples:
            - name: http
              manifest: |-
                {
                  "description": "Pool for http member/members testing",
                  "lb_method": "ROUND_ROBIN",
                  "listener_id": "${vkcs_lb_listener.app_http.id}",
                  "name": "http-tf-example",
                  "protocol": "HTTP"
                }
              references:
                listener_id: vkcs_lb_listener.app_http.id
        argumentDocs:
            admin_state_up: optional boolean →  The administrative state of the pool. A valid value is true (UP) or false (DOWN).
            cookie_name: optional string →  The name of the cookie if persistence mode is set appropriately. Required if type = APP_COOKIE.
            description: optional string →  Human-readable description for the pool.
            id: string →  ID of the resource.
            lb_method: required string →  The load balancing algorithm to distribute traffic to the pool's members. Must be one of ROUND_ROBIN, LEAST_CONNECTIONS, SOURCE_IP, or SOURCE_IP_PORT.
            listener_id: 'optional string →  The Listener on which the members of the pool will be associated with. Changing this creates a new pool. Note: One of LoadbalancerID or ListenerID must be provided.'
            loadbalancer_id: 'optional string →  The load balancer on which to provision this pool. Changing this creates a new pool. Note: One of LoadbalancerID or ListenerID must be provided.'
            name: optional string →  Human-readable name for the pool.
            persistence: optional →  Omit this field to prevent session persistence. Indicates whether connections in the same session will be processed by the same Pool member or not. Changing this creates a new pool.
            protocol: required string →  The protocol - can either be TCP, HTTP, HTTPS, PROXY, or UDP. Changing this creates a new pool.
            region: optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new pool.
            type: required string →  The type of persistence mode. The current specification supports SOURCE_IP, HTTP_COOKIE, and APP_COOKIE.
        importStatements:
            - terraform import vkcs_lb_pool.pool_1 60ad9ee4-249a-4d60-a45b-aa60e046c513
    vkcs_mlplatform_jupyterhub:
        subCategory: ML Platform
        description: Manages a ML Platform JupyterHub instance resource within VKCS.
        name: vkcs_mlplatform_jupyterhub
        title: vkcs_mlplatform_jupyterhub
        examples:
            - name: jupyterhub
              manifest: |-
                {
                  "admin_name": "admin",
                  "admin_password": "Password!",
                  "availability_zone": "GZ1",
                  "boot_volume": {
                    "volume_type": "ceph-ssd"
                  },
                  "data_volumes": [
                    {
                      "size": 60,
                      "volume_type": "ceph-ssd"
                    },
                    {
                      "size": 70,
                      "volume_type": "ceph-ssd"
                    }
                  ],
                  "flavor_id": "${data.vkcs_compute_flavor.basic.id}",
                  "name": "tf-example",
                  "networks": [
                    {
                      "network_id": "${vkcs_networking_network.app.id}"
                    }
                  ]
                }
              references:
                flavor_id: data.vkcs_compute_flavor.basic.id
        argumentDocs:
            admin_name: optional string →  JupyterHub admin name. Changing this creates a new resource
            admin_password: optional sensitive string →  JupyterHub admin password. Changing this creates a new resource
            availability_zone: required string →  The availability zone in which to create the resource. Changing this creates a new resource
            boot_volume: required →  Instance's boot volume configuration
            created_at: string →  Creation timestamp
            data_volumes: list →  Instance's data volumes configuration
            dns_name: string →  DNS name
            domain_name: optional string →  Domain name. Changing this creates a new resource
            flavor_id: required string →  Flavor ID
            id: string →  ID of the resource
            ip_pool: optional string →  ID of the ip pool
            name: read-only string →  Name of the volume
            network_id: required string →  ID of the network
            networks: list →  Network configuration
            private_ip: string →  Private IP address
            region: optional string →  The region in which ML Platform client is obtained, defaults to the provider's region.
            s3fs_bucket: optional string →  Connect specified s3 bucket to instance as volume. Changing this creates a new resource
            size: optional number →  Size of the volume
            volume_id: read-only string →  ID of the volume
            volume_type: required string →  Type of the volume
        importStatements:
            - terraform import vkcs_mlplatform_jupyterhub.myjupyterhub 3a679dd9-0942-49b0-b233-95de5a5a9502
    vkcs_mlplatform_k8s_registry:
        subCategory: ML Platform
        description: Manages a ML Platform K8S Registry instance resource within VKCS.
        name: vkcs_mlplatform_k8s_registry
        title: vkcs_mlplatform_k8s_registry
        examples:
            - name: k8s_registry
              manifest: |-
                {
                  "admin_name": "admin",
                  "admin_password": "dM8Ao21,0S264iZp",
                  "availability_zone": "GZ1",
                  "boot_volume": {
                    "volume_type": "ceph-ssd"
                  },
                  "flavor_id": "${data.vkcs_compute_flavor.basic.id}",
                  "name": "tf-example",
                  "networks": [
                    {
                      "ip_pool": "${data.vkcs_networking_network.extnet.id}",
                      "network_id": "${vkcs_networking_network.app.id}"
                    }
                  ]
                }
              references:
                flavor_id: data.vkcs_compute_flavor.basic.id
        argumentDocs:
            admin_name: optional string →  K8SRegistry admin name. Changing this creates a new resource
            admin_password: optional sensitive string →  K8SRegistry admin password. Changing this creates a new resource
            availability_zone: required string →  The availability zone in which to create the resource. Changing this creates a new resource
            boot_volume: required →  Instance's boot volume configuration
            created_at: string →  Creation timestamp
            data_volumes: list →  Instance's data volumes configuration
            dns_name: string →  DNS name
            domain_name: optional string →  Domain name. Changing this creates a new resource
            flavor_id: required string →  Flavor ID
            id: string →  ID of the resource
            ip_pool: required string →  ID of the ip pool
            name: read-only string →  Name of the volume
            network_id: required string →  ID of the network
            networks: list →  Network configuration
            private_ip: string →  Private IP address
            region: optional string →  The region in which ML Platform client is obtained, defaults to the provider's region.
            size: optional number →  Size of the volume
            volume_id: read-only string →  ID of the volume
            volume_type: required string →  Type of the volume
        importStatements:
            - terraform import vkcs_mlplatform_k8s_registry.myk8sregistry 0229eb40-5b56-4ab1-857f-453848a542f3
    vkcs_mlplatform_mlflow:
        subCategory: ML Platform
        description: Manages a ML Platform MLFlow instance resource within VKCS.
        name: vkcs_mlplatform_mlflow
        title: vkcs_mlplatform_mlflow
        examples:
            - name: mlflow
              manifest: |-
                {
                  "availability_zone": "GZ1",
                  "boot_volume": {
                    "size": 50,
                    "volume_type": "ceph-ssd"
                  },
                  "data_volumes": [
                    {
                      "size": 60,
                      "volume_type": "ceph-ssd"
                    }
                  ],
                  "demo_mode": true,
                  "flavor_id": "${data.vkcs_compute_flavor.basic.id}",
                  "jh_instance_id": "${vkcs_mlplatform_jupyterhub.jupyterhub.id}",
                  "name": "tf-example",
                  "networks": [
                    {
                      "network_id": "${vkcs_networking_network.app.id}"
                    }
                  ]
                }
              references:
                flavor_id: data.vkcs_compute_flavor.basic.id
                jh_instance_id: vkcs_mlplatform_jupyterhub.jupyterhub.id
        argumentDocs:
            availability_zone: required string →  The availability zone in which to create the resource. Changing this creates a new resource
            boot_volume: required →  Instance's boot volume configuration
            created_at: string →  Creation timestamp
            data_volumes: list →  Instance's data volumes configuration
            demo_mode: optional boolean →  Controls whether demo mode is enabled. If true, data will be stored on mlflow virtual machine. If false, s3 bucket will be used alongside dbaas postgres database.
            dns_name: string →  DNS name
            flavor_id: required string →  Flavor ID
            id: string →  ID of the resource
            ip_pool: optional string →  ID of the ip pool
            jh_instance_id: required string →  JupyterHub instance ID
            name: read-only string →  Name of the volume
            network_id: required string →  ID of the network
            networks: list →  Network configuration
            private_ip: string →  Private IP address
            region: optional string →  The region in which ML Platform client is obtained, defaults to the provider's region.
            size: optional number →  Size of the volume
            volume_id: read-only string →  ID of the volume
            volume_type: required string →  Type of the volume
        importStatements:
            - terraform import vkcs_mlplatform_mlflow.mymlflow b22e0fd6-f7e5-41b7-9cc5-15c1f352bc0d
    vkcs_mlplatform_mlflow_deploy:
        subCategory: ML Platform
        description: Manages a ML Platform MLFlow Deploy instance resource within VKCS.
        name: vkcs_mlplatform_mlflow_deploy
        title: vkcs_mlplatform_mlflow_deploy
        examples:
            - name: deploy
              manifest: |-
                {
                  "availability_zone": "GZ1",
                  "boot_volume": {
                    "size": 50,
                    "volume_type": "ceph-ssd"
                  },
                  "data_volumes": [
                    {
                      "size": 60,
                      "volume_type": "ceph-ssd"
                    }
                  ],
                  "flavor_id": "${data.vkcs_compute_flavor.basic.id}",
                  "mlflow_instance_id": "${vkcs_mlplatform_mlflow.mlflow.id}",
                  "name": "tf-example",
                  "networks": [
                    {
                      "network_id": "${vkcs_networking_network.app.id}"
                    }
                  ]
                }
              references:
                flavor_id: data.vkcs_compute_flavor.basic.id
                mlflow_instance_id: vkcs_mlplatform_mlflow.mlflow.id
        argumentDocs:
            availability_zone: required string →  The availability zone in which to create the resource. Changing this creates a new resource
            boot_volume: required →  Instance's boot volume configuration
            created_at: string →  Creation timestamp
            data_volumes: list →  Instance's data volumes configuration
            dns_name: string →  DNS name
            flavor_id: required string →  Flavor ID
            id: string →  ID of the resource
            ip_pool: optional string →  ID of the ip pool
            mlflow_instance_id: required string →  MLFlow instance ID
            name: read-only string →  Name of the volume
            network_id: required string →  ID of the network
            networks: list →  Network configuration
            private_ip: string →  Private IP address
            region: optional string →  The region in which ML Platform client is obtained, defaults to the provider's region.
            size: optional number →  Size of the volume
            volume_id: read-only string →  ID of the volume
            volume_type: required string →  Type of the volume
        importStatements:
            - terraform import vkcs_mlplatform_mlflow_deploy.mymlflowdeploy 0cade671-81b5-43c5-83e1-2a659378d53a
    vkcs_mlplatform_spark_k8s:
        subCategory: ML Platform
        description: Manages a ML Platform Spark K8S cluster resource within VKCS.
        name: vkcs_mlplatform_spark_k8s
        title: vkcs_mlplatform_spark_k8s
        examples:
            - name: spark_k8s
              manifest: |-
                {
                  "availability_zone": "GZ1",
                  "cluster_mode": "DEV",
                  "delete_after_inactive_min": 1440,
                  "environment_variables": "${yamlencode(local.spark_environment_variables)}",
                  "ip_pool": "${data.vkcs_networking_network.extnet.id}",
                  "name": "tf-example",
                  "network_id": "${vkcs_networking_network.app.id}",
                  "node_groups": [
                    {
                      "autoscaling_enabled": true,
                      "flavor_id": "${data.vkcs_compute_flavor.basic.id}",
                      "max_nodes": 100,
                      "min_nodes": 2,
                      "node_count": 2
                    }
                  ],
                  "registry_id": "${vkcs_mlplatform_k8s_registry.k8s_registry.id}",
                  "spark_configuration": "${yamlencode(local.spark_configuration)}",
                  "subnet_id": "${vkcs_networking_subnet.app.id}",
                  "suspend_after_inactive_min": 120
                }
              references:
                ip_pool: data.vkcs_networking_network.extnet.id
                network_id: vkcs_networking_network.app.id
                registry_id: vkcs_mlplatform_k8s_registry.k8s_registry.id
                subnet_id: vkcs_networking_subnet.app.id
        argumentDocs:
            autoscaling_enabled: required boolean →  Enables autoscaling for node group
            availability_zone: required string →  The availability zone in which to create the resource. Changing this creates a new resource
            cluster_mode: required string →  Cluster Mode. Should be DEV or PROD. Changing this creates a new resource
            control_instance_id: string →  ID of the control instance
            delete_after_inactive_min: optional number →  Timeout of cluster inactivity before deletion, in minutes. Changing this creates a new resource
            environment_variables: 'optional string →  Environment variables. Read more about this parameter here: https://cloud.vk.com/docs/en/ml/spark-to-k8s/instructions/create. Changing this creates a new resource'
            flavor_id: required string →  ID of the flavor to be used in nodes
            history_server_url: string →  URL of the history server
            id: string →  ID of the resource
            inactive_min: number →  Current time of cluster inactivity, in minutes
            ip_pool: required string →  ID of the ip pool. Changing this creates a new resource
            max_nodes: optional number →  Maximum number of nodes in node group. It is used only when autoscaling is enabled
            min_nodes: optional number →  Minimum count of nodes in node group. It is used only when autoscaling is enabled
            name: required string →  Cluster name. Changing this creates a new resource
            network_id: required string →  ID of the network. Changing this creates a new resource
            node_count: optional number →  Count of nodes in node group
            node_groups: list →  Cluster's node groups configuration
            region: optional string →  The region in which ML Platform client is obtained, defaults to the provider's region.
            registry_id: required string →  ID of the K8S registry to use with cluster. Changing this creates a new resource
            s3_bucket_name: string →  S3 bucket name
            spark_configuration: 'optional string →  Spark configuration. Read more about this parameter here: https://cloud.vk.com/docs/en/ml/spark-to-k8s/instructions/create. Changing this creates a new resource'
            subnet_id: optional string →  ID of the subnet. Changing this creates a new resource
            suspend_after_inactive_min: optional number →  Timeout of cluster inactivity before suspending, in minutes. Changing this creates a new resource
        importStatements:
            - terraform import vkcs_mlplatform_spark_k8s.mysparkk8s 32cc47a5-9726-454f-bffa-6723f21fbbc7
    vkcs_networking_floatingip:
        subCategory: Network
        description: Manages a floating IP resource within VKCS.
        name: vkcs_networking_floatingip
        title: vkcs_networking_floatingip
        examples:
            - name: base_fip
              manifest: |-
                {
                  "description": "floating ip in external net tf example",
                  "pool": "ext-net"
                }
            - name: associated_fip
              manifest: |-
                {
                  "pool": "ext-net",
                  "port_id": "${vkcs_networking_port.persistent_etcd.id}"
                }
              references:
                port_id: vkcs_networking_port.persistent_etcd.id
        argumentDocs:
            address: optional string →  The actual floating IP address itself.
            description: optional string →  Human-readable description for the floating IP.
            fixed_ip: optional string →  Fixed IP of the port to associate with this floating IP. Required if the port has multiple fixed IPs.
            id: string →  ID of the resource.
            pool: required string →  The name of the pool from which to obtain the floating IP. Changing this creates a new floating IP.
            port_id: optional string →  ID of an existing port with at least one IP address to associate with this floating IP.
            region: optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a floating IP that can be used with another networking resource, such as a load balancer. If omitted, the region argument of the provider is used. Changing this creates a new floating IP (which may or may not have a different address).
            sdn: 'optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project''s default SDN.'
            subnet_id: optional string →  The subnet ID of the floating IP pool. Specify this if the floating IP network has multiple subnets.
            subnet_ids: optional string →  A list of external subnet IDs to try over each to allocate a floating IP address. If a subnet ID in a list has exhausted floating IP pool, the next subnet ID will be tried. This argument is used only during the resource creation. Conflicts with a subnet_id argument.
            value_specs: optional map of string →  Map of additional options.
        importStatements:
            - terraform import vkcs_networking_floatingip.floatip_1 2c7f39f3-702b-48d1-940c-b50384177ee1
    vkcs_networking_floatingip_associate:
        subCategory: Network
        description: Associates a Floating IP to a Port
        name: vkcs_networking_floatingip_associate
        title: vkcs_networking_floatingip_associate
        examples:
            - name: floatingip-associate
              manifest: |-
                {
                  "depends_on": [
                    "${vkcs_networking_router_interface.db}"
                  ],
                  "floating_ip": "${vkcs_networking_floatingip.base_fip.address}",
                  "port_id": "${vkcs_networking_port.persistent_etcd.id}"
                }
              references:
                floating_ip: vkcs_networking_floatingip.base_fip.address
                port_id: vkcs_networking_port.persistent_etcd.id
        argumentDocs:
            fixed_ip: optional string →  One of the port's IP addresses.
            floating_ip: required string →  IP Address of an existing floating IP.
            id: string →  ID of the resource.
            port_id: required string →  ID of an existing port with at least one IP address to associate with this floating IP.
            region: optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a floating IP that can be used with another networking resource, such as a load balancer. If omitted, the region argument of the provider is used. Changing this creates a new floating IP (which may or may not have a different address).
            sdn: 'optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project''s default SDN.'
        importStatements:
            - terraform import vkcs_networking_floatingip_associate.fip 2c7f39f3-702b-48d1-940c-b50384177ee1
    vkcs_networking_network:
        subCategory: Network
        description: Manages a network resource within VKCS.
        name: vkcs_networking_network
        title: vkcs_networking_network
        examples:
            - name: app
              manifest: |-
                {
                  "description": "Application network",
                  "name": "app-tf-example"
                }
        argumentDocs:
            admin_state_up: optional boolean →  The administrative state of the network. Acceptable values are "true" and "false". Changing this value updates the state of the existing network.
            all_tags: set of string →  The collection of tags assigned on the network, which have been explicitly and implicitly added.
            description: optional string →  Human-readable description of the network. Changing this updates the name of the existing network.
            id: string →  ID of the resource.
            name: optional string →  The name of the network. Changing this updates the name of the existing network.
            port_security_enabled: optional boolean →  Whether to explicitly enable or disable port security on the network. Port Security is usually enabled by default, so omitting this argument will usually result in a value of "true". Setting this explicitly to false will disable port security. Valid values are true and false.
            private_dns_domain: optional string →  Private dns domain name
            region: optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a network. If omitted, the region argument of the provider is used. Changing this creates a new network.
            sdn: 'optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project''s default SDN.'
            tags: optional set of string →  A set of string tags for the network.
            value_specs: optional map of string →  Map of additional options.
            vkcs_services_access: optional boolean →  Whether VKCS services access is enabled. This feature should be enabled globally for your project. Access can be enabled for new or existing networks, but cannot be disabled for existing networks. Valid values are true and false.
        importStatements:
            - terraform import vkcs_networking_network.network_1 d90ce693-5ccf-4136-a0ed-152ce412b6b9
    vkcs_networking_port:
        subCategory: Network
        description: Manages a port resource within VKCS.
        name: vkcs_networking_port
        title: vkcs_networking_port
        examples:
            - name: persistent_etcd
              manifest: |-
                {
                  "fixed_ip": [
                    {
                      "subnet_id": "${vkcs_networking_subnet.db.id}"
                    }
                  ],
                  "name": "persistent-etcd-tf-example",
                  "network_id": "${vkcs_networking_network.db.id}",
                  "security_group_ids": [
                    "${vkcs_networking_secgroup.etcd.id}"
                  ],
                  "tags": [
                    "tf-example",
                    "etcd"
                  ]
                }
              references:
                fixed_ip.subnet_id: vkcs_networking_subnet.db.id
                network_id: vkcs_networking_network.db.id
        argumentDocs:
            admin_state_up: optional boolean →  Administrative up/down status for the port (must be true or false if provided). Changing this updates the admin_state_up of an existing port.
            all_fixed_ips: string →  The collection of Fixed IP addresses on the port in the order returned by the Network v2 API.
            all_security_group_ids: set of string →  The collection of Security Group IDs on the port which have been explicitly and implicitly added.
            all_tags: set of string →  The collection of tags assigned on the port, which have been explicitly and implicitly added.
            allowed_address_pairs: optional →  An IP/MAC Address pair of additional IP addresses that can be active on this port. The structure is described below.
            description: optional string →  Human-readable description of the port. Changing this updates the description of an existing port.
            device_id: optional string →  The ID of the device attached to the port. Changing this creates a new port.
            device_owner: optional string →  The device owner of the port. Changing this creates a new port.
            dns_assignment: map of string →  The list of maps representing port DNS assignments.
            dns_name: optional string →  The port DNS name.
            extra_dhcp_option: optional →  An extra DHCP option that needs to be configured on the port. The structure is described below. Can be specified multiple times.
            fixed_ip: optional →  (Conflicts with no_fixed_ip) An array of desired IPs for this port. The structure is described below.
            id: string →  ID of the resource.
            ip_address: required string →  The additional IP address.
            mac_address: optional string →  The additional MAC address.
            name: required string →  Name of the DHCP option.
            network_id: required string →  The ID of the network to attach the port to. Changing this creates a new port.
            no_fixed_ip: optional boolean →  (Conflicts with fixed_ip) Create a port with no fixed IP address. This will also remove any fixed IPs previously set on a port. true is the only valid value for this argument.
            no_security_groups: optional boolean →  (Conflicts with security_group_ids) If set to true, then no security groups are applied to the port. If set to false and no security_group_ids are specified, then the port will yield to the default behavior of the Networking service, which is to usually apply the "default" security group.
            port_security_enabled: optional boolean →  Whether to explicitly enable or disable port security on the port. Port Security is usually enabled by default, so omitting argument will usually result in a value of true. Setting this explicitly to false will disable port security. In order to disable port security, the port must not have any security groups. Valid values are true and false.
            region: optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a port. If omitted, the region argument of the provider is used. Changing this creates a new port.
            sdn: 'optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project''s default SDN.'
            security_group_ids: optional set of string →  (Conflicts with no_security_groups) A list of security group IDs to apply to the port. The security groups must be specified by ID and not name (as opposed to how they are configured with the Compute Instance).
            subnet_id: required string →  Subnet in which to allocate IP address for this port.
            tags: optional set of string →  A set of string tags for the port.
            value: required string →  Value of the DHCP option.
            value_specs: optional map of string →  Map of additional options.
        importStatements:
            - terraform import vkcs_networking_port.port_1 eae26a3e-1c33-4cc1-9c31-0cd729c438a1
    vkcs_networking_port_secgroup_associate:
        subCategory: Network
        description: Manages a port's security groups within VKCS.
        name: vkcs_networking_port_secgroup_associate
        title: vkcs_networking_port_secgroup_associate
        examples:
            - name: append_secgroups
              manifest: |-
                {
                  "port_id": "${vkcs_networking_port.persistent_etcd.id}",
                  "security_group_ids": [
                    "${vkcs_networking_secgroup.etcd.id}"
                  ]
                }
              references:
                port_id: vkcs_networking_port.persistent_etcd.id
            - name: replace_secgroups
              manifest: |-
                {
                  "enforce": true,
                  "port_id": "${vkcs_networking_port.persistent_etcd.id}",
                  "security_group_ids": [
                    "${vkcs_networking_secgroup.http.id}"
                  ]
                }
              references:
                port_id: vkcs_networking_port.persistent_etcd.id
            - name: remove_secgroups
              manifest: |-
                {
                  "enforce": true,
                  "port_id": "${vkcs_networking_port.persistent_etcd.id}",
                  "security_group_ids": []
                }
              references:
                port_id: vkcs_networking_port.persistent_etcd.id
        argumentDocs:
            all_security_group_ids: set of string →  The collection of Security Group IDs on the port which have been explicitly and implicitly added.
            enforce: optional boolean →  Whether to replace or append the list of security groups, specified in the security_group_ids. Defaults to false.
            id: string →  ID of the resource.
            port_id: required string →  An UUID of the port to apply security groups to.
            region: optional string →  The region in which to obtain the networking client. A networking client is needed to manage a port. If omitted, the region argument of the provider is used. Changing this creates a new resource.
            sdn: 'optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project''s default SDN.'
            security_group_ids: required set of string →  A list of security group IDs to apply to the port. The security groups must be specified by ID and not name (as opposed to how they are configured with the Compute Instance).
        importStatements: []
    vkcs_networking_router:
        subCategory: Network
        description: Manages a router resource within VKCS.
        name: vkcs_networking_router
        title: vkcs_networking_router
        examples:
            - name: router
              manifest: |-
                {
                  "external_network_id": "${data.vkcs_networking_network.extnet.id}",
                  "name": "router-tf-example",
                  "tags": [
                    "tf-example"
                  ]
                }
              references:
                external_network_id: data.vkcs_networking_network.extnet.id
        argumentDocs:
            admin_state_up: optional boolean →  Administrative up/down status for the router (must be "true" or "false" if provided). Changing this updates the admin_state_up of an existing router.
            all_tags: set of string →  The collection of tags assigned on the router, which have been explicitly and implicitly added.
            description: optional string →  Human-readable description for the router.
            external_network_id: optional string →  The network UUID of an external gateway for the router. A router with an external gateway is required if any compute instances or load balancers will be using floating IPs. Changing this updates the external gateway of the router.
            id: string →  ID of the resource.
            name: optional string →  A unique name for the router. Changing this updates the name of an existing router.
            region: optional string →  The region in which to obtain the networking client. A networking client is needed to create a router. If omitted, the region argument of the provider is used. Changing this creates a new router.
            sdn: 'optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project''s default SDN.'
            set_router_gateway_after_create: optional boolean →  Boolean to control whether the Router gateway is assigned during creation or updated after creation.
            tags: optional set of string →  A set of string tags for the router.
            value_specs: optional map of string →  Map of additional driver-specific options.
            vendor_options: optional →  Map of additional vendor-specific options. Supported options are described below.
        importStatements:
            - terraform import vkcs_networking_router.router_1 014395cd-89fc-4c9b-96b7-13d1ee79dad2
    vkcs_networking_router_interface:
        subCategory: Network
        description: Manages a router interface resource within VKCS.
        name: vkcs_networking_router_interface
        title: vkcs_networking_router_interface
        examples:
            - name: app
              manifest: |-
                {
                  "router_id": "${vkcs_networking_router.router.id}",
                  "subnet_id": "${vkcs_networking_subnet.app.id}"
                }
              references:
                router_id: vkcs_networking_router.router.id
                subnet_id: vkcs_networking_subnet.app.id
        argumentDocs:
            id: string →  ID of the resource.
            port_id: optional string →  ID of the port this interface connects to. Changing this creates a new router interface.
            region: optional string →  The region in which to obtain the networking client. A networking client is needed to create a router. If omitted, the region argument of the provider is used. Changing this creates a new router interface.
            router_id: required string →  ID of the router this interface belongs to. Changing this creates a new router interface.
            sdn: 'optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project''s default SDN.'
            subnet_id: optional string →  ID of the subnet this interface connects to. Changing this creates a new router interface.
        importStatements:
            - |-
              openstack port list --router <router name or id>
              terraform import vkcs_networking_router_interface.int_1 <port id from above output>
    vkcs_networking_router_route:
        subCategory: Network
        description: Creates a routing entry on a VKCS router.
        name: vkcs_networking_router_route
        title: vkcs_networking_router_route
        examples:
            - name: compute_gateway
              manifest: |-
                {
                  "destination_cidr": "10.10.0.0/23",
                  "next_hop": "${vkcs_compute_instance.gateway.access_ip_v4}",
                  "router_id": "${vkcs_networking_router.router.id}"
                }
              references:
                next_hop: vkcs_compute_instance.gateway.access_ip_v4
                router_id: vkcs_networking_router.router.id
        argumentDocs:
            destination_cidr: required string →  CIDR block to match on the packet’s destination IP. Changing this creates a new routing entry.
            id: string →  ID of the resource.
            next_hop: required string →  IP address of the next hop gateway. Changing this creates a new routing entry.
            region: optional string →  The region in which to obtain the networking client. A networking client is needed to configure a routing entry on a router. If omitted, the region argument of the provider is used. Changing this creates a new routing entry.
            router_id: required string →  ID of the router this routing entry belongs to. Changing this creates a new routing entry.
            sdn: 'optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project''s default SDN.'
        importStatements:
            - terraform import vkcs_networking_router_route.router_route_1 686fe248-386c-4f70-9f6c-281607dad079-route-10.0.1.0/24-192.168.199.25
    vkcs_networking_secgroup:
        subCategory: Firewall
        description: Manages a security group resource within VKCS.
        name: vkcs_networking_secgroup
        title: vkcs_networking_secgroup
        examples:
            - name: etcd
              manifest: |-
                {
                  "description": "etcd service",
                  "name": "etcd-tf-example"
                }
        argumentDocs:
            all_tags: set of string →  The collection of tags assigned on the security group, which have been explicitly and implicitly added.
            delete_default_rules: optional boolean →  Whether or not to delete the default egress security rules. This is false by default. See the below note for more information.
            description: optional string →  A unique name for the security group.
            id: string →  ID of the resource.
            name: required string →  A unique name for the security group.
            region: optional string →  The region in which to obtain the networking client. A networking client is needed to create a port. If omitted, the region argument of the provider is used. Changing this creates a new security group.
            sdn: 'optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project''s default SDN.'
            tags: optional set of string →  A set of string tags for the security group.
        importStatements:
            - terraform import vkcs_networking_secgroup.secgroup_1 38809219-5e8a-4852-9139-6f461c90e8bc
    vkcs_networking_secgroup_rule:
        subCategory: Firewall
        description: Manages a security group rule resource within VKCS.
        name: vkcs_networking_secgroup_rule
        title: vkcs_networking_secgroup_rule
        examples:
            - name: etcd_app_clients
              manifest: |-
                {
                  "description": "etcd app clients rule",
                  "direction": "ingress",
                  "port_range_max": 2379,
                  "port_range_min": 2379,
                  "protocol": "tcp",
                  "remote_ip_prefix": "${vkcs_networking_subnet.app.cidr}",
                  "security_group_id": "${vkcs_networking_secgroup.etcd.id}"
                }
              references:
                remote_ip_prefix: vkcs_networking_subnet.app.cidr
                security_group_id: vkcs_networking_secgroup.etcd.id
            - name: all_udp
              manifest: |-
                {
                  "description": "All inbound UDP traffic from etcd hosts",
                  "direction": "ingress",
                  "protocol": "udp",
                  "remote_group_id": "${vkcs_networking_secgroup.etcd.id}",
                  "security_group_id": "${vkcs_networking_secgroup.etcd.id}"
                }
              references:
                remote_group_id: vkcs_networking_secgroup.etcd.id
                security_group_id: vkcs_networking_secgroup.etcd.id
            - name: all
              manifest: |-
                {
                  "description": "Any inbound traffic from etcd hosts",
                  "direction": "ingress",
                  "remote_group_id": "${vkcs_networking_secgroup.etcd.id}",
                  "security_group_id": "${vkcs_networking_secgroup.etcd.id}"
                }
              references:
                remote_group_id: vkcs_networking_secgroup.etcd.id
                security_group_id: vkcs_networking_secgroup.etcd.id
        argumentDocs:
            description: optional string →  A description of the rule. Changing this creates a new security group rule.
            direction: required string →  The direction of the rule, valid values are ingress or egress. Changing this creates a new security group rule.
            ethertype: optional deprecated string →  The layer 3 protocol type, the only valid value is IPv4. Changing this creates a new security group rule. Deprecated Only IPv4 can be used as ethertype. This argument is deprecated, please do not use it.
            id: string →  ID of the resource.
            port_range_max: optional number →  The higher part of the allowed port range, valid integer value needs to be between 1 and 65535. To specify all ports, port_range_min and port_range_max arguments must be absent. Changing this creates a new security group rule.
            port_range_min: optional number →  The lower part of the allowed port range, valid integer value needs to be between 1 and 65535. To specify all ports, port_range_min and port_range_max arguments must be absent. Changing this creates a new security group rule.
            protocol: optional string →  The layer 4 protocol type, valid values are following. Changing this creates a new security group rule. This is required if you want to specify a port range.
            region: optional string →  The region in which to obtain the networking client. A networking client is needed to create a port. If omitted, the region argument of the provider is used. Changing this creates a new security group rule.
            remote_group_id: 'optional string →  The remote group id, the value needs to be an ID of a security group in the same tenant. Changing this creates a new security group rule. Note: Only one of remote_group_id or remote_ip_prefix may be set.'
            remote_ip_prefix: 'optional string →  The remote CIDR, the value needs to be a valid CIDR (i.e. 192.168.0.0/16). Changing this creates a new security group rule. Note: Only one of remote_group_id or remote_ip_prefix may be set.'
            sdn: 'optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project''s default SDN.'
            security_group_id: required string →  The security group id the rule should belong to, the value needs to be an ID of a security group in the same tenant. Changing this creates a new security group rule.
        importStatements:
            - terraform import vkcs_networking_secgroup_rule.secgroup_rule_1 aeb68ee3-6e9d-4256-955c-9584a6212745
    vkcs_networking_subnet:
        subCategory: Network
        description: Manages a subnet resource within VKCS.
        name: vkcs_networking_subnet
        title: vkcs_networking_subnet
        examples:
            - name: app
              manifest: |-
                {
                  "cidr": "192.168.199.0/24",
                  "name": "app-tf-example",
                  "network_id": "${vkcs_networking_network.app.id}"
                }
              references:
                network_id: vkcs_networking_network.app.id
            - name: subnet-with-dns-tf-example
              manifest: |-
                {
                  "cidr": "192.168.200.0/24",
                  "dns_nameservers": [
                    "8.8.8.8",
                    "8.8.4.4"
                  ],
                  "name": "subnet-with-dns-tf-example",
                  "network_id": "${vkcs_networking_network.app.id}"
                }
              references:
                network_id: vkcs_networking_network.app.id
        argumentDocs:
            all_tags: set of string →  The collection of ags assigned on the subnet, which have been explicitly and implicitly added.
            allocation_pool: optional →  A block declaring the start and end range of the IP addresses available for use with DHCP in this subnet. Multiple allocation_pool blocks can be declared, providing the subnet with more than one range of IP addresses to use with DHCP. However, each IP range must be from the same CIDR that the subnet is part of. The allocation_pool block is documented below.
            allocation_pool.end: required string →  The ending address.
            allocation_pool.start: required string →  The starting address.
            cidr: optional string →  CIDR representing IP range for this subnet, based on IP version. You can omit this option if you are creating a subnet from a subnet pool.
            description: optional string →  Human-readable description of the subnet. Changing this updates the name of the existing subnet.
            dns_nameservers: optional string →  An array of DNS name server names used by hosts in this subnet. Changing this updates the DNS name servers for the existing subnet.
            enable_dhcp: optional boolean →  The administrative state of the network. Acceptable values are "true" and "false". Changing this value enables or disables the DHCP capabilities of the existing subnet. Defaults to true.
            gateway_ip: optional string →  Default gateway used by devices in this subnet. Leaving this blank and not setting no_gateway will cause a default gateway of .1 to be used. Changing this updates the gateway IP of the existing subnet.
            id: string →  ID of the resource.
            name: optional string →  The name of the subnet. Changing this updates the name of the existing subnet.
            network_id: required string →  The UUID of the parent network. Changing this creates a new subnet.
            no_gateway: optional boolean →  Do not set a gateway IP on this subnet. Changing this removes or adds a default gateway IP of the existing subnet.
            prefix_length: optional number →  The prefix length to use when creating a subnet from a subnet pool. The default subnet pool prefix length that was defined when creating the subnet pool will be used if not provided. Changing this creates a new subnet.
            region: optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a subnet. If omitted, the region argument of the provider is used. Changing this creates a new subnet.
            sdn: 'optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project''s default SDN.'
            subnetpool_id: optional string →  The ID of the subnetpool associated with the subnet.
            tags: optional set of string →  A set of string tags for the subnet.
            value_specs: optional map of string →  Map of additional options.
        importStatements:
            - terraform import vkcs_networking_subnet.subnet_1 da4faf16-5546-41e4-8330-4d0002b74048
    vkcs_networking_subnet_route:
        subCategory: Network
        description: Creates a routing entry on a VKCS subnet.
        name: vkcs_networking_subnet_route
        title: vkcs_networking_subnet_route
        examples:
            - name: subnet-route-to-external-tf-example
              manifest: |-
                {
                  "destination_cidr": "10.0.1.0/24",
                  "next_hop": "${vkcs_networking_port.persistent_etcd.all_fixed_ips[0]}",
                  "subnet_id": "${vkcs_networking_subnet.app.id}"
                }
              references:
                next_hop: vkcs_networking_port.persistent_etcd.all_fixed_ips[0]
                subnet_id: vkcs_networking_subnet.app.id
        argumentDocs:
            destination_cidr: required string →  CIDR block to match on the packet’s destination IP. Changing this creates a new routing entry.
            id: string →  ID of the resource.
            next_hop: required string →  IP address of the next hop gateway. Changing this creates a new routing entry.
            region: optional string →  The region in which to obtain the networking client. A networking client is needed to configure a routing entry on a subnet. If omitted, the region argument of the provider is used. Changing this creates a new routing entry.
            sdn: 'optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project''s default SDN.'
            subnet_id: required string →  ID of the subnet this routing entry belongs to. Changing this creates a new routing entry.
        importStatements:
            - terraform import vkcs_networking_subnet_route.subnet_route_1 686fe248-386c-4f70-9f6c-281607dad079-route-10.0.1.0/24-192.168.199.25
    vkcs_publicdns_record:
        subCategory: DNS
        description: Manages a public DNS record.
        name: vkcs_publicdns_record
        title: vkcs_publicdns_record
        examples:
            - name: srv
              manifest: |-
                {
                  "host": "siptarget.com",
                  "port": 5060,
                  "priority": 10,
                  "proto": "_udp",
                  "service": "_sip",
                  "ttl": 60,
                  "type": "SRV",
                  "weight": 5,
                  "zone_id": "${vkcs_publicdns_zone.zone.id}"
                }
              references:
                zone_id: vkcs_publicdns_zone.zone.id
            - name: multi-a
              manifest: |-
                {
                  "for_each": "${local.google_public_dns_ips}",
                  "ip": "${each.value}",
                  "name": "google-dns-servers",
                  "ttl": 60,
                  "type": "A",
                  "zone_id": "${vkcs_publicdns_zone.zone.id}"
                }
              references:
                for_each: local.google_public_dns_ips
                ip: each.value
                zone_id: vkcs_publicdns_zone.zone.id
        argumentDocs:
            content: optional string →  The content of the record.
            full_name: string →  The full name of the SRV record.
            host: optional string →  The domain name of the target host.
            id: string →  ID of the resource.
            ip: optional string →  The IP address of the record. It should be IPv4 for record of type "A" and IPv6 for record of type "AAAA".
            name: optional string →  The name of the record.
            port: optional number →  The port on the target host of the service.
            priority: optional number →  The priority of the record's server.
            proto: optional string →  The name of the desired protocol.
            region: optional string →  The region in which to obtain the V2 Public DNS client. If omitted, the region argument of the provider is used. Changing this creates a new record.
            service: optional string →  The name of the desired service.
            ttl: optional number →  The time to live of the record.
            type: 'required string →  The type of the record. Must be one of following: "A", "AAAA", "CNAME", "MX", "NS", "SRV", "TXT".'
            weight: optional number →  The relative weight of the record's server.
            zone_id: required string →  The ID of the zone to attach the record to.
        importStatements:
            - terraform import vkcs_publicdns_record.record 7582c61b-99b7-4730-a74f-7062fbadb94c/a/96b11adf-2627-4a06-bceb-a7f3b61b709e
    vkcs_publicdns_zone:
        subCategory: DNS
        description: Manages a public DNS zone.
        name: vkcs_publicdns_zone
        title: vkcs_publicdns_zone
        examples:
            - name: zone
              manifest: |-
                {
                  "admin_email": "admin@example.com",
                  "expire": 3600000,
                  "primary_dns": "ns1.mcs.mail.ru",
                  "zone": "${local.zone_name}"
                }
              references:
                zone: local.zone_name
        argumentDocs:
            admin_email: optional string →  The admin email of the zone SOA.
            expire: optional number →  The expire time of the zone SOA.
            id: string →  ID of the resource.
            primary_dns: optional string →  The primary DNS of the zone SOA.
            refresh: optional number →  The refresh time of the zone SOA.
            region: optional string →  The region in which to obtain the V2 Public DNS client. If omitted, the region argument of the provider is used. Changing this creates a new zone.
            retry: optional number →  The retry time of the zone SOA.
            serial: number →  The serial number of the zone SOA.
            status: string →  The status of the zone.
            ttl: optional number →  The TTL (time to live) of the zone SOA.
            zone: required string →  The name of the zone. Changes this creates a new zone.
        importStatements:
            - terraform import vkcs_publicdns_zone.zone b758c4e5-ec13-4dfa-8458-b8502625499c
    vkcs_sharedfilesystem_securityservice:
        subCategory: File Share (NFS)
        description: Configure a Shared File System security service.
        name: vkcs_sharedfilesystem_securityservice
        title: vkcs_sharedfilesystem_securityservice
        examples:
            - name: ad_common
              manifest: |-
                {
                  "description": "active directory tf example",
                  "dns_ip": "192.168.199.10",
                  "name": "active-directory-tf-example",
                  "server": "192.168.199.10",
                  "type": "active_directory"
                }
        argumentDocs:
            description: optional string →  The human-readable description for the security service. Changing this updates the description of the existing security service.
            dns_ip: optional string →  The security service DNS IP address that is used inside the tenant network.
            domain: optional string →  The security service domain.
            id: string →  ID of the resource.
            name: optional string →  The name of the security service. Changing this updates the name of the existing security service.
            password: optional sensitive string →  The user password, if you specify a user.
            project_id: string →  The owner of the Security Service.
            region: optional string →  The region in which to obtain the Shared File System client. A Shared File System client is needed to create a security service. If omitted, the region argument of the provider is used. Changing this creates a new security service.
            server: optional string →  The security service host name or IP address.
            type: required string →  The security service type - can either be active_directory, kerberos or ldap.  Changing this updates the existing security service.
            user: optional string →  The security service user or group name that is used by the tenant.
        importStatements:
            - terraform import vkcs_sharedfilesystem_securityservice.securityservice_1 048d7c1c-4187-4370-89ce-da638120d168
    vkcs_sharedfilesystem_share:
        subCategory: File Share (NFS)
        description: Configure a Shared File System share.
        name: vkcs_sharedfilesystem_share
        title: vkcs_sharedfilesystem_share
        examples:
            - name: data
              manifest: |-
                {
                  "description": "example of creating tf share",
                  "name": "share-data-tf-example",
                  "share_network_id": "${vkcs_sharedfilesystem_sharenetwork.data.id}",
                  "share_proto": "NFS",
                  "share_type": "default_share_type",
                  "size": 1
                }
              references:
                share_network_id: vkcs_sharedfilesystem_sharenetwork.data.id
        argumentDocs:
            all_metadata: map of string →  The map of metadata, assigned on the share, which has been explicitly and implicitly added.
            availability_zone: optional string →  The share availability zone. Changing this creates a new share.
            description: optional string →  The human-readable description for the share. Changing this updates the description of the existing share.
            export_location_path: string →  The export location path of the share.New since v0.1.15.
            id: string →  ID of the resource.
            name: required string →  The name of the share. Changing this updates the name of the existing share.
            project_id: string →  The owner of the Share.
            region: optional string →  The region in which to obtain the Shared File System client. A Shared File System client is needed to create a share. Changing this creates a new share.
            share_network_id: required string →  The UUID of the share network.
            share_proto: required string →  The share protocol - can either be NFS, CIFS, CEPHFS, GLUSTERFS, HDFS or MAPRFS. Changing this creates a new share.
            share_server_id: string →  The UUID of the share server.
            share_type: optional string →  The share type name. If you omit this parameter, the default share type is used.
            size: required number →  The share size, in GBs. The requested share size cannot be greater than the allowed GB quota. Changing this resizes the existing share.
            snapshot_id: optional string →  The UUID of the share's base snapshot. Changing this creates a new share.
        importStatements:
            - terraform import vkcs_sharedfilesystem_share.share_1 829b7299-eae0-4860-88d4-13d03f0e9e2c
    vkcs_sharedfilesystem_share_access:
        subCategory: File Share (NFS)
        description: Configure a Shared File System share access list.
        name: vkcs_sharedfilesystem_share_access
        title: vkcs_sharedfilesystem_share_access
        examples:
            - name: opencloud
              manifest: |-
                {
                  "access_level": "rw",
                  "access_to": "192.168.199.11",
                  "access_type": "ip",
                  "share_id": "${vkcs_sharedfilesystem_share.data.id}"
                }
              references:
                share_id: vkcs_sharedfilesystem_share.data.id
        argumentDocs:
            access_level: required string →  The access level to the share. Can either be rw or ro.
            access_to: required string →  The value that defines the access. Can either be an IP address or a username verified by configured Security Service of the Share Network.
            access_type: required string →  The access rule type. Can either be an ip, user, cert, or cephx.
            id: string →  ID of the resource.
            region: optional string →  The region in which to obtain the Shared File System client. A Shared File System client is needed to create a share access. Changing this creates a new share access.
            share_id: required string →  The UUID of the share to which you are granted access.
        importStatements:
            - terraform import vkcs_sharedfilesystem_share_access.share_access_1 1c68f8cb-20b5-4f91-b761-6c612b4aae53/c8207c63-6a6d-4a7b-872f-047049582172
    vkcs_sharedfilesystem_sharenetwork:
        subCategory: File Share (NFS)
        description: Configure a Shared File System share network.
        name: vkcs_sharedfilesystem_sharenetwork
        title: vkcs_sharedfilesystem_sharenetwork
        examples:
            - name: data
              manifest: |-
                {
                  "description": "sharing network for tf example",
                  "name": "sharenetwork-tf-example",
                  "neutron_net_id": "${vkcs_networking_network.app.id}",
                  "neutron_subnet_id": "${vkcs_networking_subnet.app.id}"
                }
              references:
                neutron_net_id: vkcs_networking_network.app.id
                neutron_subnet_id: vkcs_networking_subnet.app.id
            - name: sharenetwork_1
              manifest: |-
                {
                  "description": "test share network with security services",
                  "name": "test_sharenetwork",
                  "neutron_net_id": "${vkcs_networking_network.network_1.id}",
                  "neutron_subnet_id": "${vkcs_networking_subnet.subnet_1.id}",
                  "security_service_ids": [
                    "${vkcs_sharedfilesystem_securityservice.securityservice_1.id}"
                  ]
                }
              dependencies:
                vkcs_networking_network.network_1: |-
                    {
                      "admin_state_up": "true",
                      "name": "network_1"
                    }
                vkcs_networking_subnet.subnet_1: |-
                    {
                      "cidr": "192.168.199.0/24",
                      "ip_version": 4,
                      "name": "subnet_1",
                      "network_id": "${vkcs_networking_network.network_1.id}"
                    }
                vkcs_sharedfilesystem_securityservice.securityservice_1: |-
                    {
                      "description": "created by terraform",
                      "dns_ip": "192.168.199.10",
                      "domain": "example.com",
                      "name": "security",
                      "password": "s8cret",
                      "server": "192.168.199.10",
                      "type": "active_directory",
                      "user": "joinDomainUser"
                    }
        argumentDocs:
            cidr: string →  The share network CIDR.
            description: optional string →  The human-readable description for the share network. Changing this updates the description of the existing share network.
            id: string →  ID of the resource.
            name: optional string →  The name for the share network. Changing this updates the name of the existing share network.
            neutron_net_id: required string →  The UUID of a neutron network when setting up or updating a share network. Changing this updates the existing share network if it's not used by shares.
            neutron_subnet_id: required string →  The UUID of the neutron subnet when setting up or updating a share network. Changing this updates the existing share network if it's not used by shares.
            project_id: string →  The owner of the Share Network.
            region: optional string →  The region in which to obtain the Shared File System client. A Shared File System client is needed to create a share network. If omitted, the region argument of the provider is used. Changing this creates a new share network.
            security_service_ids: optional set of string →  The list of security service IDs to associate with the share network. The security service must be specified by ID and not name.
        importStatements:
            - terraform import vkcs_sharedfilesystem_sharenetwork.sharenetwork_1 e4018a0b-e869-437d-870c-e51f50e051db
    vkcs_vpnaas_endpoint_group:
        subCategory: VPN
        description: Manages an Endpoint Group resource within VKCS.
        name: vkcs_vpnaas_endpoint_group
        title: vkcs_vpnaas_endpoint_group
        examples:
            - name: allowed_hosts
              manifest: |-
                {
                  "endpoints": [
                    "10.2.0.0/24",
                    "10.3.0.0/24"
                  ],
                  "name": "allowed-hosts-tf-example",
                  "type": "cidr"
                }
            - name: subnet_hosts
              manifest: |-
                {
                  "endpoints": [
                    "${vkcs_networking_subnet.app.id}"
                  ],
                  "type": "subnet"
                }
        argumentDocs:
            description: optional string →  The human-readable description for the group. Changing this updates the description of the existing group.
            endpoints: optional set of string →  List of endpoints of the same type, for the endpoint group. The values will depend on the type. Changing this creates a new group.
            id: string →  ID of the resource.
            name: optional string →  The name of the group. Changing this updates the name of the existing group.
            region: optional string →  The region in which to obtain the Networking client. A Networking client is needed to create an endpoint group. If omitted, the region argument of the provider is used. Changing this creates a new group.
            sdn: 'optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project''s default SDN.New since v0.5.3.'
            type: optional string →  The type of the endpoints in the group. A valid value is subnet, cidr, network, router, or vlan. Changing this creates a new group.
        importStatements:
            - terraform import vkcs_vpnaas_endpoint_group.group_1 832cb7f3-59fe-40cf-8f64-8350ffc03272
    vkcs_vpnaas_ike_policy:
        subCategory: VPN
        description: Manages a IKE policy resource within VKCS.
        name: vkcs_vpnaas_ike_policy
        title: vkcs_vpnaas_ike_policy
        examples:
            - name: data_center
              manifest: |-
                {
                  "auth_algorithm": "sha256",
                  "description": "Policy that restricts remote working users to connect to our data ceneter over VPN",
                  "name": "key-policy-tf-example"
                }
        argumentDocs:
            auth_algorithm: optional string →  The authentication hash algorithm. Valid values are sha1, sha256, sha384, sha512. Default is sha1. Changing this updates the algorithm of the existing policy.
            description: optional string →  The human-readable description for the policy. Changing this updates the description of the existing policy.
            encryption_algorithm: optional string →  The encryption algorithm. Valid values are 3des, aes-128, aes-192 and so on. The default value is aes-128. Changing this updates the existing policy.
            id: string →  ID of the resource.
            ike_version: optional string →  The IKE mode. A valid value is v1 or v2. Default is v1. Changing this updates the existing policy.
            lifetime: optional →  The lifetime of the security association. Consists of Unit and Value.
            name: optional string →  The name of the policy. Changing this updates the name of the existing policy.
            pfs: optional string →  The perfect forward secrecy mode. Valid values are Group2, Group5 and Group14. Default is Group5. Changing this updates the existing policy.
            phase1_negotiation_mode: optional string →  The IKE mode. A valid value is main, which is the default. Changing this updates the existing policy.
            region: optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a VPN service. If omitted, the region argument of the provider is used. Changing this creates a new service.
            sdn: 'optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project''s default SDN.New since v0.5.3.'
            units: optional string →  The units for the lifetime of the security association. Can be either seconds or kilobytes. Default is seconds.
            value: optional number →  The value for the lifetime of the security association. Must be a positive integer. Default is 3600.
        importStatements:
            - terraform import vkcs_vpnaas_ike_policy.policy_1 832cb7f3-59fe-40cf-8f64-8350ffc03272
    vkcs_vpnaas_ipsec_policy:
        subCategory: VPN
        description: Manages a IPSec policy resource within VKCS.
        name: vkcs_vpnaas_ipsec_policy
        title: vkcs_vpnaas_ipsec_policy
        examples:
            - name: data_center
              manifest: |-
                {
                  "description": "Policy that restricts remote working users to connect to our data ceneter over VPN",
                  "lifetime": [
                    {
                      "units": "seconds",
                      "value": 3600
                    }
                  ],
                  "name": "database-key-policy-tf-example"
                }
        argumentDocs:
            auth_algorithm: optional string →  The authentication hash algorithm. Valid values are sha1, sha256, sha384, sha512. Default is sha1. Changing this updates the algorithm of the existing policy.
            description: optional string →  The human-readable description for the policy. Changing this updates the description of the existing policy.
            encapsulation_mode: optional string →  The encapsulation mode. Valid values are tunnel and transport. Default is tunnel. Changing this updates the existing policy.
            encryption_algorithm: optional string →  The encryption algorithm. Valid values are 3des, aes-128, aes-192 and so on. The default value is aes-128. Changing this updates the existing policy.
            id: string →  ID of the resource.
            lifetime: optional →  The lifetime of the security association. Consists of Unit and Value.
            name: optional string →  The name of the policy. Changing this updates the name of the existing policy.
            pfs: optional string →  The perfect forward secrecy mode. Valid values are Group2, Group5 and Group14. Default is Group5. Changing this updates the existing policy.
            region: optional string →  The region in which to obtain the Networking client. A Networking client is needed to create an IPSec policy. If omitted, the region argument of the provider is used. Changing this creates a new policy.
            sdn: 'optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project''s default SDN.New since v0.5.3.'
            transform_protocol: optional string →  The transform protocol. Valid values are ESP, AH and AH-ESP. Changing this updates the existing policy. Default is ESP.
            units: optional string →  The units for the lifetime of the security association. Can be either seconds or kilobytes. Default is seconds.
            value: optional number →  The value for the lifetime of the security association. Must be a positive integer. Default is 3600.
        importStatements:
            - terraform import vkcs_vpnaas_ipsec_policy.policy_1 832cb7f3-59fe-40cf-8f64-8350ffc03272
    vkcs_vpnaas_service:
        subCategory: VPN
        description: Manages a VPN service resource within VKCS.
        name: vkcs_vpnaas_service
        title: vkcs_vpnaas_service
        examples:
            - name: vpn_to_datacenter
              manifest: |-
                {
                  "name": "vpn-tf-example",
                  "router_id": "${vkcs_networking_router.router.id}"
                }
              references:
                router_id: vkcs_networking_router.router.id
        argumentDocs:
            admin_state_up: optional boolean →  The administrative state of the resource. Can either be up(true) or down(false). Changing this updates the administrative state of the existing service.
            description: optional string →  The human-readable description for the service. Changing this updates the description of the existing service.
            external_v4_ip: string →  The read-only external (public) IPv4 address that is used for the VPN service.
            external_v6_ip: string →  The read-only external (public) IPv6 address that is used for the VPN service.
            id: string →  ID of the resource.
            name: optional string →  The name of the service. Changing this updates the name of the existing service.
            region: optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a VPN service. If omitted, the region argument of the provider is used. Changing this creates a new service.
            router_id: required string →  The ID of the router. Changing this creates a new service.
            sdn: 'optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project''s default SDN.New since v0.5.3.'
            status: string →  Indicates whether IPsec VPN service is currently operational. Values are ACTIVE, DOWN, BUILD, ERROR, PENDING_CREATE, PENDING_UPDATE, or PENDING_DELETE.
            subnet_id: optional string →  SubnetID is the ID of the subnet. Default is null.
        importStatements:
            - terraform import vkcs_vpnaas_service.service_1 832cb7f3-59fe-40cf-8f64-8350ffc03272
    vkcs_vpnaas_site_connection:
        subCategory: VPN
        description: Manages a IPSec site connection resource within VKCS.
        name: vkcs_vpnaas_site_connection
        title: vkcs_vpnaas_site_connection
        examples:
            - name: connection
              manifest: |-
                {
                  "depends_on": [
                    "${vkcs_networking_router_interface.app}"
                  ],
                  "dpd": [
                    {
                      "action": "restart",
                      "interval": 21,
                      "timeout": 42
                    }
                  ],
                  "ikepolicy_id": "${vkcs_vpnaas_ike_policy.data_center.id}",
                  "ipsecpolicy_id": "${vkcs_vpnaas_ipsec_policy.data_center.id}",
                  "local_ep_group_id": "${vkcs_vpnaas_endpoint_group.subnet_hosts.id}",
                  "name": "connection",
                  "peer_address": "192.168.10.1",
                  "peer_ep_group_id": "${vkcs_vpnaas_endpoint_group.allowed_hosts.id}",
                  "peer_id": "192.168.10.1",
                  "psk": "secret",
                  "vpnservice_id": "${vkcs_vpnaas_service.vpn_to_datacenter.id}"
                }
              references:
                ikepolicy_id: vkcs_vpnaas_ike_policy.data_center.id
                ipsecpolicy_id: vkcs_vpnaas_ipsec_policy.data_center.id
                local_ep_group_id: vkcs_vpnaas_endpoint_group.subnet_hosts.id
                peer_ep_group_id: vkcs_vpnaas_endpoint_group.allowed_hosts.id
                vpnservice_id: vkcs_vpnaas_service.vpn_to_datacenter.id
        argumentDocs:
            action: optional string →  The dead peer detection (DPD) action. A valid value is clear, hold, restart, disabled, or restart-by-peer. Default value is hold.
            admin_state_up: optional boolean →  The administrative state of the resource. Can either be up(true) or down(false). Changing this updates the administrative state of the existing connection.
            description: optional string →  The human-readable description for the connection. Changing this updates the description of the existing connection.
            dpd: optional →  A dictionary with dead peer detection (DPD) protocol controls.
            id: string →  ID of the resource.
            ikepolicy_id: required string →  The ID of the IKE policy. Changing this creates a new connection.
            initiator: optional string →  A valid value is response-only or bi-directional. Default is bi-directional.
            interval: optional number →  The dead peer detection (DPD) interval, in seconds. A valid value is a positive integer. Default is 30.
            ipsecpolicy_id: required string →  The ID of the IPsec policy. Changing this creates a new connection.
            local_ep_group_id: optional string →  The ID for the endpoint group that contains private subnets for the local side of the connection. You must specify this parameter with the peer_ep_group_id parameter unless in backward- compatible mode where peer_cidrs is provided with a subnet_id for the VPN service. Changing this updates the existing connection.
            local_id: optional string →  An ID to be used instead of the external IP address for a virtual router used in traffic between instances on different networks in east-west traffic. Most often, local ID would be domain name, email address, etc. If this is not configured then the external IP address will be used as the ID.
            mtu: optional number →  The maximum transmission unit (MTU) value to address fragmentation. Minimum value is 68 for IPv4, and 1280 for IPv6.
            name: optional string →  The name of the connection. Changing this updates the name of the existing connection.
            peer_address: required string →  The peer gateway public IPv4 or IPv6 address or FQDN.
            peer_cidrs: optional string →  Unique list of valid peer private CIDRs in the form < net_address > / < prefix >.
            peer_ep_group_id: optional string →  The ID for the endpoint group that contains private CIDRs in the form < net_address > / < prefix > for the peer side of the connection. You must specify this parameter with the local_ep_group_id parameter unless in backward-compatible mode where peer_cidrs is provided with a subnet_id for the VPN service.
            peer_id: required string →  The peer router identity for authentication. A valid value is an IPv4 address, IPv6 address, e-mail address, key ID, or FQDN. Typically, this value matches the peer_address value. Changing this updates the existing policy.
            psk: required string →  The pre-shared key. A valid value is any string.
            region: optional string →  The region in which to obtain the Networking client. A Networking client is needed to create an IPSec site connection. If omitted, the region argument of the provider is used. Changing this creates a new site connection.
            sdn: 'optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project''s default SDN.New since v0.5.3.'
            timeout: optional number →  The dead peer detection (DPD) timeout in seconds. A valid value is a positive integer that is greater than the DPD interval value. Default is 120.
            vpnservice_id: required string →  The ID of the VPN service. Changing this creates a new connection.
        importStatements:
            - terraform import vkcs_vpnaas_site_connection.conn_1 832cb7f3-59fe-40cf-8f64-8350ffc03272
