// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RecordInitParameters struct {

	// optional string →  The content of the record.
	// The content of the record.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// optional string →  The domain name of the target host.
	// The domain name of the target host.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// optional string →  The IP address of the record. It should be IPv4 for record of type "A" and IPv6 for record of type "AAAA".
	// The IP address of the record. It should be IPv4 for record of type "A" and IPv6 for record of type "AAAA".
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// optional string →  The name of the record.
	// The name of the record.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional number →  The port on the target host of the service.
	// The port on the target host of the service.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// optional number →  The priority of the record's server.
	// The priority of the record's server.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// optional string →  The name of the desired protocol.
	// The name of the desired protocol.
	Proto *string `json:"proto,omitempty" tf:"proto,omitempty"`

	// optional string →  The region in which to obtain the V2 Public DNS client. If omitted, the region argument of the provider is used. Changing this creates a new record.
	// The region in which to obtain the V2 Public DNS client. If omitted, the `region` argument of the provider is used. Changing this creates a new record.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  The name of the desired service.
	// The name of the desired service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// optional number →  The time to live of the record.
	// The time to live of the record.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// required string →  The type of the record. Must be one of following: "A", "AAAA", "CNAME", "MX", "NS", "SRV", "TXT".
	// The type of the record. Must be one of following: "A", "AAAA", "CNAME", "MX", "NS", "SRV", "TXT".
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// optional number →  The relative weight of the record's server.
	// The relative weight of the record's server.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type RecordObservation struct {

	// optional string →  The content of the record.
	// The content of the record.
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// string →  The full name of the SRV record.
	// The full name of the SRV record.
	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	// optional string →  The domain name of the target host.
	// The domain name of the target host.
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// string →  ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// optional string →  The IP address of the record. It should be IPv4 for record of type "A" and IPv6 for record of type "AAAA".
	// The IP address of the record. It should be IPv4 for record of type "A" and IPv6 for record of type "AAAA".
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// optional string →  The name of the record.
	// The name of the record.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional number →  The port on the target host of the service.
	// The port on the target host of the service.
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// optional number →  The priority of the record's server.
	// The priority of the record's server.
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// optional string →  The name of the desired protocol.
	// The name of the desired protocol.
	Proto *string `json:"proto,omitempty" tf:"proto,omitempty"`

	// optional string →  The region in which to obtain the V2 Public DNS client. If omitted, the region argument of the provider is used. Changing this creates a new record.
	// The region in which to obtain the V2 Public DNS client. If omitted, the `region` argument of the provider is used. Changing this creates a new record.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  The name of the desired service.
	// The name of the desired service.
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// optional number →  The time to live of the record.
	// The time to live of the record.
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// required string →  The type of the record. Must be one of following: "A", "AAAA", "CNAME", "MX", "NS", "SRV", "TXT".
	// The type of the record. Must be one of following: "A", "AAAA", "CNAME", "MX", "NS", "SRV", "TXT".
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// optional number →  The relative weight of the record's server.
	// The relative weight of the record's server.
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`

	// required string →  The ID of the zone to attach the record to.
	// The ID of the zone to attach the record to.
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`
}

type RecordParameters struct {

	// optional string →  The content of the record.
	// The content of the record.
	// +kubebuilder:validation:Optional
	Content *string `json:"content,omitempty" tf:"content,omitempty"`

	// optional string →  The domain name of the target host.
	// The domain name of the target host.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// optional string →  The IP address of the record. It should be IPv4 for record of type "A" and IPv6 for record of type "AAAA".
	// The IP address of the record. It should be IPv4 for record of type "A" and IPv6 for record of type "AAAA".
	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// optional string →  The name of the record.
	// The name of the record.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional number →  The port on the target host of the service.
	// The port on the target host of the service.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// optional number →  The priority of the record's server.
	// The priority of the record's server.
	// +kubebuilder:validation:Optional
	Priority *float64 `json:"priority,omitempty" tf:"priority,omitempty"`

	// optional string →  The name of the desired protocol.
	// The name of the desired protocol.
	// +kubebuilder:validation:Optional
	Proto *string `json:"proto,omitempty" tf:"proto,omitempty"`

	// optional string →  The region in which to obtain the V2 Public DNS client. If omitted, the region argument of the provider is used. Changing this creates a new record.
	// The region in which to obtain the V2 Public DNS client. If omitted, the `region` argument of the provider is used. Changing this creates a new record.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  The name of the desired service.
	// The name of the desired service.
	// +kubebuilder:validation:Optional
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// optional number →  The time to live of the record.
	// The time to live of the record.
	// +kubebuilder:validation:Optional
	TTL *float64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// required string →  The type of the record. Must be one of following: "A", "AAAA", "CNAME", "MX", "NS", "SRV", "TXT".
	// The type of the record. Must be one of following: "A", "AAAA", "CNAME", "MX", "NS", "SRV", "TXT".
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// optional number →  The relative weight of the record's server.
	// The relative weight of the record's server.
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`

	// required string →  The ID of the zone to attach the record to.
	// The ID of the zone to attach the record to.
	// +crossplane:generate:reference:type=Zone
	// +kubebuilder:validation:Optional
	ZoneID *string `json:"zoneId,omitempty" tf:"zone_id,omitempty"`

	// Reference to a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDRef *v1.Reference `json:"zoneIdRef,omitempty" tf:"-"`

	// Selector for a Zone to populate zoneId.
	// +kubebuilder:validation:Optional
	ZoneIDSelector *v1.Selector `json:"zoneIdSelector,omitempty" tf:"-"`
}

// RecordSpec defines the desired state of Record
type RecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RecordParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RecordInitParameters `json:"initProvider,omitempty"`
}

// RecordStatus defines the observed state of Record.
type RecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Record is the Schema for the Records API. Manages a public DNS record.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vkcs}
type Record struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   RecordSpec   `json:"spec"`
	Status RecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RecordList contains a list of Records
type RecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Record `json:"items"`
}

// Repository type metadata.
var (
	Record_Kind             = "Record"
	Record_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Record_Kind}.String()
	Record_KindAPIVersion   = Record_Kind + "." + CRDGroupVersion.String()
	Record_GroupVersionKind = CRDGroupVersion.WithKind(Record_Kind)
)

func init() {
	SchemeBuilder.Register(&Record{}, &RecordList{})
}
