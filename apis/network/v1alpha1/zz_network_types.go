// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NetworkInitParameters struct {

	// optional boolean →  The administrative state of the network. Acceptable values are "true" and "false". Changing this value updates the state of the existing network.
	// The administrative state of the network. Acceptable values are "true" and "false". Changing this value updates the state of the existing network.
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// readable description of the network. Changing this updates the name of the existing network.
	// Human-readable description of the network. Changing this updates the name of the existing network.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// optional string →  The name of the network. Changing this updates the name of the existing network.
	// The name of the network. Changing this updates the name of the existing network.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional boolean →  Whether to explicitly enable or disable port security on the network. Port Security is usually enabled by default, so omitting this argument will usually result in a value of "true". Setting this explicitly to false will disable port security. Valid values are true and false.
	// Whether to explicitly enable or disable port security on the network. Port Security is usually enabled by default, so omitting this argument will usually result in a value of "true". Setting this explicitly to `false` will disable port security. Valid values are `true` and `false`.
	PortSecurityEnabled *bool `json:"portSecurityEnabled,omitempty" tf:"port_security_enabled,omitempty"`

	// optional string →  Private dns domain name
	// Private dns domain name
	PrivateDNSDomain *string `json:"privateDnsDomain,omitempty" tf:"private_dns_domain,omitempty"`

	// optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a network. If omitted, the region argument of the provider is used. Changing this creates a new network.
	// The region in which to obtain the Networking client. A Networking client is needed to create a network. If omitted, the `region` argument of the provider is used. Changing this creates a new network.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	Sdn *string `json:"sdn,omitempty" tf:"sdn,omitempty"`

	// optional set of string →  A set of string tags for the network.
	// A set of string tags for the network.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// optional map of string →  Map of additional options.
	// Map of additional options.
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`

	// optional boolean →  Whether VKCS services access is enabled. This feature should be enabled globally for your project. Access can be enabled for new or existing networks, but cannot be disabled for existing networks. Valid values are true and false.
	// Whether VKCS services access is enabled. This feature should be enabled globally for your project. Access can be enabled for new or existing networks, but cannot be disabled for existing networks. Valid values are `true` and `false`.
	VkcsServicesAccess *bool `json:"vkcsServicesAccess,omitempty" tf:"vkcs_services_access,omitempty"`
}

type NetworkObservation struct {

	// optional boolean →  The administrative state of the network. Acceptable values are "true" and "false". Changing this value updates the state of the existing network.
	// The administrative state of the network. Acceptable values are "true" and "false". Changing this value updates the state of the existing network.
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// set of string →  The collection of tags assigned on the network, which have been explicitly and implicitly added.
	// The collection of tags assigned on the network, which have been explicitly and implicitly added.
	AllTags []*string `json:"allTags,omitempty" tf:"all_tags,omitempty"`

	// readable description of the network. Changing this updates the name of the existing network.
	// Human-readable description of the network. Changing this updates the name of the existing network.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// string →  ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// optional string →  The name of the network. Changing this updates the name of the existing network.
	// The name of the network. Changing this updates the name of the existing network.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional boolean →  Whether to explicitly enable or disable port security on the network. Port Security is usually enabled by default, so omitting this argument will usually result in a value of "true". Setting this explicitly to false will disable port security. Valid values are true and false.
	// Whether to explicitly enable or disable port security on the network. Port Security is usually enabled by default, so omitting this argument will usually result in a value of "true". Setting this explicitly to `false` will disable port security. Valid values are `true` and `false`.
	PortSecurityEnabled *bool `json:"portSecurityEnabled,omitempty" tf:"port_security_enabled,omitempty"`

	// optional string →  Private dns domain name
	// Private dns domain name
	PrivateDNSDomain *string `json:"privateDnsDomain,omitempty" tf:"private_dns_domain,omitempty"`

	// optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a network. If omitted, the region argument of the provider is used. Changing this creates a new network.
	// The region in which to obtain the Networking client. A Networking client is needed to create a network. If omitted, the `region` argument of the provider is used. Changing this creates a new network.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	Sdn *string `json:"sdn,omitempty" tf:"sdn,omitempty"`

	// optional set of string →  A set of string tags for the network.
	// A set of string tags for the network.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// optional map of string →  Map of additional options.
	// Map of additional options.
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`

	// optional boolean →  Whether VKCS services access is enabled. This feature should be enabled globally for your project. Access can be enabled for new or existing networks, but cannot be disabled for existing networks. Valid values are true and false.
	// Whether VKCS services access is enabled. This feature should be enabled globally for your project. Access can be enabled for new or existing networks, but cannot be disabled for existing networks. Valid values are `true` and `false`.
	VkcsServicesAccess *bool `json:"vkcsServicesAccess,omitempty" tf:"vkcs_services_access,omitempty"`
}

type NetworkParameters struct {

	// optional boolean →  The administrative state of the network. Acceptable values are "true" and "false". Changing this value updates the state of the existing network.
	// The administrative state of the network. Acceptable values are "true" and "false". Changing this value updates the state of the existing network.
	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// readable description of the network. Changing this updates the name of the existing network.
	// Human-readable description of the network. Changing this updates the name of the existing network.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// optional string →  The name of the network. Changing this updates the name of the existing network.
	// The name of the network. Changing this updates the name of the existing network.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional boolean →  Whether to explicitly enable or disable port security on the network. Port Security is usually enabled by default, so omitting this argument will usually result in a value of "true". Setting this explicitly to false will disable port security. Valid values are true and false.
	// Whether to explicitly enable or disable port security on the network. Port Security is usually enabled by default, so omitting this argument will usually result in a value of "true". Setting this explicitly to `false` will disable port security. Valid values are `true` and `false`.
	// +kubebuilder:validation:Optional
	PortSecurityEnabled *bool `json:"portSecurityEnabled,omitempty" tf:"port_security_enabled,omitempty"`

	// optional string →  Private dns domain name
	// Private dns domain name
	// +kubebuilder:validation:Optional
	PrivateDNSDomain *string `json:"privateDnsDomain,omitempty" tf:"private_dns_domain,omitempty"`

	// optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a network. If omitted, the region argument of the provider is used. Changing this creates a new network.
	// The region in which to obtain the Networking client. A Networking client is needed to create a network. If omitted, the `region` argument of the provider is used. Changing this creates a new network.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// +kubebuilder:validation:Optional
	Sdn *string `json:"sdn,omitempty" tf:"sdn,omitempty"`

	// optional set of string →  A set of string tags for the network.
	// A set of string tags for the network.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// optional map of string →  Map of additional options.
	// Map of additional options.
	// +kubebuilder:validation:Optional
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`

	// optional boolean →  Whether VKCS services access is enabled. This feature should be enabled globally for your project. Access can be enabled for new or existing networks, but cannot be disabled for existing networks. Valid values are true and false.
	// Whether VKCS services access is enabled. This feature should be enabled globally for your project. Access can be enabled for new or existing networks, but cannot be disabled for existing networks. Valid values are `true` and `false`.
	// +kubebuilder:validation:Optional
	VkcsServicesAccess *bool `json:"vkcsServicesAccess,omitempty" tf:"vkcs_services_access,omitempty"`
}

// NetworkSpec defines the desired state of Network
type NetworkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NetworkInitParameters `json:"initProvider,omitempty"`
}

// NetworkStatus defines the observed state of Network.
type NetworkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Network is the Schema for the Networks API. Manages a network resource within VKCS.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vkcs}
type Network struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkSpec   `json:"spec"`
	Status            NetworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkList contains a list of Networks
type NetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Network `json:"items"`
}

// Repository type metadata.
var (
	Network_Kind             = "Network"
	Network_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Network_Kind}.String()
	Network_KindAPIVersion   = Network_Kind + "." + CRDGroupVersion.String()
	Network_GroupVersionKind = CRDGroupVersion.WithKind(Network_Kind)
)

func init() {
	SchemeBuilder.Register(&Network{}, &NetworkList{})
}
