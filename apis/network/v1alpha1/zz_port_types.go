// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllowedAddressPairsInitParameters struct {

	// required string →  The additional IP address.
	// The additional IP address.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// optional string →  The additional MAC address.
	// The additional MAC address.
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`
}

type AllowedAddressPairsObservation struct {

	// required string →  The additional IP address.
	// The additional IP address.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// optional string →  The additional MAC address.
	// The additional MAC address.
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`
}

type AllowedAddressPairsParameters struct {

	// required string →  The additional IP address.
	// The additional IP address.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress" tf:"ip_address,omitempty"`

	// optional string →  The additional MAC address.
	// The additional MAC address.
	// +kubebuilder:validation:Optional
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`
}

type ExtraDHCPOptionInitParameters struct {

	// required string →  Name of the DHCP option.
	// Name of the DHCP option.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// required string →  Value of the DHCP option.
	// Value of the DHCP option.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ExtraDHCPOptionObservation struct {

	// required string →  Name of the DHCP option.
	// Name of the DHCP option.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// required string →  Value of the DHCP option.
	// Value of the DHCP option.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ExtraDHCPOptionParameters struct {

	// required string →  Name of the DHCP option.
	// Name of the DHCP option.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// required string →  Value of the DHCP option.
	// Value of the DHCP option.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

type FixedIPInitParameters struct {

	// required string →  The additional IP address.
	// IP address desired in the subnet for this port. If you don't specify `ip_address`, an available IP address from the specified subnet will be allocated to this port. This field will not be populated if it is left blank or omitted. To retrieve the assigned IP address, use the `all_fixed_ips` attribute.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`
}

type FixedIPObservation struct {

	// required string →  The additional IP address.
	// IP address desired in the subnet for this port. If you don't specify `ip_address`, an available IP address from the specified subnet will be allocated to this port. This field will not be populated if it is left blank or omitted. To retrieve the assigned IP address, use the `all_fixed_ips` attribute.
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// required string →  Subnet in which to allocate IP address for this port.
	// Subnet in which to allocate IP address for this port.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type FixedIPParameters struct {

	// required string →  The additional IP address.
	// IP address desired in the subnet for this port. If you don't specify `ip_address`, an available IP address from the specified subnet will be allocated to this port. This field will not be populated if it is left blank or omitted. To retrieve the assigned IP address, use the `all_fixed_ips` attribute.
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// required string →  Subnet in which to allocate IP address for this port.
	// Subnet in which to allocate IP address for this port.
	// +crossplane:generate:reference:type=Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type PortInitParameters struct {

	// optional boolean →  Administrative up/down status for the port (must be true or false if provided). Changing this updates the admin_state_up of an existing port.
	// Administrative up/down status for the port (must be `true` or `false` if provided). Changing this updates the `admin_state_up` of an existing port.
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// optional →  An IP/MAC Address pair of additional IP addresses that can be active on this port. The structure is described below.
	// An IP/MAC Address pair of additional IP addresses that can be active on this port. The structure is described below.
	AllowedAddressPairs []AllowedAddressPairsInitParameters `json:"allowedAddressPairs,omitempty" tf:"allowed_address_pairs,omitempty"`

	// optional string →  The port DNS name.
	// The port DNS name.
	DNSName *string `json:"dnsName,omitempty" tf:"dns_name,omitempty"`

	// readable description of the port. Changing this updates the description of an existing port.
	// Human-readable description of the port. Changing this updates the `description` of an existing port.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// optional string →  The ID of the device attached to the port. Changing this creates a new port.
	// The ID of the device attached to the port. Changing this creates a new port.
	DeviceID *string `json:"deviceId,omitempty" tf:"device_id,omitempty"`

	// optional string →  The device owner of the port. Changing this creates a new port.
	// The device owner of the port. Changing this creates a new port.
	DeviceOwner *string `json:"deviceOwner,omitempty" tf:"device_owner,omitempty"`

	// optional →  An extra DHCP option that needs to be configured on the port. The structure is described below. Can be specified multiple times.
	// An extra DHCP option that needs to be configured on the port. The structure is described below. Can be specified multiple times.
	ExtraDHCPOption []ExtraDHCPOptionInitParameters `json:"extraDhcpOption,omitempty" tf:"extra_dhcp_option,omitempty"`

	// optional →  (Conflicts with no_fixed_ip) An array of desired IPs for this port. The structure is described below.
	// (Conflicts with `no_fixed_ip`) An array of desired IPs for this port. The structure is described below.
	FixedIP []FixedIPInitParameters `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	// optional string →  The additional MAC address.
	// Specify a specific MAC address for the port. Changing this creates a new port.
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// required string →  Name of the DHCP option.
	// A unique name for the port. Changing this updates the `name` of an existing port.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional boolean →  (Conflicts with fixed_ip) Create a port with no fixed IP address. This will also remove any fixed IPs previously set on a port. true is the only valid value for this argument.
	// (Conflicts with `fixed_ip`) Create a port with no fixed IP address. This will also remove any fixed IPs previously set on a port. `true` is the only valid value for this argument.
	NoFixedIP *bool `json:"noFixedIp,omitempty" tf:"no_fixed_ip,omitempty"`

	// optional boolean →  (Conflicts with security_group_ids) If set to true, then no security groups are applied to the port. If set to false and no security_group_ids are specified, then the port will yield to the default behavior of the Networking service, which is to usually apply the "default" security group.
	// (Conflicts with `security_group_ids`) If set to `true`, then no security groups are applied to the port. If set to `false` and no `security_group_ids` are specified, then the port will yield to the default behavior of the Networking service, which is to usually apply the "default" security group.
	NoSecurityGroups *bool `json:"noSecurityGroups,omitempty" tf:"no_security_groups,omitempty"`

	// optional boolean →  Whether to explicitly enable or disable port security on the port. Port Security is usually enabled by default, so omitting argument will usually result in a value of true. Setting this explicitly to false will disable port security. In order to disable port security, the port must not have any security groups. Valid values are true and false.
	// Whether to explicitly enable or disable port security on the port. Port Security is usually enabled by default, so omitting argument will usually result in a value of `true`. Setting this explicitly to `false` will disable port security. In order to disable port security, the port must not have any security groups. Valid values are `true` and `false`.
	PortSecurityEnabled *bool `json:"portSecurityEnabled,omitempty" tf:"port_security_enabled,omitempty"`

	// optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a port. If omitted, the region argument of the provider is used. Changing this creates a new port.
	// The region in which to obtain the Networking client. A Networking client is needed to create a port. If omitted, the `region` argument of the provider is used. Changing this creates a new port.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	Sdn *string `json:"sdn,omitempty" tf:"sdn,omitempty"`

	// optional set of string →  A set of string tags for the port.
	// A set of string tags for the port.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// optional map of string →  Map of additional options.
	// Map of additional options.
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

type PortObservation struct {

	// optional boolean →  Administrative up/down status for the port (must be true or false if provided). Changing this updates the admin_state_up of an existing port.
	// Administrative up/down status for the port (must be `true` or `false` if provided). Changing this updates the `admin_state_up` of an existing port.
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// string →  The collection of Fixed IP addresses on the port in the order returned by the Network v2 API.
	// The collection of Fixed IP addresses on the port in the order returned by the Network v2 API.
	AllFixedIps []*string `json:"allFixedIps,omitempty" tf:"all_fixed_ips,omitempty"`

	// set of string →  The collection of Security Group IDs on the port which have been explicitly and implicitly added.
	// The collection of Security Group IDs on the port which have been explicitly and implicitly added.
	AllSecurityGroupIds []*string `json:"allSecurityGroupIds,omitempty" tf:"all_security_group_ids,omitempty"`

	// set of string →  The collection of tags assigned on the port, which have been explicitly and implicitly added.
	// The collection of tags assigned on the port, which have been explicitly and implicitly added.
	AllTags []*string `json:"allTags,omitempty" tf:"all_tags,omitempty"`

	// optional →  An IP/MAC Address pair of additional IP addresses that can be active on this port. The structure is described below.
	// An IP/MAC Address pair of additional IP addresses that can be active on this port. The structure is described below.
	AllowedAddressPairs []AllowedAddressPairsObservation `json:"allowedAddressPairs,omitempty" tf:"allowed_address_pairs,omitempty"`

	// map of string →  The list of maps representing port DNS assignments.
	// The list of maps representing port DNS assignments.
	DNSAssignment []map[string]*string `json:"dnsAssignment,omitempty" tf:"dns_assignment,omitempty"`

	// optional string →  The port DNS name.
	// The port DNS name.
	DNSName *string `json:"dnsName,omitempty" tf:"dns_name,omitempty"`

	// readable description of the port. Changing this updates the description of an existing port.
	// Human-readable description of the port. Changing this updates the `description` of an existing port.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// optional string →  The ID of the device attached to the port. Changing this creates a new port.
	// The ID of the device attached to the port. Changing this creates a new port.
	DeviceID *string `json:"deviceId,omitempty" tf:"device_id,omitempty"`

	// optional string →  The device owner of the port. Changing this creates a new port.
	// The device owner of the port. Changing this creates a new port.
	DeviceOwner *string `json:"deviceOwner,omitempty" tf:"device_owner,omitempty"`

	// optional →  An extra DHCP option that needs to be configured on the port. The structure is described below. Can be specified multiple times.
	// An extra DHCP option that needs to be configured on the port. The structure is described below. Can be specified multiple times.
	ExtraDHCPOption []ExtraDHCPOptionObservation `json:"extraDhcpOption,omitempty" tf:"extra_dhcp_option,omitempty"`

	// optional →  (Conflicts with no_fixed_ip) An array of desired IPs for this port. The structure is described below.
	// (Conflicts with `no_fixed_ip`) An array of desired IPs for this port. The structure is described below.
	FixedIP []FixedIPObservation `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	// string →  ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// optional string →  The additional MAC address.
	// Specify a specific MAC address for the port. Changing this creates a new port.
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// required string →  Name of the DHCP option.
	// A unique name for the port. Changing this updates the `name` of an existing port.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// required string →  The ID of the network to attach the port to. Changing this creates a new port.
	// The ID of the network to attach the port to. Changing this creates a new port.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// optional boolean →  (Conflicts with fixed_ip) Create a port with no fixed IP address. This will also remove any fixed IPs previously set on a port. true is the only valid value for this argument.
	// (Conflicts with `fixed_ip`) Create a port with no fixed IP address. This will also remove any fixed IPs previously set on a port. `true` is the only valid value for this argument.
	NoFixedIP *bool `json:"noFixedIp,omitempty" tf:"no_fixed_ip,omitempty"`

	// optional boolean →  (Conflicts with security_group_ids) If set to true, then no security groups are applied to the port. If set to false and no security_group_ids are specified, then the port will yield to the default behavior of the Networking service, which is to usually apply the "default" security group.
	// (Conflicts with `security_group_ids`) If set to `true`, then no security groups are applied to the port. If set to `false` and no `security_group_ids` are specified, then the port will yield to the default behavior of the Networking service, which is to usually apply the "default" security group.
	NoSecurityGroups *bool `json:"noSecurityGroups,omitempty" tf:"no_security_groups,omitempty"`

	// optional boolean →  Whether to explicitly enable or disable port security on the port. Port Security is usually enabled by default, so omitting argument will usually result in a value of true. Setting this explicitly to false will disable port security. In order to disable port security, the port must not have any security groups. Valid values are true and false.
	// Whether to explicitly enable or disable port security on the port. Port Security is usually enabled by default, so omitting argument will usually result in a value of `true`. Setting this explicitly to `false` will disable port security. In order to disable port security, the port must not have any security groups. Valid values are `true` and `false`.
	PortSecurityEnabled *bool `json:"portSecurityEnabled,omitempty" tf:"port_security_enabled,omitempty"`

	// optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a port. If omitted, the region argument of the provider is used. Changing this creates a new port.
	// The region in which to obtain the Networking client. A Networking client is needed to create a port. If omitted, the `region` argument of the provider is used. Changing this creates a new port.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	Sdn *string `json:"sdn,omitempty" tf:"sdn,omitempty"`

	// optional set of string →  (Conflicts with no_security_groups) A list of security group IDs to apply to the port. The security groups must be specified by ID and not name (as opposed to how they are configured with the Compute Instance).
	// (Conflicts with `no_security_groups`) A list of security group IDs to apply to the port. The security groups must be specified by ID and not name (as opposed to how they are configured with the Compute Instance).
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// optional set of string →  A set of string tags for the port.
	// A set of string tags for the port.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// optional map of string →  Map of additional options.
	// Map of additional options.
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

type PortParameters struct {

	// optional boolean →  Administrative up/down status for the port (must be true or false if provided). Changing this updates the admin_state_up of an existing port.
	// Administrative up/down status for the port (must be `true` or `false` if provided). Changing this updates the `admin_state_up` of an existing port.
	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// optional →  An IP/MAC Address pair of additional IP addresses that can be active on this port. The structure is described below.
	// An IP/MAC Address pair of additional IP addresses that can be active on this port. The structure is described below.
	// +kubebuilder:validation:Optional
	AllowedAddressPairs []AllowedAddressPairsParameters `json:"allowedAddressPairs,omitempty" tf:"allowed_address_pairs,omitempty"`

	// optional string →  The port DNS name.
	// The port DNS name.
	// +kubebuilder:validation:Optional
	DNSName *string `json:"dnsName,omitempty" tf:"dns_name,omitempty"`

	// readable description of the port. Changing this updates the description of an existing port.
	// Human-readable description of the port. Changing this updates the `description` of an existing port.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// optional string →  The ID of the device attached to the port. Changing this creates a new port.
	// The ID of the device attached to the port. Changing this creates a new port.
	// +kubebuilder:validation:Optional
	DeviceID *string `json:"deviceId,omitempty" tf:"device_id,omitempty"`

	// optional string →  The device owner of the port. Changing this creates a new port.
	// The device owner of the port. Changing this creates a new port.
	// +kubebuilder:validation:Optional
	DeviceOwner *string `json:"deviceOwner,omitempty" tf:"device_owner,omitempty"`

	// optional →  An extra DHCP option that needs to be configured on the port. The structure is described below. Can be specified multiple times.
	// An extra DHCP option that needs to be configured on the port. The structure is described below. Can be specified multiple times.
	// +kubebuilder:validation:Optional
	ExtraDHCPOption []ExtraDHCPOptionParameters `json:"extraDhcpOption,omitempty" tf:"extra_dhcp_option,omitempty"`

	// optional →  (Conflicts with no_fixed_ip) An array of desired IPs for this port. The structure is described below.
	// (Conflicts with `no_fixed_ip`) An array of desired IPs for this port. The structure is described below.
	// +kubebuilder:validation:Optional
	FixedIP []FixedIPParameters `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	// optional string →  The additional MAC address.
	// Specify a specific MAC address for the port. Changing this creates a new port.
	// +kubebuilder:validation:Optional
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// required string →  Name of the DHCP option.
	// A unique name for the port. Changing this updates the `name` of an existing port.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// required string →  The ID of the network to attach the port to. Changing this creates a new port.
	// The ID of the network to attach the port to. Changing this creates a new port.
	// +crossplane:generate:reference:type=Network
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// optional boolean →  (Conflicts with fixed_ip) Create a port with no fixed IP address. This will also remove any fixed IPs previously set on a port. true is the only valid value for this argument.
	// (Conflicts with `fixed_ip`) Create a port with no fixed IP address. This will also remove any fixed IPs previously set on a port. `true` is the only valid value for this argument.
	// +kubebuilder:validation:Optional
	NoFixedIP *bool `json:"noFixedIp,omitempty" tf:"no_fixed_ip,omitempty"`

	// optional boolean →  (Conflicts with security_group_ids) If set to true, then no security groups are applied to the port. If set to false and no security_group_ids are specified, then the port will yield to the default behavior of the Networking service, which is to usually apply the "default" security group.
	// (Conflicts with `security_group_ids`) If set to `true`, then no security groups are applied to the port. If set to `false` and no `security_group_ids` are specified, then the port will yield to the default behavior of the Networking service, which is to usually apply the "default" security group.
	// +kubebuilder:validation:Optional
	NoSecurityGroups *bool `json:"noSecurityGroups,omitempty" tf:"no_security_groups,omitempty"`

	// optional boolean →  Whether to explicitly enable or disable port security on the port. Port Security is usually enabled by default, so omitting argument will usually result in a value of true. Setting this explicitly to false will disable port security. In order to disable port security, the port must not have any security groups. Valid values are true and false.
	// Whether to explicitly enable or disable port security on the port. Port Security is usually enabled by default, so omitting argument will usually result in a value of `true`. Setting this explicitly to `false` will disable port security. In order to disable port security, the port must not have any security groups. Valid values are `true` and `false`.
	// +kubebuilder:validation:Optional
	PortSecurityEnabled *bool `json:"portSecurityEnabled,omitempty" tf:"port_security_enabled,omitempty"`

	// optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a port. If omitted, the region argument of the provider is used. Changing this creates a new port.
	// The region in which to obtain the Networking client. A Networking client is needed to create a port. If omitted, the `region` argument of the provider is used. Changing this creates a new port.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// +kubebuilder:validation:Optional
	Sdn *string `json:"sdn,omitempty" tf:"sdn,omitempty"`

	// optional set of string →  (Conflicts with no_security_groups) A list of security group IDs to apply to the port. The security groups must be specified by ID and not name (as opposed to how they are configured with the Compute Instance).
	// (Conflicts with `no_security_groups`) A list of security group IDs to apply to the port. The security groups must be specified by ID and not name (as opposed to how they are configured with the Compute Instance).
	// +crossplane:generate:reference:type=SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// References to SecurityGroup to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsRefs []v1.Reference `json:"securityGroupIdsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsSelector *v1.Selector `json:"securityGroupIdsSelector,omitempty" tf:"-"`

	// optional set of string →  A set of string tags for the port.
	// A set of string tags for the port.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// optional map of string →  Map of additional options.
	// Map of additional options.
	// +kubebuilder:validation:Optional
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

// PortSpec defines the desired state of Port
type PortSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PortParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PortInitParameters `json:"initProvider,omitempty"`
}

// PortStatus defines the observed state of Port.
type PortStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PortObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Port is the Schema for the Ports API. Manages a port resource within VKCS.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vkcs}
type Port struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PortSpec   `json:"spec"`
	Status            PortStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PortList contains a list of Ports
type PortList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Port `json:"items"`
}

// Repository type metadata.
var (
	Port_Kind             = "Port"
	Port_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Port_Kind}.String()
	Port_KindAPIVersion   = Port_Kind + "." + CRDGroupVersion.String()
	Port_GroupVersionKind = CRDGroupVersion.WithKind(Port_Kind)
)

func init() {
	SchemeBuilder.Register(&Port{}, &PortList{})
}
