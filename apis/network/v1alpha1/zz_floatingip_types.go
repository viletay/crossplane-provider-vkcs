// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FloatingIPInitParameters struct {

	// optional string →  The actual floating IP address itself.
	// The actual floating IP address itself.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// readable description for the floating IP.
	// Human-readable description for the floating IP.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// optional string →  Fixed IP of the port to associate with this floating IP. Required if the port has multiple fixed IPs.
	// Fixed IP of the port to associate with this floating IP. Required if the port has multiple fixed IPs.
	FixedIP *string `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	// optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a floating IP that can be used with another networking resource, such as a load balancer. If omitted, the region argument of the provider is used. Changing this creates a new floating IP (which may or may not have a different address).
	// The region in which to obtain the Networking client. A Networking client is needed to create a floating IP that can be used with another networking resource, such as a load balancer. If omitted, the `region` argument of the provider is used. Changing this creates a new floating IP (which may or may not have a different address).
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	Sdn *string `json:"sdn,omitempty" tf:"sdn,omitempty"`

	// optional map of string →  Map of additional options.
	// Map of additional options.
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

type FloatingIPObservation struct {

	// optional string →  The actual floating IP address itself.
	// The actual floating IP address itself.
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// readable description for the floating IP.
	// Human-readable description for the floating IP.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// optional string →  Fixed IP of the port to associate with this floating IP. Required if the port has multiple fixed IPs.
	// Fixed IP of the port to associate with this floating IP. Required if the port has multiple fixed IPs.
	FixedIP *string `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	// string →  ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// required string →  The name of the pool from which to obtain the floating IP. Changing this creates a new floating IP.
	// The name of the pool from which to obtain the floating IP. Changing this creates a new floating IP.
	Pool *string `json:"pool,omitempty" tf:"pool,omitempty"`

	// optional string →  ID of an existing port with at least one IP address to associate with this floating IP.
	// ID of an existing port with at least one IP address to associate with this floating IP.
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a floating IP that can be used with another networking resource, such as a load balancer. If omitted, the region argument of the provider is used. Changing this creates a new floating IP (which may or may not have a different address).
	// The region in which to obtain the Networking client. A Networking client is needed to create a floating IP that can be used with another networking resource, such as a load balancer. If omitted, the `region` argument of the provider is used. Changing this creates a new floating IP (which may or may not have a different address).
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	Sdn *string `json:"sdn,omitempty" tf:"sdn,omitempty"`

	// optional string →  The subnet ID of the floating IP pool. Specify this if the floating IP network has multiple subnets.
	// The subnet ID of the floating IP pool. Specify this if the floating IP network has multiple subnets.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// optional string →  A list of external subnet IDs to try over each to allocate a floating IP address. If a subnet ID in a list has exhausted floating IP pool, the next subnet ID will be tried. This argument is used only during the resource creation. Conflicts with a subnet_id argument.
	// A list of external subnet IDs to try over each to allocate a floating IP address. If a subnet ID in a list has exhausted floating IP pool, the next subnet ID will be tried. This argument is used only during the resource creation. Conflicts with a `subnet_id` argument.
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// optional map of string →  Map of additional options.
	// Map of additional options.
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

type FloatingIPParameters struct {

	// optional string →  The actual floating IP address itself.
	// The actual floating IP address itself.
	// +kubebuilder:validation:Optional
	Address *string `json:"address,omitempty" tf:"address,omitempty"`

	// readable description for the floating IP.
	// Human-readable description for the floating IP.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// optional string →  Fixed IP of the port to associate with this floating IP. Required if the port has multiple fixed IPs.
	// Fixed IP of the port to associate with this floating IP. Required if the port has multiple fixed IPs.
	// +kubebuilder:validation:Optional
	FixedIP *string `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	// required string →  The name of the pool from which to obtain the floating IP. Changing this creates a new floating IP.
	// The name of the pool from which to obtain the floating IP. Changing this creates a new floating IP.
	// +crossplane:generate:reference:type=Network
	// +crossplane:generate:reference:extractor=github.com/viletay/provider-vkcs/config/network.ExtractSpecName()
	// +kubebuilder:validation:Optional
	Pool *string `json:"pool,omitempty" tf:"pool,omitempty"`

	// Reference to a Network to populate pool.
	// +kubebuilder:validation:Optional
	PoolRef *v1.Reference `json:"poolRef,omitempty" tf:"-"`

	// Selector for a Network to populate pool.
	// +kubebuilder:validation:Optional
	PoolSelector *v1.Selector `json:"poolSelector,omitempty" tf:"-"`

	// optional string →  ID of an existing port with at least one IP address to associate with this floating IP.
	// ID of an existing port with at least one IP address to associate with this floating IP.
	// +crossplane:generate:reference:type=Port
	// +kubebuilder:validation:Optional
	PortID *string `json:"portId,omitempty" tf:"port_id,omitempty"`

	// Reference to a Port to populate portId.
	// +kubebuilder:validation:Optional
	PortIDRef *v1.Reference `json:"portIdRef,omitempty" tf:"-"`

	// Selector for a Port to populate portId.
	// +kubebuilder:validation:Optional
	PortIDSelector *v1.Selector `json:"portIdSelector,omitempty" tf:"-"`

	// optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a floating IP that can be used with another networking resource, such as a load balancer. If omitted, the region argument of the provider is used. Changing this creates a new floating IP (which may or may not have a different address).
	// The region in which to obtain the Networking client. A Networking client is needed to create a floating IP that can be used with another networking resource, such as a load balancer. If omitted, the `region` argument of the provider is used. Changing this creates a new floating IP (which may or may not have a different address).
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// +kubebuilder:validation:Optional
	Sdn *string `json:"sdn,omitempty" tf:"sdn,omitempty"`

	// optional string →  The subnet ID of the floating IP pool. Specify this if the floating IP network has multiple subnets.
	// The subnet ID of the floating IP pool. Specify this if the floating IP network has multiple subnets.
	// +crossplane:generate:reference:type=Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// optional string →  A list of external subnet IDs to try over each to allocate a floating IP address. If a subnet ID in a list has exhausted floating IP pool, the next subnet ID will be tried. This argument is used only during the resource creation. Conflicts with a subnet_id argument.
	// A list of external subnet IDs to try over each to allocate a floating IP address. If a subnet ID in a list has exhausted floating IP pool, the next subnet ID will be tried. This argument is used only during the resource creation. Conflicts with a `subnet_id` argument.
	// +crossplane:generate:reference:type=Subnet
	// +kubebuilder:validation:Optional
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`

	// References to Subnet to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIdsRefs []v1.Reference `json:"subnetIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Subnet to populate subnetIds.
	// +kubebuilder:validation:Optional
	SubnetIdsSelector *v1.Selector `json:"subnetIdsSelector,omitempty" tf:"-"`

	// optional map of string →  Map of additional options.
	// Map of additional options.
	// +kubebuilder:validation:Optional
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

// FloatingIPSpec defines the desired state of FloatingIP
type FloatingIPSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FloatingIPParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FloatingIPInitParameters `json:"initProvider,omitempty"`
}

// FloatingIPStatus defines the observed state of FloatingIP.
type FloatingIPStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FloatingIPObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FloatingIP is the Schema for the FloatingIPs API. Manages a floating IP resource within VKCS.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vkcs}
type FloatingIP struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FloatingIPSpec   `json:"spec"`
	Status            FloatingIPStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FloatingIPList contains a list of FloatingIPs
type FloatingIPList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FloatingIP `json:"items"`
}

// Repository type metadata.
var (
	FloatingIP_Kind             = "FloatingIP"
	FloatingIP_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FloatingIP_Kind}.String()
	FloatingIP_KindAPIVersion   = FloatingIP_Kind + "." + CRDGroupVersion.String()
	FloatingIP_GroupVersionKind = CRDGroupVersion.WithKind(FloatingIP_Kind)
)

func init() {
	SchemeBuilder.Register(&FloatingIP{}, &FloatingIPList{})
}
