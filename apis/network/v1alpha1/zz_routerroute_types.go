// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RouterRouteInitParameters struct {

	// required string →  CIDR block to match on the packet’s destination IP. Changing this creates a new routing entry.
	// CIDR block to match on the packet’s destination IP. Changing this creates a new routing entry.
	DestinationCidr *string `json:"destinationCidr,omitempty" tf:"destination_cidr,omitempty"`

	// required string →  IP address of the next hop gateway. Changing this creates a new routing entry.
	// IP address of the next hop gateway. Changing this creates a new routing entry.
	NextHop *string `json:"nextHop,omitempty" tf:"next_hop,omitempty"`

	// optional string →  The region in which to obtain the networking client. A networking client is needed to configure a routing entry on a router. If omitted, the region argument of the provider is used. Changing this creates a new routing entry.
	// The region in which to obtain the networking client. A networking client is needed to configure a routing entry on a router. If omitted, the `region` argument of the provider is used. Changing this creates a new routing entry.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	Sdn *string `json:"sdn,omitempty" tf:"sdn,omitempty"`
}

type RouterRouteObservation struct {

	// required string →  CIDR block to match on the packet’s destination IP. Changing this creates a new routing entry.
	// CIDR block to match on the packet’s destination IP. Changing this creates a new routing entry.
	DestinationCidr *string `json:"destinationCidr,omitempty" tf:"destination_cidr,omitempty"`

	// string →  ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// required string →  IP address of the next hop gateway. Changing this creates a new routing entry.
	// IP address of the next hop gateway. Changing this creates a new routing entry.
	NextHop *string `json:"nextHop,omitempty" tf:"next_hop,omitempty"`

	// optional string →  The region in which to obtain the networking client. A networking client is needed to configure a routing entry on a router. If omitted, the region argument of the provider is used. Changing this creates a new routing entry.
	// The region in which to obtain the networking client. A networking client is needed to configure a routing entry on a router. If omitted, the `region` argument of the provider is used. Changing this creates a new routing entry.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// required string →  ID of the router this routing entry belongs to. Changing this creates a new routing entry.
	// ID of the router this routing entry belongs to. Changing this creates a new routing entry.
	RouterID *string `json:"routerId,omitempty" tf:"router_id,omitempty"`

	// optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	Sdn *string `json:"sdn,omitempty" tf:"sdn,omitempty"`
}

type RouterRouteParameters struct {

	// required string →  CIDR block to match on the packet’s destination IP. Changing this creates a new routing entry.
	// CIDR block to match on the packet’s destination IP. Changing this creates a new routing entry.
	// +kubebuilder:validation:Optional
	DestinationCidr *string `json:"destinationCidr,omitempty" tf:"destination_cidr,omitempty"`

	// required string →  IP address of the next hop gateway. Changing this creates a new routing entry.
	// IP address of the next hop gateway. Changing this creates a new routing entry.
	// +kubebuilder:validation:Optional
	NextHop *string `json:"nextHop,omitempty" tf:"next_hop,omitempty"`

	// optional string →  The region in which to obtain the networking client. A networking client is needed to configure a routing entry on a router. If omitted, the region argument of the provider is used. Changing this creates a new routing entry.
	// The region in which to obtain the networking client. A networking client is needed to configure a routing entry on a router. If omitted, the `region` argument of the provider is used. Changing this creates a new routing entry.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// required string →  ID of the router this routing entry belongs to. Changing this creates a new routing entry.
	// ID of the router this routing entry belongs to. Changing this creates a new routing entry.
	// +crossplane:generate:reference:type=Router
	// +kubebuilder:validation:Optional
	RouterID *string `json:"routerId,omitempty" tf:"router_id,omitempty"`

	// Reference to a Router to populate routerId.
	// +kubebuilder:validation:Optional
	RouterIDRef *v1.Reference `json:"routerIdRef,omitempty" tf:"-"`

	// Selector for a Router to populate routerId.
	// +kubebuilder:validation:Optional
	RouterIDSelector *v1.Selector `json:"routerIdSelector,omitempty" tf:"-"`

	// optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// +kubebuilder:validation:Optional
	Sdn *string `json:"sdn,omitempty" tf:"sdn,omitempty"`
}

// RouterRouteSpec defines the desired state of RouterRoute
type RouterRouteSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouterRouteParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RouterRouteInitParameters `json:"initProvider,omitempty"`
}

// RouterRouteStatus defines the observed state of RouterRoute.
type RouterRouteStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouterRouteObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RouterRoute is the Schema for the RouterRoutes API. Creates a routing entry on a VKCS router.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vkcs}
type RouterRoute struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.destinationCidr) || (has(self.initProvider) && has(self.initProvider.destinationCidr))",message="spec.forProvider.destinationCidr is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nextHop) || (has(self.initProvider) && has(self.initProvider.nextHop))",message="spec.forProvider.nextHop is a required parameter"
	Spec   RouterRouteSpec   `json:"spec"`
	Status RouterRouteStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouterRouteList contains a list of RouterRoutes
type RouterRouteList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouterRoute `json:"items"`
}

// Repository type metadata.
var (
	RouterRoute_Kind             = "RouterRoute"
	RouterRoute_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RouterRoute_Kind}.String()
	RouterRoute_KindAPIVersion   = RouterRoute_Kind + "." + CRDGroupVersion.String()
	RouterRoute_GroupVersionKind = CRDGroupVersion.WithKind(RouterRoute_Kind)
)

func init() {
	SchemeBuilder.Register(&RouterRoute{}, &RouterRouteList{})
}
