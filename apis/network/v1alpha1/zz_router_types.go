// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RouterInitParameters struct {

	// optional boolean →  Administrative up/down status for the router (must be "true" or "false" if provided). Changing this updates the admin_state_up of an existing router.
	// Administrative up/down status for the router (must be "true" or "false" if provided). Changing this updates the `admin_state_up` of an existing router.
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// readable description for the router.
	// Human-readable description for the router.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// optional string →  A unique name for the router. Changing this updates the name of an existing router.
	// A unique name for the router. Changing this updates the `name` of an existing router.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional string →  The region in which to obtain the networking client. A networking client is needed to create a router. If omitted, the region argument of the provider is used. Changing this creates a new router.
	// The region in which to obtain the networking client. A networking client is needed to create a router. If omitted, the `region` argument of the provider is used. Changing this creates a new router.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	Sdn *string `json:"sdn,omitempty" tf:"sdn,omitempty"`

	// optional set of string →  A set of string tags for the router.
	// A set of string tags for the router.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// specific options.
	// Map of additional driver-specific options.
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`

	// specific options. Supported options are described below.
	// Map of additional vendor-specific options. Supported options are described below.
	VendorOptions []VendorOptionsInitParameters `json:"vendorOptions,omitempty" tf:"vendor_options,omitempty"`
}

type RouterObservation struct {

	// optional boolean →  Administrative up/down status for the router (must be "true" or "false" if provided). Changing this updates the admin_state_up of an existing router.
	// Administrative up/down status for the router (must be "true" or "false" if provided). Changing this updates the `admin_state_up` of an existing router.
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// set of string →  The collection of tags assigned on the router, which have been explicitly and implicitly added.
	// The collection of tags assigned on the router, which have been explicitly and implicitly added.
	AllTags []*string `json:"allTags,omitempty" tf:"all_tags,omitempty"`

	// readable description for the router.
	// Human-readable description for the router.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// optional string →  The network UUID of an external gateway for the router. A router with an external gateway is required if any compute instances or load balancers will be using floating IPs. Changing this updates the external gateway of the router.
	// The network UUID of an external gateway for the router. A router with an external gateway is required if any compute instances or load balancers will be using floating IPs. Changing this updates the external gateway of the router.
	ExternalNetworkID *string `json:"externalNetworkId,omitempty" tf:"external_network_id,omitempty"`

	// string →  ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// optional string →  A unique name for the router. Changing this updates the name of an existing router.
	// A unique name for the router. Changing this updates the `name` of an existing router.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional string →  The region in which to obtain the networking client. A networking client is needed to create a router. If omitted, the region argument of the provider is used. Changing this creates a new router.
	// The region in which to obtain the networking client. A networking client is needed to create a router. If omitted, the `region` argument of the provider is used. Changing this creates a new router.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	Sdn *string `json:"sdn,omitempty" tf:"sdn,omitempty"`

	// optional set of string →  A set of string tags for the router.
	// A set of string tags for the router.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// specific options.
	// Map of additional driver-specific options.
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`

	// specific options. Supported options are described below.
	// Map of additional vendor-specific options. Supported options are described below.
	VendorOptions []VendorOptionsObservation `json:"vendorOptions,omitempty" tf:"vendor_options,omitempty"`
}

type RouterParameters struct {

	// optional boolean →  Administrative up/down status for the router (must be "true" or "false" if provided). Changing this updates the admin_state_up of an existing router.
	// Administrative up/down status for the router (must be "true" or "false" if provided). Changing this updates the `admin_state_up` of an existing router.
	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// readable description for the router.
	// Human-readable description for the router.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// optional string →  The network UUID of an external gateway for the router. A router with an external gateway is required if any compute instances or load balancers will be using floating IPs. Changing this updates the external gateway of the router.
	// The network UUID of an external gateway for the router. A router with an external gateway is required if any compute instances or load balancers will be using floating IPs. Changing this updates the external gateway of the router.
	// +crossplane:generate:reference:type=Network
	// +kubebuilder:validation:Optional
	ExternalNetworkID *string `json:"externalNetworkId,omitempty" tf:"external_network_id,omitempty"`

	// Reference to a Network to populate externalNetworkId.
	// +kubebuilder:validation:Optional
	ExternalNetworkIDRef *v1.Reference `json:"externalNetworkIdRef,omitempty" tf:"-"`

	// Selector for a Network to populate externalNetworkId.
	// +kubebuilder:validation:Optional
	ExternalNetworkIDSelector *v1.Selector `json:"externalNetworkIdSelector,omitempty" tf:"-"`

	// optional string →  A unique name for the router. Changing this updates the name of an existing router.
	// A unique name for the router. Changing this updates the `name` of an existing router.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional string →  The region in which to obtain the networking client. A networking client is needed to create a router. If omitted, the region argument of the provider is used. Changing this creates a new router.
	// The region in which to obtain the networking client. A networking client is needed to create a router. If omitted, the `region` argument of the provider is used. Changing this creates a new router.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// +kubebuilder:validation:Optional
	Sdn *string `json:"sdn,omitempty" tf:"sdn,omitempty"`

	// optional set of string →  A set of string tags for the router.
	// A set of string tags for the router.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// specific options.
	// Map of additional driver-specific options.
	// +kubebuilder:validation:Optional
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`

	// specific options. Supported options are described below.
	// Map of additional vendor-specific options. Supported options are described below.
	// +kubebuilder:validation:Optional
	VendorOptions []VendorOptionsParameters `json:"vendorOptions,omitempty" tf:"vendor_options,omitempty"`
}

type VendorOptionsInitParameters struct {

	// optional boolean →  Boolean to control whether the Router gateway is assigned during creation or updated after creation.
	// Boolean to control whether the Router gateway is assigned during creation or updated after creation.
	SetRouterGatewayAfterCreate *bool `json:"setRouterGatewayAfterCreate,omitempty" tf:"set_router_gateway_after_create,omitempty"`
}

type VendorOptionsObservation struct {

	// optional boolean →  Boolean to control whether the Router gateway is assigned during creation or updated after creation.
	// Boolean to control whether the Router gateway is assigned during creation or updated after creation.
	SetRouterGatewayAfterCreate *bool `json:"setRouterGatewayAfterCreate,omitempty" tf:"set_router_gateway_after_create,omitempty"`
}

type VendorOptionsParameters struct {

	// optional boolean →  Boolean to control whether the Router gateway is assigned during creation or updated after creation.
	// Boolean to control whether the Router gateway is assigned during creation or updated after creation.
	// +kubebuilder:validation:Optional
	SetRouterGatewayAfterCreate *bool `json:"setRouterGatewayAfterCreate,omitempty" tf:"set_router_gateway_after_create,omitempty"`
}

// RouterSpec defines the desired state of Router
type RouterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouterParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RouterInitParameters `json:"initProvider,omitempty"`
}

// RouterStatus defines the observed state of Router.
type RouterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Router is the Schema for the Routers API. Manages a router resource within VKCS.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vkcs}
type Router struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouterSpec   `json:"spec"`
	Status            RouterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouterList contains a list of Routers
type RouterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Router `json:"items"`
}

// Repository type metadata.
var (
	Router_Kind             = "Router"
	Router_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Router_Kind}.String()
	Router_KindAPIVersion   = Router_Kind + "." + CRDGroupVersion.String()
	Router_GroupVersionKind = CRDGroupVersion.WithKind(Router_Kind)
)

func init() {
	SchemeBuilder.Register(&Router{}, &RouterList{})
}
