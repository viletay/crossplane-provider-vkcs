// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllocationPoolInitParameters struct {

	// required string →  The ending address.
	// The ending address.
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	// required string →  The starting address.
	// The starting address.
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type AllocationPoolObservation struct {

	// required string →  The ending address.
	// The ending address.
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	// required string →  The starting address.
	// The starting address.
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type AllocationPoolParameters struct {

	// required string →  The ending address.
	// The ending address.
	// +kubebuilder:validation:Optional
	End *string `json:"end" tf:"end,omitempty"`

	// required string →  The starting address.
	// The starting address.
	// +kubebuilder:validation:Optional
	Start *string `json:"start" tf:"start,omitempty"`
}

type SubnetInitParameters struct {

	// optional →  A block declaring the start and end range of the IP addresses available for use with DHCP in this subnet. Multiple allocation_pool blocks can be declared, providing the subnet with more than one range of IP addresses to use with DHCP. However, each IP range must be from the same CIDR that the subnet is part of. The allocation_pool block is documented below.
	// A block declaring the start and end range of the IP addresses available for use with DHCP in this subnet. Multiple `allocation_pool` blocks can be declared, providing the subnet with more than one range of IP addresses to use with DHCP. However, each IP range must be from the same CIDR that the subnet is part of. The `allocation_pool` block is documented below.
	AllocationPool []AllocationPoolInitParameters `json:"allocationPool,omitempty" tf:"allocation_pool,omitempty"`

	// optional string →  CIDR representing IP range for this subnet, based on IP version. You can omit this option if you are creating a subnet from a subnet pool.
	// CIDR representing IP range for this subnet, based on IP version. You can omit this option if you are creating a subnet from a subnet pool.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// optional string →  An array of DNS name server names used by hosts in this subnet. Changing this updates the DNS name servers for the existing subnet.
	// An array of DNS name server names used by hosts in this subnet. Changing this updates the DNS name servers for the existing subnet.
	DNSNameservers []*string `json:"dnsNameservers,omitempty" tf:"dns_nameservers,omitempty"`

	// readable description of the subnet. Changing this updates the name of the existing subnet.
	// Human-readable description of the subnet. Changing this updates the name of the existing subnet.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// optional boolean →  The administrative state of the network. Acceptable values are "true" and "false". Changing this value enables or disables the DHCP capabilities of the existing subnet. Defaults to true.
	// The administrative state of the network. Acceptable values are "true" and "false". Changing this value enables or disables the DHCP capabilities of the existing subnet. Defaults to true.
	EnableDHCP *bool `json:"enableDhcp,omitempty" tf:"enable_dhcp,omitempty"`

	// optional string →  Default gateway used by devices in this subnet. Leaving this blank and not setting no_gateway will cause a default gateway of .1 to be used. Changing this updates the gateway IP of the existing subnet.
	// Default gateway used by devices in this subnet. Leaving this blank and not setting `no_gateway` will cause a default gateway of `.1` to be used. Changing this updates the gateway IP of the existing subnet.
	GatewayIP *string `json:"gatewayIp,omitempty" tf:"gateway_ip,omitempty"`

	// optional string →  The name of the subnet. Changing this updates the name of the existing subnet.
	// The name of the subnet. Changing this updates the name of the existing subnet.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional boolean →  Do not set a gateway IP on this subnet. Changing this removes or adds a default gateway IP of the existing subnet.
	// Do not set a gateway IP on this subnet. Changing this removes or adds a default gateway IP of the existing subnet.
	NoGateway *bool `json:"noGateway,omitempty" tf:"no_gateway,omitempty"`

	// optional number →  The prefix length to use when creating a subnet from a subnet pool. The default subnet pool prefix length that was defined when creating the subnet pool will be used if not provided. Changing this creates a new subnet.
	// The prefix length to use when creating a subnet from a subnet pool. The default subnet pool prefix length that was defined when creating the subnet pool will be used if not provided. Changing this creates a new subnet.
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a subnet. If omitted, the region argument of the provider is used. Changing this creates a new subnet.
	// The region in which to obtain the Networking client. A Networking client is needed to create a subnet. If omitted, the `region` argument of the provider is used. Changing this creates a new subnet.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	Sdn *string `json:"sdn,omitempty" tf:"sdn,omitempty"`

	// optional string →  The ID of the subnetpool associated with the subnet.
	// The ID of the subnetpool associated with the subnet.
	SubnetpoolID *string `json:"subnetpoolId,omitempty" tf:"subnetpool_id,omitempty"`

	// optional set of string →  A set of string tags for the subnet.
	// A set of string tags for the subnet.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// optional map of string →  Map of additional options.
	// Map of additional options.
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

type SubnetObservation struct {

	// set of string →  The collection of ags assigned on the subnet, which have been explicitly and implicitly added.
	// The collection of ags assigned on the subnet, which have been explicitly and implicitly added.
	AllTags []*string `json:"allTags,omitempty" tf:"all_tags,omitempty"`

	// optional →  A block declaring the start and end range of the IP addresses available for use with DHCP in this subnet. Multiple allocation_pool blocks can be declared, providing the subnet with more than one range of IP addresses to use with DHCP. However, each IP range must be from the same CIDR that the subnet is part of. The allocation_pool block is documented below.
	// A block declaring the start and end range of the IP addresses available for use with DHCP in this subnet. Multiple `allocation_pool` blocks can be declared, providing the subnet with more than one range of IP addresses to use with DHCP. However, each IP range must be from the same CIDR that the subnet is part of. The `allocation_pool` block is documented below.
	AllocationPool []AllocationPoolObservation `json:"allocationPool,omitempty" tf:"allocation_pool,omitempty"`

	// optional string →  CIDR representing IP range for this subnet, based on IP version. You can omit this option if you are creating a subnet from a subnet pool.
	// CIDR representing IP range for this subnet, based on IP version. You can omit this option if you are creating a subnet from a subnet pool.
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// optional string →  An array of DNS name server names used by hosts in this subnet. Changing this updates the DNS name servers for the existing subnet.
	// An array of DNS name server names used by hosts in this subnet. Changing this updates the DNS name servers for the existing subnet.
	DNSNameservers []*string `json:"dnsNameservers,omitempty" tf:"dns_nameservers,omitempty"`

	// readable description of the subnet. Changing this updates the name of the existing subnet.
	// Human-readable description of the subnet. Changing this updates the name of the existing subnet.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// optional boolean →  The administrative state of the network. Acceptable values are "true" and "false". Changing this value enables or disables the DHCP capabilities of the existing subnet. Defaults to true.
	// The administrative state of the network. Acceptable values are "true" and "false". Changing this value enables or disables the DHCP capabilities of the existing subnet. Defaults to true.
	EnableDHCP *bool `json:"enableDhcp,omitempty" tf:"enable_dhcp,omitempty"`

	// optional string →  Default gateway used by devices in this subnet. Leaving this blank and not setting no_gateway will cause a default gateway of .1 to be used. Changing this updates the gateway IP of the existing subnet.
	// Default gateway used by devices in this subnet. Leaving this blank and not setting `no_gateway` will cause a default gateway of `.1` to be used. Changing this updates the gateway IP of the existing subnet.
	GatewayIP *string `json:"gatewayIp,omitempty" tf:"gateway_ip,omitempty"`

	// string →  ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// optional string →  The name of the subnet. Changing this updates the name of the existing subnet.
	// The name of the subnet. Changing this updates the name of the existing subnet.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// required string →  The UUID of the parent network. Changing this creates a new subnet.
	// The UUID of the parent network. Changing this creates a new subnet.
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// optional boolean →  Do not set a gateway IP on this subnet. Changing this removes or adds a default gateway IP of the existing subnet.
	// Do not set a gateway IP on this subnet. Changing this removes or adds a default gateway IP of the existing subnet.
	NoGateway *bool `json:"noGateway,omitempty" tf:"no_gateway,omitempty"`

	// optional number →  The prefix length to use when creating a subnet from a subnet pool. The default subnet pool prefix length that was defined when creating the subnet pool will be used if not provided. Changing this creates a new subnet.
	// The prefix length to use when creating a subnet from a subnet pool. The default subnet pool prefix length that was defined when creating the subnet pool will be used if not provided. Changing this creates a new subnet.
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a subnet. If omitted, the region argument of the provider is used. Changing this creates a new subnet.
	// The region in which to obtain the Networking client. A Networking client is needed to create a subnet. If omitted, the `region` argument of the provider is used. Changing this creates a new subnet.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	Sdn *string `json:"sdn,omitempty" tf:"sdn,omitempty"`

	// optional string →  The ID of the subnetpool associated with the subnet.
	// The ID of the subnetpool associated with the subnet.
	SubnetpoolID *string `json:"subnetpoolId,omitempty" tf:"subnetpool_id,omitempty"`

	// optional set of string →  A set of string tags for the subnet.
	// A set of string tags for the subnet.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// optional map of string →  Map of additional options.
	// Map of additional options.
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

type SubnetParameters struct {

	// optional →  A block declaring the start and end range of the IP addresses available for use with DHCP in this subnet. Multiple allocation_pool blocks can be declared, providing the subnet with more than one range of IP addresses to use with DHCP. However, each IP range must be from the same CIDR that the subnet is part of. The allocation_pool block is documented below.
	// A block declaring the start and end range of the IP addresses available for use with DHCP in this subnet. Multiple `allocation_pool` blocks can be declared, providing the subnet with more than one range of IP addresses to use with DHCP. However, each IP range must be from the same CIDR that the subnet is part of. The `allocation_pool` block is documented below.
	// +kubebuilder:validation:Optional
	AllocationPool []AllocationPoolParameters `json:"allocationPool,omitempty" tf:"allocation_pool,omitempty"`

	// optional string →  CIDR representing IP range for this subnet, based on IP version. You can omit this option if you are creating a subnet from a subnet pool.
	// CIDR representing IP range for this subnet, based on IP version. You can omit this option if you are creating a subnet from a subnet pool.
	// +kubebuilder:validation:Optional
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// optional string →  An array of DNS name server names used by hosts in this subnet. Changing this updates the DNS name servers for the existing subnet.
	// An array of DNS name server names used by hosts in this subnet. Changing this updates the DNS name servers for the existing subnet.
	// +kubebuilder:validation:Optional
	DNSNameservers []*string `json:"dnsNameservers,omitempty" tf:"dns_nameservers,omitempty"`

	// readable description of the subnet. Changing this updates the name of the existing subnet.
	// Human-readable description of the subnet. Changing this updates the name of the existing subnet.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// optional boolean →  The administrative state of the network. Acceptable values are "true" and "false". Changing this value enables or disables the DHCP capabilities of the existing subnet. Defaults to true.
	// The administrative state of the network. Acceptable values are "true" and "false". Changing this value enables or disables the DHCP capabilities of the existing subnet. Defaults to true.
	// +kubebuilder:validation:Optional
	EnableDHCP *bool `json:"enableDhcp,omitempty" tf:"enable_dhcp,omitempty"`

	// optional string →  Default gateway used by devices in this subnet. Leaving this blank and not setting no_gateway will cause a default gateway of .1 to be used. Changing this updates the gateway IP of the existing subnet.
	// Default gateway used by devices in this subnet. Leaving this blank and not setting `no_gateway` will cause a default gateway of `.1` to be used. Changing this updates the gateway IP of the existing subnet.
	// +kubebuilder:validation:Optional
	GatewayIP *string `json:"gatewayIp,omitempty" tf:"gateway_ip,omitempty"`

	// optional string →  The name of the subnet. Changing this updates the name of the existing subnet.
	// The name of the subnet. Changing this updates the name of the existing subnet.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// required string →  The UUID of the parent network. Changing this creates a new subnet.
	// The UUID of the parent network. Changing this creates a new subnet.
	// +crossplane:generate:reference:type=Network
	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	// Reference to a Network to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDRef *v1.Reference `json:"networkIdRef,omitempty" tf:"-"`

	// Selector for a Network to populate networkId.
	// +kubebuilder:validation:Optional
	NetworkIDSelector *v1.Selector `json:"networkIdSelector,omitempty" tf:"-"`

	// optional boolean →  Do not set a gateway IP on this subnet. Changing this removes or adds a default gateway IP of the existing subnet.
	// Do not set a gateway IP on this subnet. Changing this removes or adds a default gateway IP of the existing subnet.
	// +kubebuilder:validation:Optional
	NoGateway *bool `json:"noGateway,omitempty" tf:"no_gateway,omitempty"`

	// optional number →  The prefix length to use when creating a subnet from a subnet pool. The default subnet pool prefix length that was defined when creating the subnet pool will be used if not provided. Changing this creates a new subnet.
	// The prefix length to use when creating a subnet from a subnet pool. The default subnet pool prefix length that was defined when creating the subnet pool will be used if not provided. Changing this creates a new subnet.
	// +kubebuilder:validation:Optional
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// optional string →  The region in which to obtain the Networking client. A Networking client is needed to create a subnet. If omitted, the region argument of the provider is used. Changing this creates a new subnet.
	// The region in which to obtain the Networking client. A Networking client is needed to create a subnet. If omitted, the `region` argument of the provider is used. Changing this creates a new subnet.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional string →  SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// SDN to use for this resource. Must be one of following: "neutron", "sprut". Default value is project's default SDN.
	// +kubebuilder:validation:Optional
	Sdn *string `json:"sdn,omitempty" tf:"sdn,omitempty"`

	// optional string →  The ID of the subnetpool associated with the subnet.
	// The ID of the subnetpool associated with the subnet.
	// +kubebuilder:validation:Optional
	SubnetpoolID *string `json:"subnetpoolId,omitempty" tf:"subnetpool_id,omitempty"`

	// optional set of string →  A set of string tags for the subnet.
	// A set of string tags for the subnet.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// optional map of string →  Map of additional options.
	// Map of additional options.
	// +kubebuilder:validation:Optional
	ValueSpecs map[string]*string `json:"valueSpecs,omitempty" tf:"value_specs,omitempty"`
}

// SubnetSpec defines the desired state of Subnet
type SubnetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SubnetParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SubnetInitParameters `json:"initProvider,omitempty"`
}

// SubnetStatus defines the observed state of Subnet.
type SubnetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SubnetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Subnet is the Schema for the Subnets API. Manages a subnet resource within VKCS.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vkcs}
type Subnet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SubnetSpec   `json:"spec"`
	Status            SubnetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubnetList contains a list of Subnets
type SubnetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Subnet `json:"items"`
}

// Repository type metadata.
var (
	Subnet_Kind             = "Subnet"
	Subnet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Subnet_Kind}.String()
	Subnet_KindAPIVersion   = Subnet_Kind + "." + CRDGroupVersion.String()
	Subnet_GroupVersionKind = CRDGroupVersion.WithKind(Subnet_Kind)
)

func init() {
	SchemeBuilder.Register(&Subnet{}, &SubnetList{})
}
