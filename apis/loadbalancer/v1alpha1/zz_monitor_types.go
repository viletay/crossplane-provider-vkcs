// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MonitorInitParameters struct {

	// optional boolean →  The administrative state of the monitor. A valid value is true (UP) or false (DOWN).
	// The administrative state of the monitor. A valid value is true (UP) or false (DOWN).
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// required number →  The time, in seconds, between sending probes to members.
	// The time, in seconds, between sending probes to members.
	Delay *float64 `json:"delay,omitempty" tf:"delay,omitempty"`

	// 202".
	// Required for HTTP(S) types. Expected HTTP codes for a passing HTTP(S) monitor. You can either specify a single status like "200", or a range like "200-202".
	ExpectedCodes *string `json:"expectedCodes,omitempty" tf:"expected_codes,omitempty"`

	// optional string →  Required for HTTP(S) types. The HTTP method used for requests by the monitor. If this attribute is not specified, it defaults to "GET".
	// Required for HTTP(S) types. The HTTP method used for requests by the monitor. If this attribute is not specified, it defaults to "GET".
	HTTPMethod *string `json:"httpMethod,omitempty" tf:"http_method,omitempty"`

	// required number →  Number of permissible ping failures before changing the member's status to INACTIVE. Must be a number between 1 and 10.
	// Number of permissible ping failures before changing the member's status to INACTIVE. Must be a number between 1 and 10.
	MaxRetries *float64 `json:"maxRetries,omitempty" tf:"max_retries,omitempty"`

	// optional number →  Number of permissible ping failures befor changing the member's status to ERROR. Must be a number between 1 and 10. Changing this updates the max_retries_down of the existing monitor.
	// Number of permissible ping failures befor changing the member's status to ERROR. Must be a number between 1 and 10. Changing this updates the max_retries_down of the existing monitor.
	MaxRetriesDown *float64 `json:"maxRetriesDown,omitempty" tf:"max_retries_down,omitempty"`

	// optional string →  The Name of the Monitor.
	// The Name of the Monitor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new monitor.
	// The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new monitor.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// required number →  Maximum number of seconds for a monitor to wait for a ping reply before it times out. The value must be less than the delay value.
	// Maximum number of seconds for a monitor to wait for a ping reply before it times out. The value must be less than the delay value.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// HELLO or UDP-CONNECT, that is sent by the load balancer to verify the member state. Changing this creates a new monitor.
	// The type of probe, which is PING, TCP, HTTP, HTTPS, TLS-HELLO or UDP-CONNECT, that is sent by the load balancer to verify the member state. Changing this creates a new monitor.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// optional string →  Required for HTTP(S) types. URI path that will be accessed if monitor type is HTTP or HTTPS.
	// Required for HTTP(S) types. URI path that will be accessed if monitor type is HTTP or HTTPS.
	URLPath *string `json:"urlPath,omitempty" tf:"url_path,omitempty"`
}

type MonitorObservation struct {

	// optional boolean →  The administrative state of the monitor. A valid value is true (UP) or false (DOWN).
	// The administrative state of the monitor. A valid value is true (UP) or false (DOWN).
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// required number →  The time, in seconds, between sending probes to members.
	// The time, in seconds, between sending probes to members.
	Delay *float64 `json:"delay,omitempty" tf:"delay,omitempty"`

	// 202".
	// Required for HTTP(S) types. Expected HTTP codes for a passing HTTP(S) monitor. You can either specify a single status like "200", or a range like "200-202".
	ExpectedCodes *string `json:"expectedCodes,omitempty" tf:"expected_codes,omitempty"`

	// optional string →  Required for HTTP(S) types. The HTTP method used for requests by the monitor. If this attribute is not specified, it defaults to "GET".
	// Required for HTTP(S) types. The HTTP method used for requests by the monitor. If this attribute is not specified, it defaults to "GET".
	HTTPMethod *string `json:"httpMethod,omitempty" tf:"http_method,omitempty"`

	// string →  ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// required number →  Number of permissible ping failures before changing the member's status to INACTIVE. Must be a number between 1 and 10.
	// Number of permissible ping failures before changing the member's status to INACTIVE. Must be a number between 1 and 10.
	MaxRetries *float64 `json:"maxRetries,omitempty" tf:"max_retries,omitempty"`

	// optional number →  Number of permissible ping failures befor changing the member's status to ERROR. Must be a number between 1 and 10. Changing this updates the max_retries_down of the existing monitor.
	// Number of permissible ping failures befor changing the member's status to ERROR. Must be a number between 1 and 10. Changing this updates the max_retries_down of the existing monitor.
	MaxRetriesDown *float64 `json:"maxRetriesDown,omitempty" tf:"max_retries_down,omitempty"`

	// optional string →  The Name of the Monitor.
	// The Name of the Monitor.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// required string →  The id of the pool that this monitor will be assigned to.
	// The id of the pool that this monitor will be assigned to.
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new monitor.
	// The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new monitor.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// required number →  Maximum number of seconds for a monitor to wait for a ping reply before it times out. The value must be less than the delay value.
	// Maximum number of seconds for a monitor to wait for a ping reply before it times out. The value must be less than the delay value.
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// HELLO or UDP-CONNECT, that is sent by the load balancer to verify the member state. Changing this creates a new monitor.
	// The type of probe, which is PING, TCP, HTTP, HTTPS, TLS-HELLO or UDP-CONNECT, that is sent by the load balancer to verify the member state. Changing this creates a new monitor.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// optional string →  Required for HTTP(S) types. URI path that will be accessed if monitor type is HTTP or HTTPS.
	// Required for HTTP(S) types. URI path that will be accessed if monitor type is HTTP or HTTPS.
	URLPath *string `json:"urlPath,omitempty" tf:"url_path,omitempty"`
}

type MonitorParameters struct {

	// optional boolean →  The administrative state of the monitor. A valid value is true (UP) or false (DOWN).
	// The administrative state of the monitor. A valid value is true (UP) or false (DOWN).
	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// required number →  The time, in seconds, between sending probes to members.
	// The time, in seconds, between sending probes to members.
	// +kubebuilder:validation:Optional
	Delay *float64 `json:"delay,omitempty" tf:"delay,omitempty"`

	// 202".
	// Required for HTTP(S) types. Expected HTTP codes for a passing HTTP(S) monitor. You can either specify a single status like "200", or a range like "200-202".
	// +kubebuilder:validation:Optional
	ExpectedCodes *string `json:"expectedCodes,omitempty" tf:"expected_codes,omitempty"`

	// optional string →  Required for HTTP(S) types. The HTTP method used for requests by the monitor. If this attribute is not specified, it defaults to "GET".
	// Required for HTTP(S) types. The HTTP method used for requests by the monitor. If this attribute is not specified, it defaults to "GET".
	// +kubebuilder:validation:Optional
	HTTPMethod *string `json:"httpMethod,omitempty" tf:"http_method,omitempty"`

	// required number →  Number of permissible ping failures before changing the member's status to INACTIVE. Must be a number between 1 and 10.
	// Number of permissible ping failures before changing the member's status to INACTIVE. Must be a number between 1 and 10.
	// +kubebuilder:validation:Optional
	MaxRetries *float64 `json:"maxRetries,omitempty" tf:"max_retries,omitempty"`

	// optional number →  Number of permissible ping failures befor changing the member's status to ERROR. Must be a number between 1 and 10. Changing this updates the max_retries_down of the existing monitor.
	// Number of permissible ping failures befor changing the member's status to ERROR. Must be a number between 1 and 10. Changing this updates the max_retries_down of the existing monitor.
	// +kubebuilder:validation:Optional
	MaxRetriesDown *float64 `json:"maxRetriesDown,omitempty" tf:"max_retries_down,omitempty"`

	// optional string →  The Name of the Monitor.
	// The Name of the Monitor.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// required string →  The id of the pool that this monitor will be assigned to.
	// The id of the pool that this monitor will be assigned to.
	// +crossplane:generate:reference:type=Pool
	// +kubebuilder:validation:Optional
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// Reference to a Pool to populate poolId.
	// +kubebuilder:validation:Optional
	PoolIDRef *v1.Reference `json:"poolIdRef,omitempty" tf:"-"`

	// Selector for a Pool to populate poolId.
	// +kubebuilder:validation:Optional
	PoolIDSelector *v1.Selector `json:"poolIdSelector,omitempty" tf:"-"`

	// optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new monitor.
	// The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new monitor.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// required number →  Maximum number of seconds for a monitor to wait for a ping reply before it times out. The value must be less than the delay value.
	// Maximum number of seconds for a monitor to wait for a ping reply before it times out. The value must be less than the delay value.
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`

	// HELLO or UDP-CONNECT, that is sent by the load balancer to verify the member state. Changing this creates a new monitor.
	// The type of probe, which is PING, TCP, HTTP, HTTPS, TLS-HELLO or UDP-CONNECT, that is sent by the load balancer to verify the member state. Changing this creates a new monitor.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// optional string →  Required for HTTP(S) types. URI path that will be accessed if monitor type is HTTP or HTTPS.
	// Required for HTTP(S) types. URI path that will be accessed if monitor type is HTTP or HTTPS.
	// +kubebuilder:validation:Optional
	URLPath *string `json:"urlPath,omitempty" tf:"url_path,omitempty"`
}

// MonitorSpec defines the desired state of Monitor
type MonitorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MonitorParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider MonitorInitParameters `json:"initProvider,omitempty"`
}

// MonitorStatus defines the observed state of Monitor.
type MonitorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MonitorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Monitor is the Schema for the Monitors API. Manages a monitor resource within VKCS.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vkcs}
type Monitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.delay) || (has(self.initProvider) && has(self.initProvider.delay))",message="spec.forProvider.delay is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.maxRetries) || (has(self.initProvider) && has(self.initProvider.maxRetries))",message="spec.forProvider.maxRetries is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.timeout) || (has(self.initProvider) && has(self.initProvider.timeout))",message="spec.forProvider.timeout is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	Spec   MonitorSpec   `json:"spec"`
	Status MonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitorList contains a list of Monitors
type MonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Monitor `json:"items"`
}

// Repository type metadata.
var (
	Monitor_Kind             = "Monitor"
	Monitor_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Monitor_Kind}.String()
	Monitor_KindAPIVersion   = Monitor_Kind + "." + CRDGroupVersion.String()
	Monitor_GroupVersionKind = CRDGroupVersion.WithKind(Monitor_Kind)
)

func init() {
	SchemeBuilder.Register(&Monitor{}, &MonitorList{})
}
