// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type L7RuleInitParameters struct {

	// optional boolean →  The administrative state of the L7 Rule. A valid value is true (UP) or false (DOWN).
	// The administrative state of the L7 Rule. A valid value is true (UP) or false (DOWN).
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// can either be CONTAINS, STARTS_WITH, ENDS_WITH, EQUAL_TO or REGEX
	// The comparison type for the L7 rule - can either be CONTAINS, STARTS\_WITH, ENDS_WITH, EQUAL_TO or REGEX
	CompareType *string `json:"compareType,omitempty" tf:"compare_type,omitempty"`

	// optional boolean →  When true the logic of the rule is inverted. For example, with invert true, equal to would become not equal to. Default is false.
	// When true the logic of the rule is inverted. For example, with invert true, equal to would become not equal to. Default is false.
	Invert *bool `json:"invert,omitempty" tf:"invert,omitempty"`

	// optional string →  The key to use for the comparison. For example, the name of the cookie to evaluate. Valid when type is set to COOKIE or HEADER.
	// The key to use for the comparison. For example, the name of the cookie to evaluate. Valid when `type` is set to COOKIE or HEADER.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new L7 Rule.
	// The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new L7 Rule.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// can either be COOKIE, FILE_TYPE, HEADER, HOST_NAME or PATH.
	// The L7 Rule type - can either be COOKIE, FILE\_TYPE, HEADER, HOST\_NAME or PATH.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// required string →  The value to use for the comparison. For example, the file type to compare.
	// The value to use for the comparison. For example, the file type to compare.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type L7RuleObservation struct {

	// optional boolean →  The administrative state of the L7 Rule. A valid value is true (UP) or false (DOWN).
	// The administrative state of the L7 Rule. A valid value is true (UP) or false (DOWN).
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// can either be CONTAINS, STARTS_WITH, ENDS_WITH, EQUAL_TO or REGEX
	// The comparison type for the L7 rule - can either be CONTAINS, STARTS\_WITH, ENDS_WITH, EQUAL_TO or REGEX
	CompareType *string `json:"compareType,omitempty" tf:"compare_type,omitempty"`

	// string →  ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// optional boolean →  When true the logic of the rule is inverted. For example, with invert true, equal to would become not equal to. Default is false.
	// When true the logic of the rule is inverted. For example, with invert true, equal to would become not equal to. Default is false.
	Invert *bool `json:"invert,omitempty" tf:"invert,omitempty"`

	// optional string →  The key to use for the comparison. For example, the name of the cookie to evaluate. Valid when type is set to COOKIE or HEADER.
	// The key to use for the comparison. For example, the name of the cookie to evaluate. Valid when `type` is set to COOKIE or HEADER.
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// required string →  The ID of the L7 Policy to query. Changing this creates a new L7 Rule.
	// The ID of the L7 Policy to query. Changing this creates a new L7 Rule.
	L7PolicyID *string `json:"l7policyId,omitempty" tf:"l7policy_id,omitempty"`

	// string →  The ID of the Listener owning this resource.
	// The ID of the Listener owning this resource.
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new L7 Rule.
	// The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new L7 Rule.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// can either be COOKIE, FILE_TYPE, HEADER, HOST_NAME or PATH.
	// The L7 Rule type - can either be COOKIE, FILE\_TYPE, HEADER, HOST\_NAME or PATH.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// required string →  The value to use for the comparison. For example, the file type to compare.
	// The value to use for the comparison. For example, the file type to compare.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type L7RuleParameters struct {

	// optional boolean →  The administrative state of the L7 Rule. A valid value is true (UP) or false (DOWN).
	// The administrative state of the L7 Rule. A valid value is true (UP) or false (DOWN).
	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// can either be CONTAINS, STARTS_WITH, ENDS_WITH, EQUAL_TO or REGEX
	// The comparison type for the L7 rule - can either be CONTAINS, STARTS\_WITH, ENDS_WITH, EQUAL_TO or REGEX
	// +kubebuilder:validation:Optional
	CompareType *string `json:"compareType,omitempty" tf:"compare_type,omitempty"`

	// optional boolean →  When true the logic of the rule is inverted. For example, with invert true, equal to would become not equal to. Default is false.
	// When true the logic of the rule is inverted. For example, with invert true, equal to would become not equal to. Default is false.
	// +kubebuilder:validation:Optional
	Invert *bool `json:"invert,omitempty" tf:"invert,omitempty"`

	// optional string →  The key to use for the comparison. For example, the name of the cookie to evaluate. Valid when type is set to COOKIE or HEADER.
	// The key to use for the comparison. For example, the name of the cookie to evaluate. Valid when `type` is set to COOKIE or HEADER.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// required string →  The ID of the L7 Policy to query. Changing this creates a new L7 Rule.
	// The ID of the L7 Policy to query. Changing this creates a new L7 Rule.
	// +crossplane:generate:reference:type=L7Policy
	// +kubebuilder:validation:Optional
	L7PolicyID *string `json:"l7policyId,omitempty" tf:"l7policy_id,omitempty"`

	// Reference to a L7Policy to populate l7policyId.
	// +kubebuilder:validation:Optional
	L7PolicyIDRef *v1.Reference `json:"l7policyIdRef,omitempty" tf:"-"`

	// Selector for a L7Policy to populate l7policyId.
	// +kubebuilder:validation:Optional
	L7PolicyIDSelector *v1.Selector `json:"l7policyIdSelector,omitempty" tf:"-"`

	// optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new L7 Rule.
	// The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new L7 Rule.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// can either be COOKIE, FILE_TYPE, HEADER, HOST_NAME or PATH.
	// The L7 Rule type - can either be COOKIE, FILE\_TYPE, HEADER, HOST\_NAME or PATH.
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// required string →  The value to use for the comparison. For example, the file type to compare.
	// The value to use for the comparison. For example, the file type to compare.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// L7RuleSpec defines the desired state of L7Rule
type L7RuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L7RuleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider L7RuleInitParameters `json:"initProvider,omitempty"`
}

// L7RuleStatus defines the observed state of L7Rule.
type L7RuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L7RuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L7Rule is the Schema for the L7Rules API. Manages a L7 rule resource within VKCS.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vkcs}
type L7Rule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.compareType) || (has(self.initProvider) && has(self.initProvider.compareType))",message="spec.forProvider.compareType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || (has(self.initProvider) && has(self.initProvider.type))",message="spec.forProvider.type is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.value) || (has(self.initProvider) && has(self.initProvider.value))",message="spec.forProvider.value is a required parameter"
	Spec   L7RuleSpec   `json:"spec"`
	Status L7RuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L7RuleList contains a list of L7Rules
type L7RuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L7Rule `json:"items"`
}

// Repository type metadata.
var (
	L7Rule_Kind             = "L7Rule"
	L7Rule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L7Rule_Kind}.String()
	L7Rule_KindAPIVersion   = L7Rule_Kind + "." + CRDGroupVersion.String()
	L7Rule_GroupVersionKind = CRDGroupVersion.WithKind(L7Rule_Kind)
)

func init() {
	SchemeBuilder.Register(&L7Rule{}, &L7RuleList{})
}
