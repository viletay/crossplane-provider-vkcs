// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LoadBalancerInitParameters struct {

	// optional boolean →  The administrative state of the Loadbalancer. A valid value is true (UP) or false (DOWN).
	// The administrative state of the Loadbalancer. A valid value is true (UP) or false (DOWN).
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// optional string →  The availability zone of the Loadbalancer. Changing this creates a new loadbalancer.
	// The availability zone of the Loadbalancer. Changing this creates a new loadbalancer.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// readable description for the Loadbalancer.
	// Human-readable description for the Loadbalancer.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// readable name for the Loadbalancer. Does not have to be unique.
	// Human-readable name for the Loadbalancer. Does not have to be unique.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new LB loadbalancer.
	// The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new LB loadbalancer.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional set of string →  A list of simple strings assigned to the loadbalancer.
	// A list of simple strings assigned to the loadbalancer.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// optional string →  The ip address of the load balancer. Changing this creates a new loadbalancer.
	// The ip address of the load balancer. Changing this creates a new loadbalancer.
	VipAddress *string `json:"vipAddress,omitempty" tf:"vip_address,omitempty"`
}

type LoadBalancerObservation struct {

	// optional boolean →  The administrative state of the Loadbalancer. A valid value is true (UP) or false (DOWN).
	// The administrative state of the Loadbalancer. A valid value is true (UP) or false (DOWN).
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// optional string →  The availability zone of the Loadbalancer. Changing this creates a new loadbalancer.
	// The availability zone of the Loadbalancer. Changing this creates a new loadbalancer.
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// readable description for the Loadbalancer.
	// Human-readable description for the Loadbalancer.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// string →  ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// readable name for the Loadbalancer. Does not have to be unique.
	// Human-readable name for the Loadbalancer. Does not have to be unique.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new LB loadbalancer.
	// The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new LB loadbalancer.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional deprecated set of string →  A list of security group IDs to apply to the loadbalancer. The security groups must be specified by ID and not name (as opposed to how they are configured with the Compute Instance). Deprecated This argument is deprecated, please do not use it.
	// A list of security group IDs to apply to the loadbalancer. The security groups must be specified by ID and not name (as opposed to how they are configured with the Compute Instance). **Deprecated** This argument is deprecated, please do not use it.
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// optional set of string →  A list of simple strings assigned to the loadbalancer.
	// A list of simple strings assigned to the loadbalancer.
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// optional string →  The ip address of the load balancer. Changing this creates a new loadbalancer.
	// The ip address of the load balancer. Changing this creates a new loadbalancer.
	VipAddress *string `json:"vipAddress,omitempty" tf:"vip_address,omitempty"`

	// optional string →  The network on which to allocate the Loadbalancer's address. A tenant can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are shared).  Changing this creates a new loadbalancer.
	// The network on which to allocate the Loadbalancer's address. A tenant can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are shared).  Changing this creates a new loadbalancer.
	VipNetworkID *string `json:"vipNetworkId,omitempty" tf:"vip_network_id,omitempty"`

	// optional string →  The port UUID that the loadbalancer will use. Changing this creates a new loadbalancer.
	// The port UUID that the loadbalancer will use. Changing this creates a new loadbalancer.
	VipPortID *string `json:"vipPortId,omitempty" tf:"vip_port_id,omitempty"`

	// optional string →  The subnet on which to allocate the Loadbalancer's address. A tenant can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are shared).  Changing this creates a new loadbalancer.
	// The subnet on which to allocate the Loadbalancer's address. A tenant can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are shared).  Changing this creates a new loadbalancer.
	VipSubnetID *string `json:"vipSubnetId,omitempty" tf:"vip_subnet_id,omitempty"`
}

type LoadBalancerParameters struct {

	// optional boolean →  The administrative state of the Loadbalancer. A valid value is true (UP) or false (DOWN).
	// The administrative state of the Loadbalancer. A valid value is true (UP) or false (DOWN).
	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// optional string →  The availability zone of the Loadbalancer. Changing this creates a new loadbalancer.
	// The availability zone of the Loadbalancer. Changing this creates a new loadbalancer.
	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// readable description for the Loadbalancer.
	// Human-readable description for the Loadbalancer.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// readable name for the Loadbalancer. Does not have to be unique.
	// Human-readable name for the Loadbalancer. Does not have to be unique.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new LB loadbalancer.
	// The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new LB loadbalancer.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// optional deprecated set of string →  A list of security group IDs to apply to the loadbalancer. The security groups must be specified by ID and not name (as opposed to how they are configured with the Compute Instance). Deprecated This argument is deprecated, please do not use it.
	// A list of security group IDs to apply to the loadbalancer. The security groups must be specified by ID and not name (as opposed to how they are configured with the Compute Instance). **Deprecated** This argument is deprecated, please do not use it.
	// +crossplane:generate:reference:type=github.com/viletay/provider-vkcs/apis/network/v1alpha1.SecurityGroup
	// +kubebuilder:validation:Optional
	SecurityGroupIds []*string `json:"securityGroupIds,omitempty" tf:"security_group_ids,omitempty"`

	// References to SecurityGroup in network to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsRefs []v1.Reference `json:"securityGroupIdsRefs,omitempty" tf:"-"`

	// Selector for a list of SecurityGroup in network to populate securityGroupIds.
	// +kubebuilder:validation:Optional
	SecurityGroupIdsSelector *v1.Selector `json:"securityGroupIdsSelector,omitempty" tf:"-"`

	// optional set of string →  A list of simple strings assigned to the loadbalancer.
	// A list of simple strings assigned to the loadbalancer.
	// +kubebuilder:validation:Optional
	Tags []*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// optional string →  The ip address of the load balancer. Changing this creates a new loadbalancer.
	// The ip address of the load balancer. Changing this creates a new loadbalancer.
	// +kubebuilder:validation:Optional
	VipAddress *string `json:"vipAddress,omitempty" tf:"vip_address,omitempty"`

	// optional string →  The network on which to allocate the Loadbalancer's address. A tenant can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are shared).  Changing this creates a new loadbalancer.
	// The network on which to allocate the Loadbalancer's address. A tenant can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are shared).  Changing this creates a new loadbalancer.
	// +crossplane:generate:reference:type=github.com/viletay/provider-vkcs/apis/network/v1alpha1.Network
	// +kubebuilder:validation:Optional
	VipNetworkID *string `json:"vipNetworkId,omitempty" tf:"vip_network_id,omitempty"`

	// Reference to a Network in network to populate vipNetworkId.
	// +kubebuilder:validation:Optional
	VipNetworkIDRef *v1.Reference `json:"vipNetworkIdRef,omitempty" tf:"-"`

	// Selector for a Network in network to populate vipNetworkId.
	// +kubebuilder:validation:Optional
	VipNetworkIDSelector *v1.Selector `json:"vipNetworkIdSelector,omitempty" tf:"-"`

	// optional string →  The port UUID that the loadbalancer will use. Changing this creates a new loadbalancer.
	// The port UUID that the loadbalancer will use. Changing this creates a new loadbalancer.
	// +crossplane:generate:reference:type=github.com/viletay/provider-vkcs/apis/network/v1alpha1.Port
	// +kubebuilder:validation:Optional
	VipPortID *string `json:"vipPortId,omitempty" tf:"vip_port_id,omitempty"`

	// Reference to a Port in network to populate vipPortId.
	// +kubebuilder:validation:Optional
	VipPortIDRef *v1.Reference `json:"vipPortIdRef,omitempty" tf:"-"`

	// Selector for a Port in network to populate vipPortId.
	// +kubebuilder:validation:Optional
	VipPortIDSelector *v1.Selector `json:"vipPortIdSelector,omitempty" tf:"-"`

	// optional string →  The subnet on which to allocate the Loadbalancer's address. A tenant can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are shared).  Changing this creates a new loadbalancer.
	// The subnet on which to allocate the Loadbalancer's address. A tenant can only create Loadbalancers on networks authorized by policy (e.g. networks that belong to them or networks that are shared).  Changing this creates a new loadbalancer.
	// +crossplane:generate:reference:type=github.com/viletay/provider-vkcs/apis/network/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	VipSubnetID *string `json:"vipSubnetId,omitempty" tf:"vip_subnet_id,omitempty"`

	// Reference to a Subnet in network to populate vipSubnetId.
	// +kubebuilder:validation:Optional
	VipSubnetIDRef *v1.Reference `json:"vipSubnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in network to populate vipSubnetId.
	// +kubebuilder:validation:Optional
	VipSubnetIDSelector *v1.Selector `json:"vipSubnetIdSelector,omitempty" tf:"-"`
}

// LoadBalancerSpec defines the desired state of LoadBalancer
type LoadBalancerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LoadBalancerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LoadBalancerInitParameters `json:"initProvider,omitempty"`
}

// LoadBalancerStatus defines the observed state of LoadBalancer.
type LoadBalancerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LoadBalancerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LoadBalancer is the Schema for the LoadBalancers API. Manages a loadbalancer resource within VKCS.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vkcs}
type LoadBalancer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LoadBalancerSpec   `json:"spec"`
	Status            LoadBalancerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LoadBalancerList contains a list of LoadBalancers
type LoadBalancerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LoadBalancer `json:"items"`
}

// Repository type metadata.
var (
	LoadBalancer_Kind             = "LoadBalancer"
	LoadBalancer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LoadBalancer_Kind}.String()
	LoadBalancer_KindAPIVersion   = LoadBalancer_Kind + "." + CRDGroupVersion.String()
	LoadBalancer_GroupVersionKind = CRDGroupVersion.WithKind(LoadBalancer_Kind)
)

func init() {
	SchemeBuilder.Register(&LoadBalancer{}, &LoadBalancerList{})
}
