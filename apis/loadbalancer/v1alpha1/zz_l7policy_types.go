// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type L7PolicyInitParameters struct {

	// can either be REDIRECT_TO_POOL, REDIRECT_TO_URL or REJECT.
	// The L7 Policy action - can either be REDIRECT\_TO\_POOL, REDIRECT\_TO\_URL or REJECT.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// optional boolean →  The administrative state of the L7 Policy. A valid value is true (UP) or false (DOWN).
	// The administrative state of the L7 Policy. A valid value is true (UP) or false (DOWN).
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// readable description for the L7 Policy.
	// Human-readable description for the L7 Policy.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// readable name for the L7 Policy. Does not have to be unique.
	// Human-readable name for the L7 Policy. Does not have to be unique.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional number →  The position of this policy on the listener. Positions start at 1.
	// The position of this policy on the listener. Positions start at 1.
	Position *float64 `json:"position,omitempty" tf:"position,omitempty"`

	// optional string →  Requests matching this policy will be redirected to this URL. Only valid if action is REDIRECT_TO_URL.
	// Requests matching this policy will be redirected to this URL. Only valid if action is REDIRECT\_TO\_URL.
	RedirectURL *string `json:"redirectUrl,omitempty" tf:"redirect_url,omitempty"`

	// optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new L7 Policy.
	// The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new L7 Policy.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type L7PolicyObservation struct {

	// can either be REDIRECT_TO_POOL, REDIRECT_TO_URL or REJECT.
	// The L7 Policy action - can either be REDIRECT\_TO\_POOL, REDIRECT\_TO\_URL or REJECT.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// optional boolean →  The administrative state of the L7 Policy. A valid value is true (UP) or false (DOWN).
	// The administrative state of the L7 Policy. A valid value is true (UP) or false (DOWN).
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// readable description for the L7 Policy.
	// Human-readable description for the L7 Policy.
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// string →  ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// required string →  The Listener on which the L7 Policy will be associated with. Changing this creates a new L7 Policy.
	// The Listener on which the L7 Policy will be associated with. Changing this creates a new L7 Policy.
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// readable name for the L7 Policy. Does not have to be unique.
	// Human-readable name for the L7 Policy. Does not have to be unique.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional number →  The position of this policy on the listener. Positions start at 1.
	// The position of this policy on the listener. Positions start at 1.
	Position *float64 `json:"position,omitempty" tf:"position,omitempty"`

	// optional string →  Requests matching this policy will be redirected to the pool with this ID. Only valid if action is REDIRECT_TO_POOL.
	// Requests matching this policy will be redirected to the pool with this ID. Only valid if action is REDIRECT\_TO\_POOL.
	RedirectPoolID *string `json:"redirectPoolId,omitempty" tf:"redirect_pool_id,omitempty"`

	// optional string →  Requests matching this policy will be redirected to this URL. Only valid if action is REDIRECT_TO_URL.
	// Requests matching this policy will be redirected to this URL. Only valid if action is REDIRECT\_TO\_URL.
	RedirectURL *string `json:"redirectUrl,omitempty" tf:"redirect_url,omitempty"`

	// optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new L7 Policy.
	// The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new L7 Policy.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type L7PolicyParameters struct {

	// can either be REDIRECT_TO_POOL, REDIRECT_TO_URL or REJECT.
	// The L7 Policy action - can either be REDIRECT\_TO\_POOL, REDIRECT\_TO\_URL or REJECT.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// optional boolean →  The administrative state of the L7 Policy. A valid value is true (UP) or false (DOWN).
	// The administrative state of the L7 Policy. A valid value is true (UP) or false (DOWN).
	// +kubebuilder:validation:Optional
	AdminStateUp *bool `json:"adminStateUp,omitempty" tf:"admin_state_up,omitempty"`

	// readable description for the L7 Policy.
	// Human-readable description for the L7 Policy.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// required string →  The Listener on which the L7 Policy will be associated with. Changing this creates a new L7 Policy.
	// The Listener on which the L7 Policy will be associated with. Changing this creates a new L7 Policy.
	// +crossplane:generate:reference:type=Listener
	// +kubebuilder:validation:Optional
	ListenerID *string `json:"listenerId,omitempty" tf:"listener_id,omitempty"`

	// Reference to a Listener to populate listenerId.
	// +kubebuilder:validation:Optional
	ListenerIDRef *v1.Reference `json:"listenerIdRef,omitempty" tf:"-"`

	// Selector for a Listener to populate listenerId.
	// +kubebuilder:validation:Optional
	ListenerIDSelector *v1.Selector `json:"listenerIdSelector,omitempty" tf:"-"`

	// readable name for the L7 Policy. Does not have to be unique.
	// Human-readable name for the L7 Policy. Does not have to be unique.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// optional number →  The position of this policy on the listener. Positions start at 1.
	// The position of this policy on the listener. Positions start at 1.
	// +kubebuilder:validation:Optional
	Position *float64 `json:"position,omitempty" tf:"position,omitempty"`

	// optional string →  Requests matching this policy will be redirected to the pool with this ID. Only valid if action is REDIRECT_TO_POOL.
	// Requests matching this policy will be redirected to the pool with this ID. Only valid if action is REDIRECT\_TO\_POOL.
	// +crossplane:generate:reference:type=Pool
	// +kubebuilder:validation:Optional
	RedirectPoolID *string `json:"redirectPoolId,omitempty" tf:"redirect_pool_id,omitempty"`

	// Reference to a Pool to populate redirectPoolId.
	// +kubebuilder:validation:Optional
	RedirectPoolIDRef *v1.Reference `json:"redirectPoolIdRef,omitempty" tf:"-"`

	// Selector for a Pool to populate redirectPoolId.
	// +kubebuilder:validation:Optional
	RedirectPoolIDSelector *v1.Selector `json:"redirectPoolIdSelector,omitempty" tf:"-"`

	// optional string →  Requests matching this policy will be redirected to this URL. Only valid if action is REDIRECT_TO_URL.
	// Requests matching this policy will be redirected to this URL. Only valid if action is REDIRECT\_TO\_URL.
	// +kubebuilder:validation:Optional
	RedirectURL *string `json:"redirectUrl,omitempty" tf:"redirect_url,omitempty"`

	// optional string →  The region in which to obtain the Loadbalancer client. If omitted, the region argument of the provider is used. Changing this creates a new L7 Policy.
	// The region in which to obtain the Loadbalancer client. If omitted, the `region` argument of the provider is used. Changing this creates a new L7 Policy.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

// L7PolicySpec defines the desired state of L7Policy
type L7PolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     L7PolicyParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider L7PolicyInitParameters `json:"initProvider,omitempty"`
}

// L7PolicyStatus defines the observed state of L7Policy.
type L7PolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        L7PolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// L7Policy is the Schema for the L7Policys API. Manages a L7 Policy resource within VKCS.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vkcs}
type L7Policy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.action) || (has(self.initProvider) && has(self.initProvider.action))",message="spec.forProvider.action is a required parameter"
	Spec   L7PolicySpec   `json:"spec"`
	Status L7PolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// L7PolicyList contains a list of L7Policys
type L7PolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []L7Policy `json:"items"`
}

// Repository type metadata.
var (
	L7Policy_Kind             = "L7Policy"
	L7Policy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: L7Policy_Kind}.String()
	L7Policy_KindAPIVersion   = L7Policy_Kind + "." + CRDGroupVersion.String()
	L7Policy_GroupVersionKind = CRDGroupVersion.WithKind(L7Policy_Kind)
)

func init() {
	SchemeBuilder.Register(&L7Policy{}, &L7PolicyList{})
}
