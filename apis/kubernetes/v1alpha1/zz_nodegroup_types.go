// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LabelsInitParameters struct {

	// required string
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// optional string
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LabelsObservation struct {

	// required string
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// optional string
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LabelsParameters struct {

	// required string
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// optional string
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NodeGroupInitParameters struct {

	// optional boolean →  Determines whether the autoscaling is enabled.
	// Determines whether the autoscaling is enabled.
	AutoscalingEnabled *bool `json:"autoscalingEnabled,omitempty" tf:"autoscaling_enabled,omitempty"`

	// optional string →  The list of availability zones of the node group. Zones MS1 and  GZ1 are available. By default, node group is being created at cluster's zone.
	// Important: Receiving default AZ add it manually to your main.tf config to sync it with state to avoid node groups force recreation in the future.
	// The list of availability zones of the node group. Zones `MS1` and  `GZ1` are available. By default, node group is being created at cluster's zone.
	// **Important:** Receiving default AZ add it manually to your main.tf config to sync it with state to avoid node groups force recreation in the future.
	AvailabilityZones []*string `json:"availabilityZones,omitempty" tf:"availability_zones,omitempty"`

	// optional →  The list of objects representing representing additional properties of the node group. Each object should have attribute "key". Object may also have optional attribute "value".
	// The list of objects representing representing additional properties of the node group. Each object should have attribute "key". Object may also have optional attribute "value".
	Labels []LabelsInitParameters `json:"labels,omitempty" tf:"labels,omitempty"`

	// optional number →  The maximum number of nodes that can fail during an upgrade. The default value is 25 percent.
	// The maximum number of nodes that can fail during an upgrade. The default value is 25 percent.
	MaxNodeUnavailable *float64 `json:"maxNodeUnavailable,omitempty" tf:"max_node_unavailable,omitempty"`

	// optional number →  The maximum allowed nodes for this node group.
	// The maximum allowed nodes for this node group.
	MaxNodes *float64 `json:"maxNodes,omitempty" tf:"max_nodes,omitempty"`

	// optional number →  The minimum allowed nodes for this node group. Default to 0 if not set.
	// The minimum allowed nodes for this node group. Default to 0 if not set.
	MinNodes *float64 `json:"minNodes,omitempty" tf:"min_nodes,omitempty"`

	// required string →  The name of node group to create. Changing this will force to create a new node group.
	// The name of node group to create. Changing this will force to create a new node group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// required number →  The node count for this node group. Should be greater than 0. If autoscaling_enabled parameter is set, this attribute will be ignored during update.
	// The node count for this node group. Should be greater than 0. If `autoscaling_enabled` parameter is set, this attribute will be ignored during update.
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// optional →  The list of objects representing node group taints. Each object should have following attributes: key, value, effect.
	// The list of objects representing node group taints. Each object should have following attributes: key, value, effect.
	Taints []TaintsInitParameters `json:"taints,omitempty" tf:"taints,omitempty"`

	// optional number →  The size in GB for volume to load nodes from. Changing this will force to create a new node group.
	// The size in GB for volume to load nodes from. Changing this will force to create a new node group.
	VolumeSize *float64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`

	// optional string →  The volume type to load nodes from. Changing this will force to create a new node group.
	// The volume type to load nodes from. Changing this will force to create a new node group.
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type NodeGroupObservation struct {

	// optional boolean →  Determines whether the autoscaling is enabled.
	// Determines whether the autoscaling is enabled.
	AutoscalingEnabled *bool `json:"autoscalingEnabled,omitempty" tf:"autoscaling_enabled,omitempty"`

	// optional string →  The list of availability zones of the node group. Zones MS1 and  GZ1 are available. By default, node group is being created at cluster's zone.
	// Important: Receiving default AZ add it manually to your main.tf config to sync it with state to avoid node groups force recreation in the future.
	// The list of availability zones of the node group. Zones `MS1` and  `GZ1` are available. By default, node group is being created at cluster's zone.
	// **Important:** Receiving default AZ add it manually to your main.tf config to sync it with state to avoid node groups force recreation in the future.
	AvailabilityZones []*string `json:"availabilityZones,omitempty" tf:"availability_zones,omitempty"`

	// required string →  The UUID of the existing cluster.
	// The UUID of the existing cluster.
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// string →  The time at which node group was created.
	// The time at which node group was created.
	CreatedAt *string `json:"createdAt,omitempty" tf:"created_at,omitempty"`

	// place update and may not be provided in custom deployments. In this case, contact support for clarification.
	// The flavor UUID of this node group. _note_ Starting with v0.5.1, changing this attribute does not force the resource to be recreated, which requires an in-place update and may not be provided in custom deployments. In this case, contact support for clarification.
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// string →  ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// optional →  The list of objects representing representing additional properties of the node group. Each object should have attribute "key". Object may also have optional attribute "value".
	// The list of objects representing representing additional properties of the node group. Each object should have attribute "key". Object may also have optional attribute "value".
	Labels []LabelsObservation `json:"labels,omitempty" tf:"labels,omitempty"`

	// optional number →  The maximum number of nodes that can fail during an upgrade. The default value is 25 percent.
	// The maximum number of nodes that can fail during an upgrade. The default value is 25 percent.
	MaxNodeUnavailable *float64 `json:"maxNodeUnavailable,omitempty" tf:"max_node_unavailable,omitempty"`

	// optional number →  The maximum allowed nodes for this node group.
	// The maximum allowed nodes for this node group.
	MaxNodes *float64 `json:"maxNodes,omitempty" tf:"max_nodes,omitempty"`

	// optional number →  The minimum allowed nodes for this node group. Default to 0 if not set.
	// The minimum allowed nodes for this node group. Default to 0 if not set.
	MinNodes *float64 `json:"minNodes,omitempty" tf:"min_nodes,omitempty"`

	// required string →  The name of node group to create. Changing this will force to create a new node group.
	// The name of node group to create. Changing this will force to create a new node group.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// required number →  The node count for this node group. Should be greater than 0. If autoscaling_enabled parameter is set, this attribute will be ignored during update.
	// The node count for this node group. Should be greater than 0. If `autoscaling_enabled` parameter is set, this attribute will be ignored during update.
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// string →  Determines current state of node group (RUNNING, SHUTOFF, ERROR).
	// Determines current state of node group (RUNNING, SHUTOFF, ERROR).
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// optional →  The list of objects representing node group taints. Each object should have following attributes: key, value, effect.
	// The list of objects representing node group taints. Each object should have following attributes: key, value, effect.
	Taints []TaintsObservation `json:"taints,omitempty" tf:"taints,omitempty"`

	// string →  The UUID of the cluster's node group.
	// The UUID of the cluster's node group.
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// string →  The time at which node group was created.
	// The time at which node group was created.
	UpdatedAt *string `json:"updatedAt,omitempty" tf:"updated_at,omitempty"`

	// optional number →  The size in GB for volume to load nodes from. Changing this will force to create a new node group.
	// The size in GB for volume to load nodes from. Changing this will force to create a new node group.
	VolumeSize *float64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`

	// optional string →  The volume type to load nodes from. Changing this will force to create a new node group.
	// The volume type to load nodes from. Changing this will force to create a new node group.
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type NodeGroupParameters struct {

	// optional boolean →  Determines whether the autoscaling is enabled.
	// Determines whether the autoscaling is enabled.
	// +kubebuilder:validation:Optional
	AutoscalingEnabled *bool `json:"autoscalingEnabled,omitempty" tf:"autoscaling_enabled,omitempty"`

	// optional string →  The list of availability zones of the node group. Zones MS1 and  GZ1 are available. By default, node group is being created at cluster's zone.
	// Important: Receiving default AZ add it manually to your main.tf config to sync it with state to avoid node groups force recreation in the future.
	// The list of availability zones of the node group. Zones `MS1` and  `GZ1` are available. By default, node group is being created at cluster's zone.
	// **Important:** Receiving default AZ add it manually to your main.tf config to sync it with state to avoid node groups force recreation in the future.
	// +kubebuilder:validation:Optional
	AvailabilityZones []*string `json:"availabilityZones,omitempty" tf:"availability_zones,omitempty"`

	// required string →  The UUID of the existing cluster.
	// The UUID of the existing cluster.
	// +crossplane:generate:reference:type=Cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// place update and may not be provided in custom deployments. In this case, contact support for clarification.
	// The flavor UUID of this node group. _note_ Starting with v0.5.1, changing this attribute does not force the resource to be recreated, which requires an in-place update and may not be provided in custom deployments. In this case, contact support for clarification.
	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-openstack/apis/compute/v1alpha1.FlavorV2
	// +kubebuilder:validation:Optional
	FlavorID *string `json:"flavorId,omitempty" tf:"flavor_id,omitempty"`

	// Reference to a FlavorV2 in compute to populate flavorId.
	// +kubebuilder:validation:Optional
	FlavorIDRef *v1.Reference `json:"flavorIdRef,omitempty" tf:"-"`

	// Selector for a FlavorV2 in compute to populate flavorId.
	// +kubebuilder:validation:Optional
	FlavorIDSelector *v1.Selector `json:"flavorIdSelector,omitempty" tf:"-"`

	// optional →  The list of objects representing representing additional properties of the node group. Each object should have attribute "key". Object may also have optional attribute "value".
	// The list of objects representing representing additional properties of the node group. Each object should have attribute "key". Object may also have optional attribute "value".
	// +kubebuilder:validation:Optional
	Labels []LabelsParameters `json:"labels,omitempty" tf:"labels,omitempty"`

	// optional number →  The maximum number of nodes that can fail during an upgrade. The default value is 25 percent.
	// The maximum number of nodes that can fail during an upgrade. The default value is 25 percent.
	// +kubebuilder:validation:Optional
	MaxNodeUnavailable *float64 `json:"maxNodeUnavailable,omitempty" tf:"max_node_unavailable,omitempty"`

	// optional number →  The maximum allowed nodes for this node group.
	// The maximum allowed nodes for this node group.
	// +kubebuilder:validation:Optional
	MaxNodes *float64 `json:"maxNodes,omitempty" tf:"max_nodes,omitempty"`

	// optional number →  The minimum allowed nodes for this node group. Default to 0 if not set.
	// The minimum allowed nodes for this node group. Default to 0 if not set.
	// +kubebuilder:validation:Optional
	MinNodes *float64 `json:"minNodes,omitempty" tf:"min_nodes,omitempty"`

	// required string →  The name of node group to create. Changing this will force to create a new node group.
	// The name of node group to create. Changing this will force to create a new node group.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// required number →  The node count for this node group. Should be greater than 0. If autoscaling_enabled parameter is set, this attribute will be ignored during update.
	// The node count for this node group. Should be greater than 0. If `autoscaling_enabled` parameter is set, this attribute will be ignored during update.
	// +kubebuilder:validation:Optional
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// optional →  The list of objects representing node group taints. Each object should have following attributes: key, value, effect.
	// The list of objects representing node group taints. Each object should have following attributes: key, value, effect.
	// +kubebuilder:validation:Optional
	Taints []TaintsParameters `json:"taints,omitempty" tf:"taints,omitempty"`

	// optional number →  The size in GB for volume to load nodes from. Changing this will force to create a new node group.
	// The size in GB for volume to load nodes from. Changing this will force to create a new node group.
	// +kubebuilder:validation:Optional
	VolumeSize *float64 `json:"volumeSize,omitempty" tf:"volume_size,omitempty"`

	// optional string →  The volume type to load nodes from. Changing this will force to create a new node group.
	// The volume type to load nodes from. Changing this will force to create a new node group.
	// +kubebuilder:validation:Optional
	VolumeType *string `json:"volumeType,omitempty" tf:"volume_type,omitempty"`
}

type TaintsInitParameters struct {

	// required string
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// required string
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// optional string
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TaintsObservation struct {

	// required string
	Effect *string `json:"effect,omitempty" tf:"effect,omitempty"`

	// required string
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// optional string
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TaintsParameters struct {

	// required string
	// +kubebuilder:validation:Optional
	Effect *string `json:"effect" tf:"effect,omitempty"`

	// required string
	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// optional string
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// NodeGroupSpec defines the desired state of NodeGroup
type NodeGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NodeGroupParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NodeGroupInitParameters `json:"initProvider,omitempty"`
}

// NodeGroupStatus defines the observed state of NodeGroup.
type NodeGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NodeGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NodeGroup is the Schema for the NodeGroups API. Manages clusters node group.
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vkcs}
type NodeGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodeCount) || (has(self.initProvider) && has(self.initProvider.nodeCount))",message="spec.forProvider.nodeCount is a required parameter"
	Spec   NodeGroupSpec   `json:"spec"`
	Status NodeGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NodeGroupList contains a list of NodeGroups
type NodeGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NodeGroup `json:"items"`
}

// Repository type metadata.
var (
	NodeGroup_Kind             = "NodeGroup"
	NodeGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NodeGroup_Kind}.String()
	NodeGroup_KindAPIVersion   = NodeGroup_Kind + "." + CRDGroupVersion.String()
	NodeGroup_GroupVersionKind = CRDGroupVersion.WithKind(NodeGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&NodeGroup{}, &NodeGroupList{})
}
