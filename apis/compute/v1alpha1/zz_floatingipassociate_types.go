// SPDX-FileCopyrightText: 2023 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FloatingIPAssociateInitParameters struct {

	// optional string →  The specific IP address to direct traffic to.
	// The specific IP address to direct traffic to.
	FixedIP *string `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	// optional string →  The region in which to obtain the V2 Compute client. Keypairs are associated with accounts, but a Compute client is needed to create one. If omitted, the region argument of the provider is used. Changing this creates a new floatingip_associate.
	// The region in which to obtain the V2 Compute client. Keypairs are associated with accounts, but a Compute client is needed to create one. If omitted, the `region` argument of the provider is used. Changing this creates a new floatingip_associate.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Defaults to false. Defaults to false.
	WaitUntilAssociated *bool `json:"waitUntilAssociated,omitempty" tf:"wait_until_associated,omitempty"`
}

type FloatingIPAssociateObservation struct {

	// optional string →  The specific IP address to direct traffic to.
	// The specific IP address to direct traffic to.
	FixedIP *string `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	// required string →  The floating IP to associate.
	// The floating IP to associate.
	FloatingIP *string `json:"floatingIp,omitempty" tf:"floating_ip,omitempty"`

	// string →  ID of the resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// required string →  The instance to associate the floating IP with.
	// The instance to associate the floating IP with.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// optional string →  The region in which to obtain the V2 Compute client. Keypairs are associated with accounts, but a Compute client is needed to create one. If omitted, the region argument of the provider is used. Changing this creates a new floatingip_associate.
	// The region in which to obtain the V2 Compute client. Keypairs are associated with accounts, but a Compute client is needed to create one. If omitted, the `region` argument of the provider is used. Changing this creates a new floatingip_associate.
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Defaults to false. Defaults to false.
	WaitUntilAssociated *bool `json:"waitUntilAssociated,omitempty" tf:"wait_until_associated,omitempty"`
}

type FloatingIPAssociateParameters struct {

	// optional string →  The specific IP address to direct traffic to.
	// The specific IP address to direct traffic to.
	// +kubebuilder:validation:Optional
	FixedIP *string `json:"fixedIp,omitempty" tf:"fixed_ip,omitempty"`

	// required string →  The floating IP to associate.
	// The floating IP to associate.
	// +crossplane:generate:reference:type=github.com/viletay/provider-vkcs/apis/network/v1alpha1.FloatingIP
	// +crossplane:generate:reference:extractor=github.com/viletay/provider-vkcs/config/network.ExtractSpecAddress()
	// +kubebuilder:validation:Optional
	FloatingIP *string `json:"floatingIp,omitempty" tf:"floating_ip,omitempty"`

	// Reference to a FloatingIP in network to populate floatingIp.
	// +kubebuilder:validation:Optional
	FloatingIPRef *v1.Reference `json:"floatingIpRef,omitempty" tf:"-"`

	// Selector for a FloatingIP in network to populate floatingIp.
	// +kubebuilder:validation:Optional
	FloatingIPSelector *v1.Selector `json:"floatingIpSelector,omitempty" tf:"-"`

	// required string →  The instance to associate the floating IP with.
	// The instance to associate the floating IP with.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// optional string →  The region in which to obtain the V2 Compute client. Keypairs are associated with accounts, but a Compute client is needed to create one. If omitted, the region argument of the provider is used. Changing this creates a new floatingip_associate.
	// The region in which to obtain the V2 Compute client. Keypairs are associated with accounts, but a Compute client is needed to create one. If omitted, the `region` argument of the provider is used. Changing this creates a new floatingip_associate.
	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// Defaults to false. Defaults to false.
	// +kubebuilder:validation:Optional
	WaitUntilAssociated *bool `json:"waitUntilAssociated,omitempty" tf:"wait_until_associated,omitempty"`
}

// FloatingIPAssociateSpec defines the desired state of FloatingIPAssociate
type FloatingIPAssociateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FloatingIPAssociateParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FloatingIPAssociateInitParameters `json:"initProvider,omitempty"`
}

// FloatingIPAssociateStatus defines the observed state of FloatingIPAssociate.
type FloatingIPAssociateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FloatingIPAssociateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FloatingIPAssociate is the Schema for the FloatingIPAssociates API. Associate a floating IP to an instance
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,vkcs}
type FloatingIPAssociate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FloatingIPAssociateSpec   `json:"spec"`
	Status            FloatingIPAssociateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FloatingIPAssociateList contains a list of FloatingIPAssociates
type FloatingIPAssociateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FloatingIPAssociate `json:"items"`
}

// Repository type metadata.
var (
	FloatingIPAssociate_Kind             = "FloatingIPAssociate"
	FloatingIPAssociate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FloatingIPAssociate_Kind}.String()
	FloatingIPAssociate_KindAPIVersion   = FloatingIPAssociate_Kind + "." + CRDGroupVersion.String()
	FloatingIPAssociate_GroupVersionKind = CRDGroupVersion.WithKind(FloatingIPAssociate_Kind)
)

func init() {
	SchemeBuilder.Register(&FloatingIPAssociate{}, &FloatingIPAssociateList{})
}
